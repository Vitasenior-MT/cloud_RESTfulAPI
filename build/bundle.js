require("source-map-support").install(),function(e){var t={};function r(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:s})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r.w={},r(r.s=40)}([function(e,t,r){var s=r(4),n=r(37),a="",o="";a="mongodb://localhost:27017/myproject",o="mysql://api:123qwe@localhost:3306/node";const i={$eq:n.Op.eq,$ne:n.Op.ne,$gte:n.Op.gte,$gt:n.Op.gt,$lte:n.Op.lte,$lt:n.Op.lt,$not:n.Op.not,$in:n.Op.in,$notIn:n.Op.notIn,$is:n.Op.is,$like:n.Op.like,$notLike:n.Op.notLike,$iLike:n.Op.iLike,$notILike:n.Op.notILike,$regexp:n.Op.regexp,$notRegexp:n.Op.notRegexp,$iRegexp:n.Op.iRegexp,$notIRegexp:n.Op.notIRegexp,$between:n.Op.between,$notBetween:n.Op.notBetween,$overlap:n.Op.overlap,$contains:n.Op.contains,$contained:n.Op.contained,$adjacent:n.Op.adjacent,$strictLeft:n.Op.strictLeft,$strictRight:n.Op.strictRight,$noExtendRight:n.Op.noExtendRight,$noExtendLeft:n.Op.noExtendLeft,$and:n.Op.and,$or:n.Op.or,$any:n.Op.any,$all:n.Op.all,$values:n.Op.values,$col:n.Op.col};s.connect(a);var d=new n(o,{operatorsAliases:i,logging:!1});const u={Boardmodel:r(36)(d,n),Board:r(35)(d,n),Patient:r(34)(d,n),Sensor:r(33)(d,n),UserVitabox:r(32)(d,n),User:r(31)(d,n),Vitabox:r(30)(d,n),Record:r(29)};Object.keys(u).forEach(e=>{u[e].associate&&u[e].associate(u)}),u.sequelize=d,u.mongoose=s.connection,e.exports=u},function(e,t,r){e.exports.v1_0_0={boardmodel:r(19),board:r(18),patient:r(17),record:r(16),sensor:r(15),user:r(14),utils:r(2),vitabox:r(13)}},function(e,t,r){(function(e){var s=r(28),n=r(27),a=r(26),o=r(0);t.encrypt=function(e){return new Promise((t,r)=>{e.forEach((t,r)=>{let n=s.createCipher(process.env.ALGORITHM,process.env.KEY);return e[r]=n.update(Buffer.from(t),"utf8","hex")+n.final("hex")}),t(e)})},t.decrypt=function(e){let t=s.createDecipher(process.env.ALGORITHM,process.env.KEY);return t.update(e,"hex","utf8")+t.final("utf8")},t.createToken=function(t,r){return new Promise((s,o)=>{let i=n.readFileSync(e+"/../../keys/key.pem").toString();void 0===i&&o(new Error("error on load private key"));let d={id:t.id,role:t.constructor.name},u={expiresIn:"8h",algorithm:"RS256",subject:r};a.sign(d,i,u,function(e,t){e&&o(e),s(t)})})},t.validateToken=function(t,r){return new Promise((s,i)=>{let d=n.readFileSync(e+"/../../keys/cert.pem").toString();void 0===d&&i("error on load public key");let u={algorithms:["RS256"],subject:r};a.verify(t,d,u,function(e,t){e&&i(e),o[t.role].findById(t.id).then(e=>s(e),e=>i(e.message))})})},t.generatePassword=(()=>{let e,t="";for(e=0;e<10;e++)t+="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"[Math.floor(61*Math.random())];return t}),t.deleteAll=function(){return new Promise((e,t)=>{var r={raw:!0};o.sequelize.query("SET FOREIGN_KEY_CHECKS = 0",r).then(()=>{o.UserVitabox.truncate().then(()=>{o.User.truncate().then(()=>{o.Vitabox.truncate().then(()=>{o.Boardmodel.truncate().then(()=>{o.Board.truncate().then(()=>{o.Patient.truncate().then(()=>{o.Record.remove({},()=>{o.sequelize.query("SET FOREIGN_KEY_CHECKS = 1",r).then(()=>e(),e=>t(e))})},e=>t(e))},e=>t(e))},e=>t(e))},e=>t(e))},e=>t(e))},e=>t(e))},e=>t(e))})},t.testSeed=function(){return new Promise((e,t)=>{r(3).testSeed(o).then(()=>e(),e=>t(e))})}}).call(this,"app/business/v1.0.0")},function(e,t,r){var s=r(2);e.exports.seed=(e=>new Promise((t,r)=>{e.User.count({where:{admin:!0}}).then(n=>{n<1?s.encrypt(["admin@a.aa","user1@a.aa","user2@a.aa","123qweASD","passvita"]).then(s=>{e.User.bulkCreate([{email:s[0],admin:!0,password:s[3]},{email:s[1],password:s[3]},{email:s[2],password:s[3]}]).then(n=>e.Vitabox.create({latitude:"39.6003075",longitude:"-8.3906627",address:"Av. Dr. AurÃ©lio Ribeiro 3, Tomar, Portugal",registered:!0,active:!0,password:s[4]}).then(s=>s.addUsers([n[1].id,n[2].id]).then(()=>e.Boardmodel.bulkCreate([{name:"Zolertia RE-Mote",type:"environmental"},{name:"Xiaomi MI Band",type:"wearable"},{name:"MySignals",type:"non-wearable"}]).then(n=>e.Board.bulkCreate([{vitabox_id:s.id,boardmodel_id:n[0].id,location:"kitchen"},{vitabox_id:s.id,boardmodel_id:n[1].id},{vitabox_id:s.id,boardmodel_id:n[2].id,location:"bedroom"}]).then(()=>e.Sensor.bulkCreate([{transducer:"dht22",measure:"temperature",min_acceptable:"10",max_acceptable:"25",min_possible:"-20",max_possible:"50"},{transducer:"dht22",measure:"humidity",min_acceptable:"30",max_acceptable:"50",min_possible:"20",max_possible:"60"},{transducer:"mq-7",measure:"carbon_monoxide",min_acceptable:"2",max_acceptable:"10",min_possible:"10",max_possible:"500"}]).then(e=>n[0].addSensors([e[0].id,e[1].id]).then(()=>t(),e=>r(e)),e=>r(e)),e=>r(e)),e=>r(e)),e=>r(e)),e=>r(e)),e=>r(e))},e=>r(e)):t()},e=>r(e))})),e.exports.testSeed=(e=>new Promise((t,r)=>{s.encrypt(["admin@a.aa","123qweASD"]).then(s=>{e.User.create({email:s[0],admin:!0,password:s[1]}).then(()=>t(),e=>r(e))},e=>r(e))}))},function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("express-routes-versioning")},function(e,t,r){var s=r(1).v1_0_0;t.create=function(e,t){"User"===e.client.constructor.name&&e.client.admin?s.vitabox.create().then(e=>t.status(200).json(e),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.register=function(e,t){"User"===e.client.constructor.name&&e.client.admin?s.user.findByEmail(e.body.email).then(r=>{s.vitabox.register(e.params.id,e.body).then(n=>{s.vitabox.addUser(e.client,n.id,r.id,!0).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message}))},e=>t.status(500).json({error:e.message}))},e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.connect=function(e,t){s.vitabox.connect(e.params.id,e.body.password).then(r=>{s.utils.createToken(r,e.connection.remoteAddress).then(e=>t.status(200).json({token:e}),e=>t.status(500).json({error:e.message}))},e=>t.status(500).json({error:e.message}))},t.list=function(e,t){"User"===e.client.constructor.name?s.vitabox.list(e.client).then(e=>t.status(200).json({vitaboxes:e}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.find=function(e,t){"User"===e.client.constructor.name?s.vitabox.find(e.client,e.params.id).then(e=>t.status(200).json({vitabox:e}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.settings=function(e,t){"Vitabox"===e.client.constructor.name&&e.client.id===e.params.id?t.status(200).json({settings:e.client.settings}):t.status(500).json({error:"Unauthorized"})},t.update=function(e,t){"User"===e.client.constructor.name?s.vitabox.update(e.client,e.params.id,e.body).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.delete=function(e,t){"User"===e.client.constructor.name?s.vitabox.delete(e.client,e.params.id).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.addUser=function(e,t){if("User"===e.client.constructor.name){let r=!!e.body.sponsor;s.user.findByEmail(e.body.email).then(n=>s.vitabox.addUser(e.client,e.params.id,n.id,r).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})),e=>t.status(500).json({error:e.message}))}else t.status(500).json({error:"Unauthorized"})},t.getUsers=function(e,t){s.vitabox.getUsers("User"===e.client.constructor.name,e.client,e.params.id).then(e=>t.status(200).json({users:e}),e=>t.status(500).json({error:e.message}))},t.removeUser=function(e,t){"User"===e.client.constructor.name?s.vitabox.removeUser(e.client,e.params.id,e.body.user_id).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.addPatient=function(e,t){"User"===e.client.constructor.name?s.patient.create(e.body).then(r=>s.vitabox.addPatient(e.client,e.params.id,r.id).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.getPatients=function(e,t){s.vitabox.getPatients("User"===e.client.constructor.name,e.client,e.params.id).then(e=>t.status(200).json({patients:e}),e=>t.status(500).json({error:e.message}))},t.removePatient=function(e,t){"User"===e.client.constructor.name?s.vitabox.removePatient(e.client,e.params.id,e.body.patient_id).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.addBoard=function(e,t){"User"===e.client.constructor.name?s.board.create(e.body).then(r=>s.vitabox.addBoard(e.client,e.params.id,r.id).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.getBoards=function(e,t){s.vitabox.getBoards("User"===e.client.constructor.name,e.client,e.params.id).then(e=>t.status(200).json({boards:e}),e=>t.status(500).json({error:e.message}))},t.removeBoard=function(e,t){"User"===e.client.constructor.name?s.vitabox.removeBoard(e.client,e.params.id,e.body.board_id).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}},function(e,t,r){var s=r(1).v1_0_0;t.register=function(e,t){s.user.register(e.body.email,e.body.password).then(r=>{s.utils.createToken(r,e.connection.remoteAddress).then(e=>t.status(200).json({token:e,user:r.id}),e=>t.status(500).json({error:e.message}))},e=>t.status(500).json({error:e.message}))},t.login=function(e,t){s.user.login(e.body.email,e.body.password).then(r=>{s.utils.createToken(r,e.connection.remoteAddress).then(e=>t.status(200).json({token:e,user:r.id}),e=>t.status(500).json({error:e.message}))},e=>t.status(500).json({error:e.message}))},t.changePassword=function(e,t){"User"===e.client.constructor.name?s.user.changePassword(e.client.id,e.body.old_password,e.body.new_password).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}},function(e,t,r){var s=r(1).v1_0_0;t.create=((e,t)=>{"User"===e.client.constructor.name&&e.client.admin?s.sensor.create(e.body).then(e=>t.status(200).json({id:e.id}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}),t.list=((e,t)=>{"User"===e.client.constructor.name&&e.client.admin?s.sensor.list().then(e=>t.status(200).json({sensors:e}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}),t.update=((e,t)=>{"User"===e.client.constructor.name&&e.client.admin?s.sensor.update(e.params.id,e.body).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}),t.delete=((e,t)=>{"User"===e.client.constructor.name&&e.client.admin?s.sensor.remove(e.params.id).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})})},function(e,t,r){var s=r(1).v1_0_0;t.create=function(e,t){"Vitabox"===e.client.constructor.name?s.record.create(e.body.records).then(e=>{e?t.status(200).json({result:!0,error:"some records were discarded by invalid parameters, value, datetime, sensor_id and board_id are required"}):t.status(200).json({result:!0,error:""})},e=>t.status(500).json({result:!1,error:e.message})):t.status(500).json({error:"Unauthorized"})},t.listByPatient=function(e,t){"User"===e.client.constructor.name?s.record.listByPatient(e.client,e.params.id).then(e=>t.status(200).json({records:e}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.listByBoard=function(e,t){"User"===e.client.constructor.name?s.record.listByBoard(e.client,e.params.id).then(e=>t.status(200).json({records:e}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})},t.listBySensor=function(e,t){"User"===e.client.constructor.name&&e.client.admin?s.record.listBySensor(e.client,e.params.id).then(e=>t.status(200).json({records:e}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}},function(e,t,r){var s=r(1).v1_0_0;t.destroyAll=function(e,t){s.utils.deleteAll().then(()=>t.status(200).json({success:!0}),e=>t.status(500).json({msg:e.message}))},t.testDb=function(e,t){s.utils.deleteAll().then(()=>s.utils.testSeed().then(t.status(200).json({success:!0}),e=>t.status(500).json({msg:e.message})),e=>t.status(500).json({msg:e.message}))}},function(e,t,r){r(1).v1_0_0},function(e,t,r){var s=r(0),n=r(2);t.create=function(){return new Promise((e,t)=>{let r=n.generatePassword();n.encrypt([r]).then(n=>{s.Vitabox.create({password:n[0]}).then(t=>e({id:t.id,password:r}),e=>t(e))},e=>t(e))})},t.register=function(e,t){return new Promise((r,n)=>{t.address?s.Vitabox.findOne({where:{id:e,registered:!1}}).then(e=>{e?e.update({registered:!0,address:t.address,longitude:t.longitude,latitude:t.latitude}).then(()=>r(e),e=>n(e)):n(new Error("Vitabox already registered or doesnÂ´t exist"))},e=>n(e)):n(new Error("Vitabox address must be defined"))})},t.connect=function(e,t){return new Promise((r,a)=>{n.encrypt([t]).then(t=>{s.Vitabox.findOne({where:{password:t[0],id:e,registered:!0}}).then(e=>{e?e.update({active:!0}).then(()=>r(e),e=>a(e)):a(new Error("vitabox not found, verify if was already created and registered"))},e=>a(e))},e=>a(e))})},t.list=function(e){return new Promise((t,r)=>{e.admin?s.Vitabox.findAll({attributes:{exclude:["password"]}}).then(e=>t(e),e=>r(e)):e.getVitaboxes({attributes:["id","latitude","longitude","address"],where:{active:!0}}).then(e=>{e.forEach(e=>{e.dataValues.sponsor=e.dataValues.UserVitabox.dataValues.sponsor,delete e.dataValues.UserVitabox}),t(e)},e=>r(e))})},t.find=function(e,t){return new Promise((r,n)=>{e.admin?s.Vitabox.findById(t,{attributes:{exclude:["password"]}}).then(e=>{e?r(e):n(new Error("Vitabox not found"))},e=>n(e)):e.getVitaboxes({attributes:["id","latitude","longitude","address"],where:{id:t,active:!0}}).then(e=>{e.length>0?(e[0].dataValues.sponsor=e[0].dataValues.UserVitabox.dataValues.sponsor,delete e[0].dataValues.UserVitabox,r(e[0])):n(new Error("Vitabox not found"))},e=>n(e))})},t.update=function(e,t,r){return new Promise((n,a)=>{s.Vitabox.findById(t).then(t=>{t?e.admin?t.update({latitude:r.latitude,longitude:r.longitude,address:r.address,settings:r.settings}).then(()=>n(),e=>a(e)):_isSponsor(t,e).then(()=>{t.update({latitude:r.latitude,longitude:r.longitude,address:r.address}).then(()=>n(),e=>a(e))},e=>a(e)):a(new Error("Vitabox not found"))},e=>a(e))})},t.delete=function(e,t){return new Promise((r,n)=>{s.Vitabox.findById(t).then(t=>{t?e.admin?t.destroy().then(()=>r(),e=>n(e.message)):_isSponsor(t,e).then(()=>{t.destroy().then(()=>r(),e=>n(e.message))},e=>n(e)):n(new Error("Vitabox not found"))},e=>n(e))})},t.addUser=function(e,t,r,n){return new Promise((a,o)=>{s.Vitabox.findById(t).then(t=>{t?e.admin?t.addUser(r,{through:{sponsor:n}}).then(()=>a(),e=>o(e)):_isSponsor(t,e).then(()=>{t.addUser(r,{through:{sponsor:n}}).then(()=>a(),e=>o(e))},e=>o(e)):o(new Error("Vitabox not found"))},e=>o(e))})},t.getUsers=function(e,t,r){return new Promise((a,o)=>{e?s.Vitabox.findById(r).then(e=>{e?t.admin?e.getUsers({attributes:["id","email"]}).then(e=>{e.forEach(e=>{e.email=n.decrypt(e.email),e.dataValues.since=e.dataValues.UserVitabox.dataValues.created_at,e.dataValues.sponsor=e.dataValues.UserVitabox.dataValues.sponsor,delete e.dataValues.UserVitabox}),a(e)},e=>o(e)):_isUser(e,t).then(()=>{e.getUsers({attributes:["id","email"]}).then(e=>{e.forEach(e=>{e.email=n.decrypt(e.email),e.dataValues.since=e.dataValues.UserVitabox.dataValues.created_at,e.dataValues.sponsor=e.dataValues.UserVitabox.dataValues.sponsor,delete e.dataValues.UserVitabox}),a(e)},e=>o(e))},e=>o(e)):o(new Error("Vitabox not found"))},e=>o(e)):t.getUsers({attributes:["id","email"]}).then(e=>{e.forEach(e=>{e.email=n.decrypt(e.email),e.dataValues.since=e.dataValues.UserVitabox.dataValues.created_at,e.dataValues.sponsor=e.dataValues.UserVitabox.dataValues.sponsor,delete e.dataValues.UserVitabox}),a(e)},e=>o(e))})},t.removeUser=function(e,t,r){return new Promise((n,a)=>{s.Vitabox.findById(t).then(t=>{t?e.admin?t.removeUser(r).then(()=>n(),e=>a(e)):_isSponsor(t,e).then(()=>{t.removeUser(r).then(()=>n(),e=>a(e))},e=>a(e)):a(new Error("Vitabox not found"))},e=>a(e))})},t.addPatient=function(e,t,r){return new Promise((n,a)=>{s.Vitabox.findById(t).then(t=>{t?e.admin?t.addPatient(r).then(()=>n(),e=>a(e)):_isSponsor(t,e).then(()=>{t.addPatient(r).then(()=>n(),e=>a(e))},e=>a(e)):a(new Error("Vitabox not found"))},e=>a(e))})},t.getPatients=function(e,t,r){return new Promise((a,o)=>{e?t.admin?s.Patient.findAll({where:{vitabox_id:r},attributes:["id","birthdate","name","gender",["created_at","since"]]}).then(e=>{e.forEach(e=>e.name=n.decrypt(e.name)),a(e)},e=>o(e)):s.Vitabox.findById(r).then(e=>{e?_isUser(e,t).then(()=>{s.Patient.findAll({where:{vitabox_id:r},attributes:["id","birthdate","name","gender",["created_at","since"]]}).then(e=>{e.forEach(e=>e.name=n.decrypt(e.name)),a(e)},e=>o(e))},e=>o(e)):o(new Error("Vitabox not found"))},e=>o(e)):t.getPatients({attributes:["id","birthdate","name","gender",["created_at","since"]]}).then(e=>{e.forEach(e=>{e.name=n.decrypt(e.name),delete e.dataValues.VitaboxId}),a(e)},e=>o(e))})},t.removePatient=function(e,t,r){return new Promise((n,a)=>{s.Vitabox.findById(t).then(t=>{t?e.admin?t.removePatient(r).then(()=>n(),e=>a(e)):_isSponsor(t,e).then(()=>{t.removePatient(r).then(()=>n(),e=>a(e))},e=>a(e)):a(new Error("Vitabox not found"))},e=>a(e))})},t.addBoard=function(e,t,r){return new Promise((n,a)=>{s.Vitabox.findById(t).then(t=>{t?e.admin?t.addBoard(r).then(()=>n(),e=>a(e)):_isSponsor(t,e).then(()=>{t.addBoard(r).then(()=>n(),e=>a(e))},e=>a(e)):a(new Error("Vitabox not found"))},e=>a(e))})},t.getBoards=function(e,t,r){return new Promise((n,a)=>{e?t.admin?s.Board.findAll({where:{vitabox_id:r},attributes:["id","location","mac_address","created_at"],include:[{model:s.Boardmodel,attributes:["id","type","name"],include:[{model:s.Sensor,attributes:{exclude:["created_at","updated_at"]}}]}]}).then(e=>{e.forEach(e=>e.Boardmodel.Sensors.forEach(e=>delete e.dataValues.BoardSensor)),n(e)},e=>a(e)):s.Vitabox.findById(r).then(e=>{e?_isUser(e,t).then(()=>{s.Board.findAll({where:{vitabox_id:r},attributes:["id","location","mac_address","created_at"],include:[{model:s.Boardmodel,attributes:["id","type","name"],include:[{model:s.Sensor,attributes:{exclude:["created_at","updated_at"]}}]}]}).then(e=>{e.forEach(e=>e.Boardmodel.Sensors.forEach(e=>delete e.dataValues.BoardSensor)),n(e)},e=>a(e))},e=>a(e)):a(new Error("Vitabox not found"))},e=>a(e)):t.getBoards({attributes:["id","location","mac_address","created_at"],include:[{model:s.Boardmodel,attributes:["id","type","name"],include:[{model:s.Sensor,attributes:{exclude:["created_at","updated_at"]}}]}]}).then(e=>{e.forEach(e=>e.Boardmodel.Sensors.forEach(e=>delete e.dataValues.BoardSensor)),n(e)},e=>a(e))})},t.removeBoard=function(e,t,r){return new Promise((n,a)=>{s.Vitabox.findById(t).then(t=>{t?e.admin?t.removeBoard(r).then(()=>n(),e=>a(e)):_isSponsor(t,e).then(()=>{t.removeBoard(r).then(()=>n(),e=>a(e))},e=>a(e)):a(new Error("Vitabox not found"))},e=>a(e))})},_isSponsor=((e,t)=>new Promise((r,s)=>{e.getUsers({where:{id:t.id}}).then(e=>{e.length>0&&e[0].UserVitabox.sponsor?r():s(new Error("Unauthorized"))},e=>s(e))})),_isUser=((e,t)=>new Promise((r,s)=>{e.hasUser(t).then(e=>{e?r():s(new Error("Unauthorized"))},e=>s(e))}))},function(e,t,r){var s=r(0),n=r(2);t.register=function(e,t){return new Promise((r,a)=>{/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)[A-Za-z\d$@$!%*#?&-.]{8,}$/.test(t)?/^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/.test(e)?n.encrypt([e,t]).then(e=>{s.User.create({email:e[0],password:e[1]}).then(e=>r(e),e=>a(e))},e=>a(e)):a(new Error("invalid email")):a(new Error("invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters"))})},t.login=function(e,t){return new Promise((r,a)=>{n.encrypt([e,t]).then(e=>{s.User.findOne({where:{email:e[0],password:e[1]}}).then(e=>{e?r(e):a(new Error("email and password don't match"))},e=>a(e))},e=>a(e))})},t.changePassword=function(e,t,r){return new Promise((a,o)=>{/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)[A-Za-z\d$@$!%*#?&-.]{8,}$/.test(r)?n.encrypt([t,r]).then(t=>{s.User.findOne({where:{id:e,password:t[0]}}).then(e=>{e?e.update({password:t[1]}).then(()=>a(),e=>o(e)):o(new Error("old password don't match"))},e=>o(e))},e=>o(e)):o(new Error("invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters"))})},t.findByEmail=function(e,t){return new Promise((t,r)=>{n.encrypt([e]).then(e=>{s.User.findOne({where:{email:e[0]}}).then(e=>{e?t(e):r(new Error("user not registered"))},e=>r(e))},e=>r(e))})}},function(e,t,r){var s=r(0);t.create=(e=>new Promise((t,r)=>{s.Sensor.create({transducer:e.transducer,measure:e.measure,min_acceptable:e.min_acceptable,max_acceptable:e.max_acceptable,min_possible:e.min_possible,max_possible:e.max_possible}).then(e=>t(e),e=>r(e))})),t.list=(e=>new Promise((e,t)=>{s.Sensor.findAll({attributes:{exclude:["created_at","updated_at"]}}).then(t=>e(t),e=>t(e))})),t.update=((e,t)=>new Promise((r,n)=>{s.Sensor.findById(e).then(e=>{e?e.update({transducer:t.transducer,measure:t.measure,min_acceptable:t.min_acceptable,max_acceptable:t.max_acceptable,min_possible:t.min_possible,max_possible:t.max_possible}).then(()=>r(),e=>n(e)):n(new Error("sensor not found"))},e=>n(e))})),t.remove=(e=>new Promise((t,r)=>{s.Sensor.findById(e).then(e=>{e?e.destroy().then(()=>t(),e=>r(e)):r(new Error("sensor not found"))},e=>r(e))}))},function(e,t,r){var s=r(0);t.create=function(e){return new Promise((t,r)=>{var n=[],a=!1;e.forEach(e=>{e.board_id&&""!==e.board_id&&e.sensor_id&&""!==e.sensor_id&&e.value&&e.datetime?n.push({value:e.value,datetime:e.datetime,patient_id:e.patient_id&&""!==e.patient_id?e.patient_id:null,board_id:e.board_id,sensor_id:e.sensor_id}):a=!0}),s.Record.insertMany(n,(e,s)=>{e?r(e):t(a)})})},t.listByPatient=function(e,t){return new Promise((r,n)=>{e.admin?s.Record.find().where("patient_id").equals(t).select("-_id").exec((e,t)=>{e?n(e):r(t)}):s.Patient.findById(t,{include:[{model:s.Vitabox}]}).then(a=>a.Vitabox.hasUser(e).then(e=>{e?s.Record.find().where("patient_id").equals(t).select("-_id").exec((e,t)=>{e?n(e):r(t)}):n("Unauthorized")},e=>n(e)),e=>n(e))})},t.listByBoard=function(e,t){return new Promise((r,n)=>{e.admin?s.Record.find().where("board_id").equals(t).select("-_id").exec((e,t)=>{e?n(e):r(t)}):s.Board.findById(t,{include:[{model:s.Vitabox}]}).then(a=>a.Vitabox.hasUser(e).then(e=>{e?s.Record.find().where("board_id").equals(t).select("-_id").exec((e,t)=>{e?n(e):r(t)}):n("Unauthorized")},e=>n(e)),e=>n(e))})},t.listBySensor=function(e,t){return new Promise((e,r)=>{s.Record.find().where("sensor_id").equals(t).select("-_id").exec((t,s)=>{t?r(t):e(s)})})}},function(e,t,r){var s=r(0),n=r(2);t.create=(e=>new Promise((t,r)=>{/[A-Z][a-zA-Z\'][^#&<>\"~;$^%{}?!*+_\-Â»Â«@Â£Â§â¬ÂªÂº,0-9]{1,20}$/.test(e.name)?n.encrypt([e.name]).then(n=>s.Patient.create({name:n[0],birthdate:e.birthdate,gender:e.gender}).then(e=>t(e),e=>r(e)),e=>r(e)):r(new Error("invalid name"))}))},function(e,t,r){var s=r(0);t.create=(e=>new Promise((t,r)=>{s.Board.create({location:e.location,mac_address:e.mac_address,boardmodel_id:e.model}).then(e=>t(e),e=>r(e))})),t.find=(e=>new Promise((t,r)=>{s.Board.findById(e).then(e=>{e.getBoardmodel().then(e=>t(e),e=>r(e))},e=>r(e))})),t.remove=(e=>new Promise((t,r)=>{s.Board.findById(e).then(e=>e.destroy().then(()=>t(),e=>r(e)),e=>r(e))}))},function(e,t,r){var s=r(0);t.create=(e=>new Promise((t,r)=>{s.Boardmodel.create({type:e.type,name:e.name}).then(e=>t(e),e=>r(e))})),t.list=(()=>new Promise((e,t)=>{s.Boardmodel.findAll({attributes:["id","type","name"]}).then(t=>e(t),e=>t(e))})),t.update=((e,t)=>new Promise((r,n)=>{s.Boardmodel.findById(e).then(e=>{e?e.update({type:t.type,name:t.name}).then(()=>r(),e=>n(e)):n(new Error("board model not found"))},e=>n(e))})),t.remove=(e=>new Promise((t,r)=>{s.Boardmodel.findById(e).then(e=>{e?e.destroy().then(()=>t(),e=>r(e)):r(new Error("board model not found"))},e=>r(e))})),t.setSensor=((e,t)=>new Promise((r,n)=>{s.Boardmodel.findById(e).then(e=>{e?e.hasSensor(t).then(s=>{s?n(new Error("sensor is already associated")):e.addSensor(t).then(()=>r(),e=>n(e))},e=>n(e)):n(new Error("board model not found"))},e=>n(e))})),t.getSensors=(e=>new Promise((t,r)=>{s.Boardmodel.findById(e).then(e=>{e?e.getSensors({attributes:{exclude:["created_at","updated_at"]}}).then(e=>{e.forEach(e=>delete e.dataValues.BoardSensor),t(e)},e=>r(e)):r(new Error("board model not found"))},e=>r(e))})),t.removeSensor=((e,t)=>new Promise((r,n)=>{s.Boardmodel.findById(e).then(e=>{e?e.removeSensors(t).then(()=>r(),e=>n(e)):n(new Error("board model not found"))},e=>n(e))}))},function(e,t,r){var s=r(1).v1_0_0;t.create=((e,t)=>{"User"===e.client.constructor.name&&e.client.admin?s.boardmodel.create(e.body).then(e=>t.status(200).json({id:e.id}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}),t.list=((e,t)=>{"User"===e.client.constructor.name&&e.client.admin?s.boardmodel.list().then(e=>t.status(200).json({models:e}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}),t.update=((e,t)=>{"User"===e.client.constructor.name&&e.client.admin?s.boardmodel.update(e.params.id,e.body).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}),t.delete=((e,t)=>{"User"===e.client.constructor.name&&e.client.admin?s.boardmodel.remove(e.params.id).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}),t.setSensor=((e,t)=>{"User"===e.client.constructor.name&&e.client.admin?s.boardmodel.setSensor(e.params.id,e.body.sensor_id).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}),t.getSensors=((e,t)=>{"User"===e.client.constructor.name&&e.client.admin?s.boardmodel.getSensors(e.params.id).then(e=>t.status(200).json({sensors:e}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})}),t.removeSensor=((e,t)=>{"User"===e.client.constructor.name&&e.client.admin?s.boardmodel.removeSensor(e.params.id,e.body.sensor_id).then(()=>t.status(200).json({result:!0}),e=>t.status(500).json({error:e.message})):t.status(500).json({error:"Unauthorized"})})},function(e,t,r){e.exports.v1_0_0={board_model:r(20),board:r(12),manage:r(11),record:r(10),sensor:r(9),user:r(8),vitabox:r(7)}},function(e,t,r){e.exports=(e=>{var t=r(21),s=r(6)();e.post("/register",s({"1.0.0":t.v1_0_0.user.register,"2.0.0":(e,t)=>t.json({error:"invalid version"})})).post("/login",s({"1.0.0":t.v1_0_0.user.login})).post("/chpass",s({"1.0.0":t.v1_0_0.user.changePassword})).post("/vitabox",s({"1.0.0":t.v1_0_0.vitabox.create})).get("/vitabox",s({"1.0.0":t.v1_0_0.vitabox.list})).get("/vitabox/:id",s({"1.0.0":t.v1_0_0.vitabox.find})).get("/vitabox/:id/settings",s({"1.0.0":t.v1_0_0.vitabox.settings})).put("/vitabox/:id",s({"1.0.0":t.v1_0_0.vitabox.update})).delete("/vitabox/:id",s({"1.0.0":t.v1_0_0.vitabox.delete})).post("/vitabox/:id/register",s({"1.0.0":t.v1_0_0.vitabox.register})).post("/vitabox/:id/connect",s({"1.0.0":t.v1_0_0.vitabox.connect})).get("/vitabox/:id/user",s({"1.0.0":t.v1_0_0.vitabox.getUsers})).post("/vitabox/:id/user",s({"1.0.0":t.v1_0_0.vitabox.addUser})).delete("/vitabox/:id/user",s({"1.0.0":t.v1_0_0.vitabox.removeUser})).post("/vitabox/:id/patient",s({"1.0.0":t.v1_0_0.vitabox.addPatient})).get("/vitabox/:id/patient",s({"1.0.0":t.v1_0_0.vitabox.getPatients})).delete("/vitabox/:id/patient",s({"1.0.0":t.v1_0_0.vitabox.removePatient})).post("/vitabox/:id/board",s({"1.0.0":t.v1_0_0.vitabox.addBoard})).get("/vitabox/:id/board",s({"1.0.0":t.v1_0_0.vitabox.getBoards})).delete("/vitabox/:id/board",s({"1.0.0":t.v1_0_0.vitabox.removeBoard})).post("/boardmodel",s({"1.0.0":t.v1_0_0.board_model.create})).get("/boardmodel",s({"1.0.0":t.v1_0_0.board_model.list})).put("/boardmodel/:id",s({"1.0.0":t.v1_0_0.board_model.update})).delete("/boardmodel/:id",s({"1.0.0":t.v1_0_0.board_model.delete})).post("/boardmodel/:id/sensor",s({"1.0.0":t.v1_0_0.board_model.setSensor})).get("/boardmodel/:id/sensor",s({"1.0.0":t.v1_0_0.board_model.getSensors})).delete("/boardmodel/:id/sensor",s({"1.0.0":t.v1_0_0.board_model.removeSensor})).post("/sensor",s({"1.0.0":t.v1_0_0.sensor.create})).get("/sensor",s({"1.0.0":t.v1_0_0.sensor.list})).put("/sensor/:id",s({"1.0.0":t.v1_0_0.sensor.update})).delete("/sensor/:id",s({"1.0.0":t.v1_0_0.sensor.delete})).post("/record",s({"1.0.0":t.v1_0_0.record.create})).get("/record/patient/:id",s({"1.0.0":t.v1_0_0.record.listByPatient})).get("/record/board/:id",s({"1.0.0":t.v1_0_0.record.listByBoard})).get("/record/sensor/:id",s({"1.0.0":t.v1_0_0.record.listBySensor})).get("/destroy",s({"1.0.0":t.v1_0_0.manage.destroyAll})).get("/testdb",s({"1.0.0":t.v1_0_0.manage.testDb})),e.all("*",(e,t)=>{t.status(404).json({message:"Route could not be found"})})})},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("os")},function(e,t){e.exports=require("jsonwebtoken")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("crypto")},function(e,t,r){var s=r(4),n=new s.Schema({value:{type:Number,required:!0},datetime:{type:Date,default:Date.now()},patient_id:{type:String,required:!1},board_id:{type:String,required:!0},sensor_id:{type:String,required:!0}},{versionKey:!1});e.exports=s.model("Record",n)},function(e,t,r){"use strict";e.exports=((e,t)=>{var r=e.define("Vitabox",{id:{type:t.UUID,defaultValue:t.UUIDV4,primaryKey:!0},password:{type:t.STRING,allowNull:!1},latitude:{type:t.DECIMAL(10,7),allowNull:!0,defaultValue:null,validate:{min:{args:-90,msg:"latitude minimum acceptable value is -90"},max:{args:90,msg:"latitude maximum acceptable value is 90"}}},longitude:{type:t.DECIMAL(10,7),allowNull:!0,defaultValue:null,validate:{min:{args:-180,msg:"longitude minimum acceptable value is -180"},max:{args:180,msg:"longitude maximum acceptable value is 180"}}},settings:{type:t.JSON,allowNull:!0,defaultValue:null},address:{type:t.STRING,defaultValue:null,validate:{notEmpty:{args:!0,msg:"address must be defined"}}},registered:{type:t.BOOLEAN,defaultValue:!1},active:{type:t.BOOLEAN,defaultValue:!1}},{underscored:!0});return r.associate=function(e){e.Vitabox.belongsToMany(e.User,{through:e.UserVitabox}),e.Vitabox.hasMany(e.Patient),e.Vitabox.hasMany(e.Board)},r})},function(e,t,r){"use strict";e.exports=((e,t)=>{var r=e.define("User",{id:{type:t.UUID,defaultValue:t.UUIDV4,primaryKey:!0},email:{type:t.STRING,allowNull:!1,unique:{args:!0,msg:"email already registered"}},password:{type:t.STRING,allowNull:!1},admin:{type:t.BOOLEAN,defaultValue:!1}},{scopes:{profile:{attributes:{exclude:["password"]}}},underscored:!0});return r.associate=function(e){e.User.belongsToMany(e.Vitabox,{through:e.UserVitabox})},r})},function(e,t,r){"use strict";e.exports=((e,t)=>{return e.define("UserVitabox",{sponsor:{type:t.BOOLEAN,defaultValue:!1}},{underscored:!0})})},function(e,t,r){"use strict";e.exports=((e,t)=>{var r=e.define("Sensor",{id:{type:t.UUID,defaultValue:t.UUIDV4,primaryKey:!0},transducer:{type:t.STRING,allowNull:!1,defaultValue:"",validate:{notEmpty:{msg:"transducer name must be defined"}}},measure:{type:t.STRING,allowNull:!1,defaultValue:"",validate:{notEmpty:{msg:"transducer measure must be defined"}}},min_acceptable:{type:t.DECIMAL(10,5),allowNull:!1,validate:{isDecimal:{args:!0,msg:"minimum acceptable value must be defined"}}},max_acceptable:{type:t.DECIMAL(10,5),allowNull:!1,validate:{isDecimal:{args:!0,msg:"maximum acceptable value must be defined"}}},min_possible:{type:t.DECIMAL(10,5),allowNull:!1,validate:{isDecimal:{args:!0,msg:"minimum possible value must be defined"}}},max_possible:{type:t.DECIMAL(10,5),validate:{isDecimal:{args:!0,msg:"maximum possible value must be defined"}}}},{underscored:!0});return r.associate=function(e){e.Sensor.belongsToMany(e.Boardmodel,{through:"BoardSensor"})},r})},function(e,t,r){"use strict";e.exports=((e,t)=>{var r=e.define("Patient",{id:{type:t.UUID,defaultValue:t.UUIDV4,primaryKey:!0},birthdate:{type:t.DATEONLY,allowNull:!1},name:{type:t.STRING,allowNull:!1,defaultValue:"",validate:{notEmpty:{msg:"patient name must be defined"}}},gender:{type:t.ENUM,values:["undefined","male","female"],defaultValue:"undefined",validate:{isIn:{args:["male","female","undefined"],msg:"gender must be 'male', 'female' or 'undefined'"}}}},{underscored:!0});return r.associate=function(e){e.Patient.belongsTo(e.Vitabox)},r})},function(e,t,r){"use strict";e.exports=((e,t)=>{var r=e.define("Board",{id:{type:t.UUID,defaultValue:t.UUIDV4,primaryKey:!0},location:{type:t.STRING,allowNull:!0,defaultValue:null},mac_address:{type:t.STRING,allowNull:!1,defaultValue:"",validate:{notEmpty:{msg:"MAC address must be defined"}}}},{underscored:!0});return r.associate=function(e){e.Board.belongsTo(e.Vitabox),e.Board.belongsTo(e.Boardmodel)},r})},function(e,t,r){"use strict";e.exports=((e,t)=>{var r=e.define("Boardmodel",{id:{type:t.UUID,defaultValue:t.UUIDV4,primaryKey:!0},type:{type:t.ENUM,values:["environmental","wearable","non-wearable"],validate:{isIn:{args:[["environmental","wearable","non-wearable"]],msg:"board type must be environmental, wearable or non-wearable"}}},name:{type:t.STRING,unique:{args:!0,msg:"board model already registered"},allowNull:!1,defaultValue:"",validate:{notEmpty:{msg:"board model must be defined"}}}},{underscored:!0});return r.associate=function(e){e.Boardmodel.hasMany(e.Board),e.Boardmodel.belongsToMany(e.Sensor,{through:"BoardSensor"})},r})},function(e,t){e.exports=require("sequelize")},function(e,t){e.exports=require("dotenv")},function(e,t){e.exports=require("cluster")},function(e,t,r){(function(e){var t=r(39);if(r(38).config(),t.isMaster){var s=r(0);s.sequelize.sync().then(()=>{r(3).seed(s).then(()=>{console.log("[32m%s[0m.","(PLAIN) Connection established with MongoDB and MySQL");var e=r(25).cpus().length;console.log("Master cluster setting up "+e+" workers...");for(var s=0;s<e;s++)t.fork();t.on("exit",function(e,r,s){console.log("Worker "+e.process.pid+" died with code: "+r+", and signal: "+s+"-> Starting a new worker"),t.fork()})},e=>{console.log("Unable to seed Databases."),console.log(e.message),process.exit(1)})},e=>{console.log("Unable to connect to Databases."),console.log(e),process.exit(1)})}else{var n=r(24),a=r(23),o=r(22),i=r(5),d=r(1).v1_0_0.utils,u=n();u.use(i.urlencoded({extended:!0})),u.use(i.json()),u.use((e,t,r)=>{t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept, Authorization"),t.header("Access-Control-Allow-Methods","POST, GET, PUT, DELETE, OPTIONS"),t.header("Access-Control-Allow-Credentials",!0),e.headers&&e.headers.authorization?d.validateToken(e.headers.authorization,e.connection.remoteAddress).then(s=>{s?(e.client=s,r()):t.status(500).json({msg:"Client not registered"})},e=>t.status(500).json({msg:e.message})):(e.user=void 0,r())}),u.use("/",n.static(a.resolve(e,"public"))),u.use("/docs",n.static(a.resolve(e,"docs"))),o(u);var l=process.env.PORT||8080;u.listen(l,()=>{console.log("[32m%s %d[0m.","(PLAIN) Server http listening on port",l)})}}).call(this,"")}]);
//# sourceMappingURL=bundle.js.map