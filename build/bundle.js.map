{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/models/index.js","webpack:///./app/business/index.js","webpack:///./app/business/v1.0.0/utils.js","webpack:///external \"mongoose\"","webpack:///external \"body-parser\"","webpack:///external \"express-routes-versioning\"","webpack:///./app/controllers/v1.0.0/vitabox.js","webpack:///./app/controllers/v1.0.0/user.js","webpack:///./app/controllers/v1.0.0/sensor.js","webpack:///./app/controllers/v1.0.0/record.js","webpack:///./app/controllers/v1.0.0/manage.js","webpack:///./app/controllers/v1.0.0/board.js","webpack:///./app/business/v1.0.0/vitabox.js","webpack:///./app/business/v1.0.0/user.js","webpack:///./app/business/v1.0.0/sensor.js","webpack:///./app/business/v1.0.0/record.js","webpack:///./app/business/v1.0.0/patient.js","webpack:///./app/business/v1.0.0/board.js","webpack:///./app/business/v1.0.0/board_model.js","webpack:///./app/controllers/v1.0.0/board_model.js","webpack:///./app/controllers/index.js","webpack:///./app/router.js","webpack:///external \"express\"","webpack:///external \"os\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"fs\"","webpack:///external \"crypto\"","webpack:///./app/models/seed.js","webpack:///./app/models/mongodb/record.js","webpack:///./app/models/mysql/vitabox.js","webpack:///./app/models/mysql/user.js","webpack:///./app/models/mysql/user_vitabox.js","webpack:///./app/models/mysql/sensor.js","webpack:///./app/models/mysql/patient.js","webpack:///./app/models/mysql/board.js","webpack:///./app/models/mysql/board_model.js","webpack:///external \"sequelize\"","webpack:///external \"dotenv\"","webpack:///external \"cluster\"","webpack:///./server.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","mongoose","Sequelize","operatorsAliases","$eq","Op","eq","$ne","ne","$gte","gte","$gt","gt","$lte","lte","$lt","lt","$not","not","$in","in","$notIn","notIn","$is","is","$like","like","$notLike","notLike","$iLike","iLike","$notILike","notILike","$regexp","regexp","$notRegexp","notRegexp","$iRegexp","iRegexp","$notIRegexp","notIRegexp","$between","between","$notBetween","notBetween","$overlap","overlap","$contains","contains","$contained","contained","$adjacent","adjacent","$strictLeft","strictLeft","$strictRight","strictRight","$noExtendRight","noExtendRight","$noExtendLeft","noExtendLeft","$and","and","$or","or","$any","any","$all","all","$values","values","$col","col","connect","sequelize","logging","db","Boardmodel","Board","Patient","Sensor","UserVitabox","User","Vitabox","record","keys","forEach","modelName","associate","connection","v1_0_0","boardmodel","board","patient","sensor","user","utils","vitabox","__dirname","crypto","fs","jwt","encrypt","to_encrypt","Promise","resolve","reject","element","index","cipher","createCipher","process","env","ALGORITHM","KEY","update","Buffer","from","final","decrypt","to_decrypt","decipher","createDecipher","createToken","obj","client_address","private_key","readFileSync","toString","undefined","Error","payload","id","role","constructor","options","expiresIn","algorithm","subject","sign","err","token","validateToken","public_key","algorithms","verify","findById","then","error","message","generatePassword","sk","Math","floor","random","deleteAll","raw","query","truncate","Record","remove","require","business","create","req","res","client","admin","data","status","json","register","findByEmail","body","email","params","addUser","result","password","remoteAddress","list","vitaboxes","find","delete","user_id","getUsers","users","removeUser","addPatient","getPatients","patients","removePatient","patient_id","addBoard","getBoards","boards","removeBoard","board_id","login","changePassword","old_password","new_password","sensors","records","destroyAll","success","msg","encrypted","vitabox_id","attributes","findOne","where","registered","address","longitude","latitude","active","current_user","findAll","exclude","getVitaboxes","dataValues","sponsor","length","settings","_isSponsor","destroy","is_sponsor","through","is_user","since","created_at","_isUser","createdAt","VitaboxId","include","model","Sensors","BoardSensor","hasUser","test","new_user","transducer","measure","min_acceptable","max_acceptable","min_possible","max_possible","sensor_id","datetime","save","doc","encrypted_name","birthdate","gender","location","boardmodel_id","getBoardmodel","type","models","board_model_id","setSensors","addSensors","getSensors","removeSensor","removeSensors","board_model","manage","app","controllers","versioning","1.0.0","2.0.0","post","put","seed","count","bulkCreate","addUsers","board_models","schema","Schema","Number","required","Date","default","now","String","DataTypes","define","UUID","defaultValue","UUIDV4","primaryKey","STRING","allowNull","DECIMAL","validate","min","args","max","JSON","BOOLEAN","underscored","belongsToMany","hasMany","unique","scopes","profile","DATEONLY","ENUM","isIn","belongsTo","cluster","config","isMaster","sync","console","log","cpus","fork","on","worker","code","signal","pid","exit","express","router","bodyParser","use","urlencoded","extended","next","header","headers","authorization","static","port","PORT","listen"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssmbly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","var mongoose = require('mongoose'),\r\n    Sequelize = require('sequelize'),\r\n    mongo_uri = 'mongodb://localhost:27017/myproject',\r\n    mysql_uri = 'mysql://api:123qwe@localhost:3306/node';\r\n\r\nconst operatorsAliases = {\r\n    $eq: Sequelize.Op.eq,\r\n    $ne: Sequelize.Op.ne,\r\n    $gte: Sequelize.Op.gte,\r\n    $gt: Sequelize.Op.gt,\r\n    $lte: Sequelize.Op.lte,\r\n    $lt: Sequelize.Op.lt,\r\n    $not: Sequelize.Op.not,\r\n    $in: Sequelize.Op.in,\r\n    $notIn: Sequelize.Op.notIn,\r\n    $is: Sequelize.Op.is,\r\n    $like: Sequelize.Op.like,\r\n    $notLike: Sequelize.Op.notLike,\r\n    $iLike: Sequelize.Op.iLike,\r\n    $notILike: Sequelize.Op.notILike,\r\n    $regexp: Sequelize.Op.regexp,\r\n    $notRegexp: Sequelize.Op.notRegexp,\r\n    $iRegexp: Sequelize.Op.iRegexp,\r\n    $notIRegexp: Sequelize.Op.notIRegexp,\r\n    $between: Sequelize.Op.between,\r\n    $notBetween: Sequelize.Op.notBetween,\r\n    $overlap: Sequelize.Op.overlap,\r\n    $contains: Sequelize.Op.contains,\r\n    $contained: Sequelize.Op.contained,\r\n    $adjacent: Sequelize.Op.adjacent,\r\n    $strictLeft: Sequelize.Op.strictLeft,\r\n    $strictRight: Sequelize.Op.strictRight,\r\n    $noExtendRight: Sequelize.Op.noExtendRight,\r\n    $noExtendLeft: Sequelize.Op.noExtendLeft,\r\n    $and: Sequelize.Op.and,\r\n    $or: Sequelize.Op.or,\r\n    $any: Sequelize.Op.any,\r\n    $all: Sequelize.Op.all,\r\n    $values: Sequelize.Op.values,\r\n    $col: Sequelize.Op.col\r\n};\r\n\r\n// Create a new conntection to MongoDB server\r\nmongoose.connect(mongo_uri);\r\n// Create a new connection to MySQL server\r\nvar sequelize = new Sequelize(mysql_uri, { operatorsAliases: operatorsAliases, logging: false });\r\n\r\nconst db = {\r\n    'Boardmodel': require('./mysql/board_model')(sequelize, Sequelize),\r\n    'Board': require('./mysql/board')(sequelize, Sequelize),\r\n    'Patient': require('./mysql/patient')(sequelize, Sequelize),\r\n    'Sensor': require('./mysql/sensor')(sequelize, Sequelize),\r\n    'UserVitabox': require('./mysql/user_vitabox')(sequelize, Sequelize),\r\n    'User': require('./mysql/user')(sequelize, Sequelize),\r\n    'Vitabox': require('./mysql/vitabox')(sequelize, Sequelize),\r\n\r\n    'record': require('./mongodb/record')\r\n}\r\n\r\nObject.keys(db).forEach(modelName => {\r\n    if (db[modelName].associate) db[modelName].associate(db);\r\n});\r\n\r\ndb.sequelize = sequelize;\r\ndb.mongoose = mongoose.connection;\r\n\r\nmodule.exports = db;","module.exports.v1_0_0 = {\r\n    'boardmodel':require('./v1.0.0/board_model'),\r\n    'board': require('./v1.0.0/board'),\r\n    'patient':require('./v1.0.0/patient'),\r\n    'record': require('./v1.0.0/record'),\r\n    'sensor':require('./v1.0.0/sensor'),\r\n    'user': require('./v1.0.0/user'),\r\n    'utils': require('./v1.0.0/utils'),\r\n    'vitabox': require('./v1.0.0/vitabox'),\r\n};","var crypto = require(\"crypto\"),\r\n    fs = require(\"fs\"),\r\n    jwt = require('jsonwebtoken'),\r\n    db = require('../../models/index');\r\n\r\nexports.encrypt = function (to_encrypt) {\r\n    return new Promise((resolve, reject) => {\r\n        to_encrypt.forEach((element, index) => {\r\n            let cipher = crypto.createCipher(process.env.ALGORITHM, process.env.KEY);\r\n            return to_encrypt[index] = cipher.update(Buffer.from(element), 'utf8', 'hex') + cipher.final('hex');\r\n        });\r\n        resolve(to_encrypt);\r\n    });\r\n}\r\n\r\nexports.decrypt = function (to_decrypt) {\r\n    let decipher = crypto.createDecipher(process.env.ALGORITHM, process.env.KEY);\r\n    return decipher.update(to_decrypt, 'hex', 'utf8') + decipher.final('utf8');\r\n}\r\n\r\nexports.createToken = function (obj, client_address) {\r\n    return new Promise((resolve, reject) => {\r\n        let private_key = fs.readFileSync(__dirname + '/../../keys/key.pem').toString();\r\n        if (private_key === undefined) reject(new Error(\"error on load private key\"));\r\n\r\n        let payload = {\r\n            id: obj.id,\r\n            role: obj.constructor.name\r\n        };\r\n        let options = {\r\n            expiresIn: \"8h\",\r\n            algorithm: \"RS256\",\r\n            subject: client_address\r\n        };\r\n\r\n        jwt.sign(payload, private_key, options, function (err, token) {\r\n            if (err) reject(err);\r\n            resolve(token);\r\n        });\r\n    });\r\n}\r\n\r\nexports.validateToken = function (token, client_address) {\r\n    return new Promise((resolve, reject) => {\r\n        let public_key = fs.readFileSync(__dirname + '/../../keys/cert.pem').toString();\r\n        if (public_key === undefined) reject(\"error on load public key\");\r\n\r\n        let options = {\r\n            algorithms: [\"RS256\"],\r\n            subject: client_address\r\n        };\r\n\r\n        jwt.verify(token, public_key, options, function (err, payload) {\r\n            if (err) reject(err);\r\n            db[payload.role].findById(payload.id).then(\r\n                obj => resolve(obj),\r\n                error => reject(error.message)\r\n            );\r\n        });\r\n    });\r\n}\r\n\r\nexports.generatePassword = () => {\r\n    let sk = \"\", i, j, base = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n    for (i = 0; i < 10; i++) {\r\n        sk += base[Math.floor(Math.random() * 61)];\r\n    }\r\n    return sk;\r\n}\r\n\r\n\r\n// JUST TO DEVELOPMENT\r\nexports.deleteAll = function () {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var options = { raw: true };\r\n\r\n        db.sequelize.query('SET FOREIGN_KEY_CHECKS = 0', options).then(() => {\r\n            db.UserVitabox.truncate().then(() => {\r\n                db.User.truncate().then(() => {\r\n                    db.Vitabox.truncate().then(() => {\r\n                        db.Boardmodel.truncate().then(() => {\r\n                            db.Board.truncate().then(() => {\r\n                                db.Patient.truncate().then(() => {\r\n                                    db.Record.remove({}, () => {\r\n                                        db.sequelize.query('SET FOREIGN_KEY_CHECKS = 1', options).then(\r\n                                            () => resolve(),\r\n                                            error => reject(error));\r\n                                    });\r\n                                }, error => reject(error));\r\n                            }, error => reject(error));\r\n                        }, error => reject(error));\r\n                    }, error => reject(error));\r\n                }, error => reject(error));\r\n            }, error => reject(error));\r\n        }, error => reject(error));\r\n    });\r\n}","module.exports = require(\"mongoose\");","module.exports = require(\"body-parser\");","module.exports = require(\"express-routes-versioning\");","var business = require('../../business/index').v1_0_0;\r\n/**\r\n * @apiDefine box\r\n * \r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiError {string} error error description\r\n */\r\n\r\n/**\r\n * @api {post} /vitabox 01) Create\r\n * @apiGroup Vitabox\r\n * @apiName create\r\n * @apiDescription create a new vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiSuccess {string} id created box id\r\n * @apiSuccess {string} serial_key created box serial key\r\n */\r\nexports.create = function (req, res) {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.vitabox.create().then(\r\n            data => res.status(201).json(data),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/register 02) Register\r\n * @apiGroup Vitabox\r\n * @apiName vitaboxRegister\r\n * @apiDescription register vitabox, the user must be authenticated as \"admin\" and will define the \"sponsor\" account to the vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id vitabox id\r\n * @apiParam {decimal} latitude min: -90, max: 90 (based on google maps coordinates)\r\n * @apiParam {decimal} longitude min: -180, max: 180 (based on google maps coordinates)\r\n * @apiParam {string} address full address with postal code\r\n * @apiParam {string} email sponsor's email\r\n * @apiParamExample {json} Request example to admin:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"email\": \"sponsor@example.com\"\r\n *     }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly registered\r\n */\r\nexports.register = function (req, res) {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.user.findByEmail(req.body.email).then(\r\n            user => {\r\n                business.vitabox.register(req.params.id, req.body).then(\r\n                    vitabox => {\r\n                        business.vitabox.addUser(req.client, vitabox.id, user.id, true).then(\r\n                            () => res.status(201).json({ result: true }),\r\n                            error => res.status(500).json({ error: error.message }));\r\n                    },\r\n                    error => res.status(500).json({ error: error.message }));\r\n            },\r\n            error => res.status(500).json({ error: error.message }));\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/connect 03) Request Token\r\n * @apiGroup Vitabox\r\n * @apiName vitaboxLogin\r\n * @apiDescription request for a token to the vitabox\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiParam {string} :id vitabox id\r\n * @apiParam {string} password password defined by sponsor on registration\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.connect = function (req, res) {\r\n    business.vitabox.connect(req.params.id, req.body.password).then(\r\n        data => {\r\n            business.utils.createToken(data, req.connection.remoteAddress).then(\r\n                token => res.status(201).json({ token: token }),\r\n                error => res.status(500).json({ error: error.message }));\r\n        },\r\n        error => res.status(500).json({ error: error.message })\r\n    );\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox 04) List\r\n * @apiGroup Vitabox\r\n * @apiName list\r\n * @apiDescription list all vitaboxes related to the user. \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission any user\r\n * @apiSuccess {array} vitaboxes list of vitaboxes\r\n * @apiSuccess {string} id id of each vitabox\r\n * @apiSuccess {decimal} latitude latitude of each vitabox, min: -90, max: 90 (based on google maps coordinates)\r\n * @apiSuccess {decimal} longitude longitude of each vitabox, min: -180, max: 180 (based on google maps coordinates)\r\n * @apiSuccess {string} address full address of each vitabox\r\n * @apiSuccess {boolean} sponsor flag indicating if the requester is sponsor of that vitabox (only if NOT admin)\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox (only if admin)\r\n * @apiSuccess {boolean} registered flag indicating if the vitabox was already registered (only if admin)\r\n * @apiSuccess {boolean} active flag indicating if the vitabox was already activated (only if admin)\r\n * @apiSuccess {datetime} created_at date of production (only if admin)\r\n * @apiSuccess {datetime} updated_at date of last update (only if admin)\r\n * @apiSuccessExample {json} Response example to common user:\r\n * {\r\n *  \"vitaboxes\": [\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"sponsor\": true\r\n *      },\r\n *      {\r\n *          \"id\": \"a6abfa76-68f0-4325-b3ab-6c540a800284\",\r\n *          \"latitude\": \"51.5058372\",\r\n *          \"longitude\": \"-0.1899126\",\r\n *          \"address\": \"Kensington Gardens, London W8 4PX, Reino Unido\",\r\n *          \"sponsor\": false\r\n *      }\r\n *  ]\r\n * }\r\n * @apiSuccessExample {json} Response example to admin:\r\n * {\r\n *  \"vitaboxes\": [\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          },\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"registered\": false,\r\n *          \"active\": false,\r\n *          \"created_at\": \"2018-02-22T11:57:53.000Z\",\r\n *          \"updated_at\": \"2018-02-22T11:57:53.000Z\"\r\n *      }\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"51.5058372\",\r\n *          \"longitude\": \"-0.1899126\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          },\r\n *          \"address\": \"Kensington Gardens, London W8 4PX, Reino Unido\",\r\n *          \"registered\": false,\r\n *          \"active\": false,\r\n *          \"created_at\": \"2018-02-22T11:57:53.000Z\",\r\n *          \"updated_at\": \"2018-02-22T11:57:53.000Z\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.list = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.list(req.client).then(\r\n            data => res.status(200).json({ vitaboxes: data }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id 05) Find\r\n * @apiGroup Vitabox\r\n * @apiName find\r\n * @apiDescription find a specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {string} id id of each vitabox\r\n * @apiSuccess {decimal} latitude latitude of each vitabox, min: -90, max: 90 (based on google maps coordinates)\r\n * @apiSuccess {decimal} longitude longitude of each vitabox, min: -180, max: 180 (based on google maps coordinates)\r\n * @apiSuccess {string} address full address of each vitabox\r\n * @apiSuccess {boolean} sponsor flag indicating if the requester is sponsor of that vitabox (only if NOT admin)\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox (only if admin)\r\n * @apiSuccess {boolean} registered flag indicating if the vitabox was already registered (only if admin)\r\n * @apiSuccess {boolean} active flag indicating if the vitabox was already activated (only if admin)\r\n * @apiSuccess {datetime} created_at date of production (only if admin)\r\n * @apiSuccess {datetime} updated_at date of last update (only if admin)\r\n * @apiSuccessExample {json} Response example to common user:\r\n * {\r\n *  \"vitabox\": {\r\n *      \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *      \"latitude\": \"38.8976763\",\r\n *      \"longitude\": \"-77.0387185\",\r\n *      \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *      \"sponsor\": false\r\n *  }\r\n * }\r\n * @apiSuccessExample {json} Response example to admin:\r\n * {\r\n *  \"vitabox\": {\r\n *      \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *      \"latitude\": \"38.8976763\",\r\n *      \"longitude\": \"-77.0387185\",\r\n *      \"settings\":{\r\n *          \"cnfg1\": \"true\",\r\n *          \"cnfg2\": \"12345\",\r\n *          \"cnfg3\": \"some other config\"\r\n *      },\r\n *      \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *      \"created_at\": \"2018-02-19T11:38:32.000Z\",\r\n *      \"updated_at\": \"2018-02-23T16:12:47.000Z\"\r\n *  }\r\n * }\r\n */\r\nexports.find = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.find(req.client, req.params.id).then(\r\n            data => res.status(200).json({ vitabox: data }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id 06) Update\r\n * @apiGroup Vitabox\r\n * @apiName update\r\n * @apiDescription update a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {decimal} latitude min: -90, max: 90 (based on google maps coordinates)\r\n * @apiParam {decimal} longitude min: -180, max: 180 (based on google maps coordinates)\r\n * @apiParam {string} address full address with postal code\r\n * @apiParam {json} settings configuration's structure (only if admin)\r\n * @apiParamExample {json} Request example to common user:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\"\r\n *     }\r\n * @apiParamExample {json} Request example to admin:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          }\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.update = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.update(req.client, req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id 07) Delete\r\n * @apiGroup Vitabox\r\n * @apiName delete\r\n * @apiDescription list all users related with the vitabox if the requester is related too.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.delete = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.delete(req.client, req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/user 08) Add User\r\n * @apiGroup Vitabox\r\n * @apiName addUser\r\n * @apiDescription add user to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} user_id user unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"user_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.addUser = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.addUser(req.client, req.params.id, req.body.user_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/user 09) Get Users\r\n * @apiGroup Vitabox\r\n * @apiName getUsers\r\n * @apiDescription get users of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} users vitabox users list\r\n * @apiSuccess {string} id id of each user\r\n * @apiSuccess {string} email email of each user\r\n * @apiSuccess {datetime} since relationship date with the vitabox\r\n * @apiSuccess {boolean} sponsor flag indicating if the user is sponsor of the vitabox\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"users\": [\r\n *      {\r\n *          \"id\": \"585402ef-68dd-44a4-a44b-04152e659d11\",\r\n *          \"email\": \"donaldtrump@usa.com\",\r\n *          \"since\": \"2018-02-19T14:41:13.000Z\",\r\n *          \"sponsor\": false\r\n *      },\r\n *      {\r\n *          \"id\": \"78007a69-baa2-4b24-b936-234883811b6a\",\r\n *          \"email\": \"queenelizabeth@majesty.uk\",\r\n *          \"since\": \"2018-02-19T14:40:14.000Z\",\r\n *          \"sponsor\": true\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getUsers = function (req, res) {\r\n    business.vitabox.getUsers(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n        data => res.status(200).json({ users: data }),\r\n        error => res.status(500).json({ error: error.message })\r\n    );\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/user 10) Remove User\r\n * @apiGroup Vitabox\r\n * @apiName removeUser\r\n * @apiDescription remove user from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} user_id user unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"user_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeUser = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.removeUser(req.client, req.params.id, req.body.user_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/patient 11) Add Patient\r\n * @apiGroup Vitabox\r\n * @apiName addPatient\r\n * @apiDescription add patient to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} name patient name\r\n * @apiParam {date} birthdate patient birthdate (date only)\r\n * @apiParam {string} gender patient gender (must be 'male', 'female' or 'undefined')\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"José António\",\r\n *          \"birthdate\": \"1987-02-28\",\r\n *          \"gender\": \"male\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.addPatient = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.patient.create(req.body).then(\r\n            patient => business.vitabox.addPatient(req.client, req.params.id, patient.id).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(500).json({ error: error.message })),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/patients 12) Get Patients\r\n * @apiGroup Vitabox\r\n * @apiName getPatients\r\n * @apiDescription get patients of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} patients vitabox patients list\r\n * @apiSuccess {string} id id of each patient\r\n * @apiSuccess {date} birthdate patient birthdate (date only)\r\n * @apiSuccess {string} name name of each patient\r\n * @apiSuccess {string} gender patient gender (must be 'male', 'female' or 'undefined')\r\n * @apiSuccess {datetime} since relationship date with the vitabox \r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"patients\": [\r\n *      {\r\n *          \"id\": \"a77ea0fe-5e34-4189-9702-95cb69b4cd1d\",\r\n *          \"birthdate\": \"1987-02-28\",\r\n *          \"name\": \"José António\",\r\n *          \"gender\": \"male\",\r\n *          \"since\": \"2018-02-19T14:55:59.000Z\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getPatients = function (req, res) {\r\n    business.vitabox.getPatients(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n        data => res.status(200).json({ patients: data }),\r\n        error => res.status(500).json({ error: error.message })\r\n    );\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/patient 13) Remove Patient\r\n * @apiGroup Vitabox\r\n * @apiName removePatient\r\n * @apiDescription remove patient from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} patient_id patient unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"patient_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removePatient = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.removePatient(req.client, req.params.id, req.body.patient_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/board 14) Add Board\r\n * @apiGroup Vitabox\r\n * @apiName addBoard\r\n * @apiDescription add board to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} location place where the board is located, if wearable is null\r\n * @apiParam {string} model model id of the board\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"location\": \"kitchen\",\r\n *          \"model\":\"5d93585b-f511-4fa8-b69e-692c2474d5e8\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.addBoard = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.board.create(req.body).then(\r\n            board => business.vitabox.addBoard(req.client, req.params.id, board.id).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(500).json({ error: error.message })),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/board 15) Get Boards\r\n * @apiGroup Vitabox\r\n * @apiName getBoards\r\n * @apiDescription get boards of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} boards vitabox boards list\r\n * @apiSuccess {string} id id of each board\r\n * @apiSuccess {string} location place where the board is located (house division)\r\n * @apiSuccess {json} BoardModel model of each board, contains an id, type and name\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"boards\": [\r\n *      {\r\n *          \"id\": \"983227e9-e1dc-410e-829d-1636627397ba\",\r\n *          \"location\": \"kitchen\",\r\n *          \"created_at\": \"2018-02-22T15:25:50.000Z\",\r\n *          \"BoardModel\": {\r\n *              \"id\": \"1920ed05-0a24-4611-b822-5da7a58ba8bb\",\r\n *              \"type\": \"environmental\",\r\n *              \"name\": \"Zolertia RE-Mote\"\r\n *          }\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getBoards = function (req, res) {\r\n    business.vitabox.getBoards(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n        data => res.status(200).json({ boards: data }),\r\n        error => res.status(500).json({ error: error.message })\r\n    );\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/patient 16) Remove Board\r\n * @apiGroup Vitabox\r\n * @apiName removeBoard\r\n * @apiDescription remove board from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} board_id board unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"board_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeBoard = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.removeBoard(req.client, req.params.id, req.body.board_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n/**\r\n * @apiDefine auth\r\n * \r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiError {string} error error description\r\n */\r\n\r\n/**\r\n * @api {post} /register 01) Register user\r\n * @apiGroup Authentication\r\n * @apiName userRegister\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.register = function (req, res) {\r\n    business.user.register(req.body.email, req.body.password).then(\r\n        user => {\r\n            business.utils.createToken(user, req.connection.remoteAddress).then(\r\n                token => res.status(201).json({ token: token, user: user.id }),\r\n                error => res.status(500).json({ error: error.message })\r\n            );\r\n        },\r\n        error => res.status(500).json({ error: error.message })\r\n    );\r\n}\r\n\r\n/**\r\n * @api {post} /login 02) Login user\r\n * @apiGroup Authentication\r\n * @apiName userLogin\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.login = function (req, res) {\r\n    business.user.login(req.body.email, req.body.password).then(\r\n        user => {\r\n            business.utils.createToken(user, req.connection.remoteAddress).then(\r\n                token => res.status(201).json({ token: token, user: user.id }),\r\n                error => res.status(500).json({ error: error.message })\r\n            );\r\n        },\r\n        error => res.status(500).json({ error: error.message }));\r\n}\r\n\r\n/**\r\n * @api {post} /chpass 03) Change password\r\n * @apiGroup Authentication\r\n * @apiName changePassword\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiParam {string} old_password old password\r\n * @apiParam {string} new_password new password\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.changePassword = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.user.changePassword(req.client.id, req.body.old_password, req.body.new_password).then(\r\n            () => res.status(201).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message }));\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /sensor 01) Create\r\n * @apiGroup Sensor\r\n * @apiName createSensor\r\n * @apiDescription create a new sensor.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} transducer transducer name\r\n * @apiParam {string} measure transducer measure\r\n * @apiParam {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiParam {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiParam {decimal} min_possible minimum possible value to sensor\r\n * @apiParam {decimal} max_possible maximum possible value to sensor\r\n * @apiParamExample {json} Request example:\r\n *      {\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n * @apiSuccess {string} id created sensor id\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.create(req.body).then(\r\n            sensor => res.status(200).json({ id: sensor.id }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /sensor 02) List\r\n * @apiGroup Sensor\r\n * @apiName listSensors\r\n * @apiDescription list all sensors. \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n *\r\n * @apiPermission admin\r\n * @apiSuccess {array} models list of sensors\r\n * @apiSuccess {string} transducer transducer name\r\n * @apiSuccess {string} measure transducer measure\r\n * @apiSuccess {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiSuccess {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiSuccess {decimal} min_possible minimum possible value to sensor\r\n * @apiSuccess {decimal} max_possible maximum possible value to sensor\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"sensors\": [\r\n *      {\r\n *          \"transducer\": \"dht22\",\r\n *          \"measure\":\"temperature\",\r\n *          \"min_acceptable\": \"10\",\r\n *          \"max_acceptable\": \"25\",\r\n *          \"min_possible\": \"-20\",\r\n *          \"max_possible\": \"50\"\r\n *      },\r\n *      {\r\n *          \"transducer\": \"mq-7\",\r\n *          \"measure\":\"carbon_monoxide\",\r\n *          \"min_acceptable\": \"2\",\r\n *          \"max_acceptable\": \"10\",\r\n *          \"min_possible\": \"10\",\r\n *          \"max_possible\": \"500\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.list = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.list().then(\r\n            sensors => res.status(200).json({ sensors: sensors }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /sensor/:id 03) Update\r\n * @apiGroup Sensor\r\n * @apiName updateSensor\r\n * @apiDescription update a sensor.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor id to update\r\n * @apiParam {string} transducer transducer name\r\n * @apiParam {string} measure transducer measure\r\n * @apiParam {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiParam {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiParam {decimal} min_possible minimum possible value to sensor\r\n * @apiParam {decimal} max_possible maximum possible value to sensor\r\n * @apiParamExample {json} Request example:\r\n *      {\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.update(req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /sensor/:id 04) Delete\r\n * @apiGroup Sensor\r\n * @apiName deleteSensor\r\n * @apiDescription remove a sensor\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor ID to delete\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.remove(req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\nexports.create = function (req, res) {\r\n    business.record.create(req.body).then(\r\n        data => res.status(201).json({ result: true }),\r\n        error => res.status(500).json({ result: false, error: error.message })\r\n    );\r\n}\r\n\r\nexports.list = function (req, res) {\r\n    business.record.list().then(\r\n        data => res.status(201).json({ records: data }),\r\n        error => res.status(500).json({ error: error.message })\r\n    );\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\nexports.destroyAll = function (req, res) {\r\n    business.utils.deleteAll().then(\r\n        () => res.status(201).json({ success: true }),\r\n        error => res.status(500).json({ msg: error.message })\r\n    );\r\n}","var business = require('../../business/index').v1_0_0;\r\n","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.create = function () {\r\n    return new Promise((resolve, reject) => {\r\n        let password = utils.generatePassword();\r\n        utils.encrypt([password]).then(\r\n            encrypted => {\r\n                db.Vitabox.create({ password: encrypted[0] }).then(\r\n                    vitabox => resolve({\r\n                        id: vitabox.id,\r\n                        password: password\r\n                    }),\r\n                    error => reject(error));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.register = function (vitabox_id, attributes) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findOne({ where: { id: vitabox_id, registered: false } }).then(vitabox => {\r\n            if (vitabox) {\r\n                vitabox.update({ registered: true, address: attributes.address, longitude: attributes.longitude, latitude: attributes.latitude }).then(\r\n                    () => resolve(vitabox),\r\n                    error => reject(error));\r\n            } else reject(new Error(\"Vitabox already registered or doesn´t exist\"));\r\n        }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.connect = function (vitabox_id, password) {\r\n    return new Promise((resolve, reject) => {\r\n        utils.encrypt([password]).then(\r\n            encrypted => {\r\n                db.Vitabox.findOne({ where: { password: encrypted[0], id: vitabox_id } }).then(\r\n                    vitabox => {\r\n                        if (vitabox) {\r\n                            vitabox.update({ active: true }).then(\r\n                                () => resolve(vitabox),\r\n                                error => reject(error));\r\n                        } else reject(new Error(\"vitabox id or password incorrect, verify if was already registered\"));\r\n                    }, error => reject(error));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.list = function (current_user) {\r\n    return new Promise((resolve, reject) => {\r\n        if (current_user.admin) {\r\n            db.Vitabox.findAll({ attributes: { exclude: ['password'] } }).then(\r\n                list => resolve(list),\r\n                error => reject(error));\r\n        } else {\r\n            current_user.getVitaboxes({ attributes: ['id', 'latitude', 'longitude', 'address'], where: { active: true } }).then(\r\n                list => {\r\n                    list.forEach(element => {\r\n                        element.dataValues.sponsor = element.dataValues.UserVitabox.dataValues.sponsor;\r\n                        delete element.dataValues.UserVitabox;\r\n                    })\r\n                    resolve(list);\r\n                }, error => reject(error));\r\n        }\r\n    });\r\n}\r\n\r\nexports.find = function (current_user, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (current_user.admin) {\r\n            db.Vitabox.findById(vitabox_id, { attributes: { exclude: ['password'] } }).then(\r\n                vitabox => {\r\n                    if (vitabox) resolve(vitabox);\r\n                    else reject(new Error(\"Vitabox not found\"));\r\n                }, error => reject(error));\r\n        }\r\n        else {\r\n            current_user.getVitaboxes({\r\n                attributes: ['id', 'latitude', 'longitude', 'address'],\r\n                where: { id: vitabox_id, active: true }\r\n            }).then(vitabox => {\r\n                if (vitabox.length > 0) {\r\n                    vitabox[0].dataValues.sponsor = vitabox[0].dataValues.UserVitabox.dataValues.sponsor;\r\n                    delete vitabox[0].dataValues.UserVitabox;\r\n                    resolve(vitabox[0]);\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error));\r\n        }\r\n    });\r\n}\r\n\r\nexports.update = function (current_user, vitabox_id, attributes) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.update({ latitude: attributes.latitude, longitude: attributes.longitude, address: attributes.address, settings: attributes.settings }).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.update({ latitude: attributes.latitude, longitude: attributes.longitude, address: attributes.address }).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.delete = function (current_user, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.destroy().then(\r\n                            () => resolve(),\r\n                            error => reject(error.message));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.destroy().then(\r\n                                () => resolve(),\r\n                                error => reject(error.message));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.addUser = function (current_user, vitabox_id, user_id, is_sponsor) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.addUser(user_id, { through: { sponsor: is_sponsor } }).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.addUser(user_id, { through: { sponsor: is_sponsor } }).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.getUsers = function (is_user, client, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (is_user) {\r\n            db.Vitabox.findById(vitabox_id).then(\r\n                vitabox => {\r\n                    if (vitabox) {\r\n                        if (client.admin)\r\n                            vitabox.getUsers({ attributes: ['id', 'email'] }).then(\r\n                                users => {\r\n                                    users.forEach(user => {\r\n                                        user.email = utils.decrypt(user.email);\r\n                                        user.dataValues.since = user.dataValues.UserVitabox.dataValues.created_at;\r\n                                        user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n                                        delete user.dataValues.UserVitabox;\r\n                                    });\r\n                                    resolve(users);\r\n                                },\r\n                                error => reject(error));\r\n                        else _isUser(vitabox, client).then(\r\n                            () => {\r\n                                vitabox.getUsers({ attributes: ['id', 'email'] }).then(\r\n                                    users => {\r\n                                        users.forEach(user => {\r\n                                            user.email = utils.decrypt(user.email);\r\n                                            user.dataValues.since = user.dataValues.UserVitabox.dataValues.created_at;\r\n                                            user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n                                            delete user.dataValues.UserVitabox;\r\n                                        });\r\n                                        resolve(users);\r\n                                    },\r\n                                    error => reject(error));\r\n                            }, error => reject(error)\r\n                        );\r\n                    } else reject(new Error(\"Vitabox not found\"));\r\n                }, error => reject(error)\r\n            );\r\n        } else {\r\n            client.getUsers({ attributes: ['id', 'email'] }).then(\r\n                users => {\r\n                    users.forEach(user => {\r\n                        user.email = utils.decrypt(user.email);\r\n                        user.dataValues.since = user.dataValues.UserVitabox.dataValues.createdAt;\r\n                        user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n                        delete user.dataValues.UserVitabox;\r\n                    });\r\n                    resolve(users);\r\n                },\r\n                error => reject(error));\r\n        }\r\n    });\r\n}\r\n\r\nexports.removeUser = function (current_user, vitabox_id, user_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.removeUser(user_id).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.removeUser(user_id).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.addPatient = function (current_user, vitabox_id, patient_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.addPatient(patient_id).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.addPatient(patient_id).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.getPatients = function (is_user, client, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (is_user) {\r\n            if (client.admin)\r\n                db.Patient.findAll({ where: { vitabox_id: vitabox_id }, attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since']] }).then(\r\n                    patients => {\r\n                        patients.forEach(patient => patient.name = utils.decrypt(patient.name));\r\n                        resolve(patients);\r\n                    },\r\n                    error => reject(error));\r\n            else _isUser(vitabox, client).then(\r\n                () => {\r\n                    db.Patient.findAll({ where: { vitabox_id: vitabox_id }, attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since']] }).then(\r\n                        patients => {\r\n                            patients.forEach(patient => patient.name = utils.decrypt(patient.name));\r\n                            resolve(patients);\r\n                        },\r\n                        error => reject(error));\r\n                }, error => reject(error));\r\n        } else {\r\n            client.getPatients({ attributes: ['id', 'birthdate', 'name', 'gender', ['createdAt', 'since']] }).then(\r\n                patients => {\r\n                    patients.forEach(patient => {\r\n                        patient.name = utils.decrypt(patient.name);\r\n                        delete patient.dataValues.VitaboxId;\r\n                    });\r\n                    resolve(patients);\r\n                },\r\n                error => reject(error));\r\n        }\r\n    });\r\n}\r\n\r\nexports.removePatient = function (current_user, vitabox_id, patient_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.removePatient(patient_id).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.removePatient(patient_id).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.addBoard = function (current_user, vitabox_id, board_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.addBoard(board_id).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.addBoard(board_id).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.getBoards = function (is_user, client, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (is_user) {\r\n            if (client.admin)\r\n                db.Board.findAll({\r\n                    where: { vitabox_id: vitabox_id },\r\n                    include: [{\r\n                        model: db.Boardmodel,\r\n                        attributes: ['id', 'type', 'name'],\r\n                        include: [{\r\n                            model: db.Sensor,\r\n                            attributes: { exclude: ['created_at', 'updated_at'] }\r\n                        }]\r\n                    }],\r\n                    attributes: ['id', 'location', 'created_at']\r\n                }).then(\r\n                    boards => {\r\n                        boards.forEach(board => board.Boardmodel.Sensors.forEach(sensor => delete sensor.dataValues.BoardSensor));\r\n                        resolve(boards);\r\n                    },\r\n                    error => reject(error));\r\n            else _isUser(vitabox, client).then(\r\n                () => {\r\n                    db.Board.findAll({\r\n                        where: { vitabox_id: vitabox_id },\r\n                        include: [{\r\n                            model: db.Boardmodel,\r\n                            attributes: ['id', 'type', 'name'],\r\n                            include: [{\r\n                                model: db.Sensor,\r\n                                attributes: { exclude: ['created_at', 'updated_at'] }\r\n                            }]\r\n                        }],\r\n                        attributes: ['id', 'location', 'created_at']\r\n                    }).then(\r\n                        boards => {\r\n                            boards.forEach(board => board.Boardmodel.Sensors.forEach(sensor => delete sensor.dataValues.BoardSensor));\r\n                            resolve(boards);\r\n                        },\r\n                        error => reject(error));\r\n                }, error => reject(error));\r\n        } else {\r\n            client.getBoards({\r\n                attributes: ['id', 'location', 'created_at'],\r\n                include: [{\r\n                    model: db.Boardmodel,\r\n                    attributes: ['id', 'type', 'name'],\r\n                    include: [{\r\n                        model: db.Sensor,\r\n                        attributes: { exclude: ['created_at', 'updated_at'] }\r\n                    }]\r\n                }],\r\n            }).then(\r\n                boards => {\r\n                    boards.forEach(board => board.Boardmodel.Sensors.forEach(sensor => delete sensor.dataValues.BoardSensor));\r\n                    resolve(boards);\r\n                },\r\n                error => reject(error));\r\n        }\r\n    });\r\n}\r\n\r\nexports.removeBoard = function (current_user, vitabox_id, board_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.removeBoard(board_id).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.removeBoard(board_id).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\n// ________________________________________________________________________\r\n// Private\r\n// ________________________________________________________________________\r\n_isSponsor = (vitabox, user) => {\r\n    return new Promise((resolve, reject) => {\r\n        vitabox.getUsers({ through: { sponsor: true }, where: { id: user.id } }).then(\r\n            users => {\r\n                if (users.length > 0) resolve();\r\n                else reject(new Error(\"Unauthorized\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\n_isUser = (vitabox, user) => {\r\n    return new Promise((resolve, reject) => {\r\n        vitabox.hasUser(user).then(\r\n            success => {\r\n                if (success) resolve();\r\n                else reject(new Error(\"Unauthorized\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.register = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        if (/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d$@$!%*#?&-.]{8,}$/.test(password)) {\r\n            if (/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/.test(email)) {\r\n\r\n                utils.encrypt([email, password]).then(\r\n                    encrypted => {\r\n                        db.User.create({ email: encrypted[0], password: encrypted[1] }).then(\r\n                            new_user => resolve(new_user),\r\n                            err => reject(err));\r\n                    },\r\n                    error => reject(error));\r\n            } else reject(new Error(\"invalid email\"));\r\n        } else reject(new Error(\"invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\"));\r\n    });\r\n}\r\n\r\nexports.login = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        utils.encrypt([email, password]).then(\r\n            encrypted => {\r\n                db.User.findOne({ where: { email: encrypted[0], password: encrypted[1] } }).then(\r\n                    user => {\r\n                        if (user) resolve(user);\r\n                        else reject(new Error(\"email and password don't match\"));\r\n                    }, error => reject(error));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.changePassword = function (user_id, old_password, new_password) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        utils.encrypt([old_password, new_password]).then(\r\n            encrypted => {\r\n                db.User.findOne({ where: { id: user_id, password: encrypted[0] } }).then(\r\n                    user => {\r\n                        if (user) user.update({ password: encrypted[1] }).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                        else reject(new Error(\"old password don't match\"));\r\n                    },\r\n                    error => reject(error));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.findByEmail = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        utils.encrypt([email]).then(\r\n            encrypted => {\r\n                db.User.findOne({ where: { email: encrypted[0] } }).then(\r\n                    user => {\r\n                        if (user) resolve(user);\r\n                        else reject(new Error(\"user not registered\"));\r\n                    }, error => reject(error));\r\n            }, error => reject(error));\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.create({ transducer: attributes.transducer, measure: attributes.measure, min_acceptable: attributes.min_acceptable, max_acceptable: attributes.max_acceptable, min_possible: attributes.min_possible, max_possible: attributes.max_possible }).then(\r\n            sensor => resolve(sensor),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.list = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.findAll({ attributes: { exclude: ['created_at', 'updated_at'] } }).then(\r\n            sensors => resolve(sensors),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.update = (sensor_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.findById(sensor_id).then(\r\n            sensor => {\r\n                if (sensor) sensor.update({ transducer: attributes.transducer, measure: attributes.measure, min_acceptable: attributes.min_acceptable, max_acceptable: attributes.max_acceptable, min_possible: attributes.min_possible, max_possible: attributes.max_possible }).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"sensor not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.remove = (sensor_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.findById(sensor_id).then(\r\n            sensor => {\r\n                if (sensor) sensor.destroy().then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"sensor not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = function (attributes) {\r\n    return new Promise((resolve, reject) => {\r\n        var record = new db.Record({\r\n            value: attributes.value,\r\n            datetime: attributes.datetime,\r\n            patient_id: attributes.patient_id,\r\n            board_id: attributes.board_id,\r\n            sensor_id: attributes.sensor_id\r\n        });\r\n        record.save((error, doc) => {\r\n            if (error) reject(error);\r\n            else resolve(doc);\r\n        });\r\n    });\r\n}\r\n\r\nexports.list = function () {\r\n    return new Promise((resolve, reject) => {\r\n        db.Record.find((error, doc) => {\r\n            if (error) reject(error);\r\n            else resolve(doc);\r\n        });\r\n    });\r\n\r\n}","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        utils.encrypt([attributes.name]).then(\r\n            encrypted_name => db.Patient.create({\r\n                name: encrypted_name[0],\r\n                birthdate: attributes.birthdate,\r\n                gender: attributes.gender\r\n            }).then(\r\n                patient => resolve(patient),\r\n                error => reject(error)\r\n            ), error => reject(error)\r\n        );\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Board.create({ location: attributes.location, boardmodel_id: attributes.model }).then(\r\n            board => resolve(board),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.find = (board_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Board.findById(board_id).then(\r\n            board => {\r\n                board.getBoardmodel().then(\r\n                    model => resolve(model),\r\n                    error => reject(error))\r\n            },\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.remove = (board_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Board.findById(board_id).then(\r\n            board => board.destroy().then(\r\n                () => resolve(),\r\n                error => reject(error)),\r\n            error => reject(error));\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.create({ type: attributes.type, name: attributes.name }).then(\r\n            model => resolve(model),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.list = () => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findAll({ attributes: ['id', 'type', 'name'] }).then(\r\n            models => resolve(models),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.update = (board_model_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.update({ type: attributes.type, name: attributes.name }).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"board model not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.remove = (board_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.destroy().then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"board model not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.setSensors = (board_model_id, sensors) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.addSensors(sensors).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"board model not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.getSensors = (board_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.getSensors({ attributes: { exclude: ['created_at', 'updated_at'] } }).then(\r\n                    sensors => {\r\n                        sensors.forEach(element => delete element.dataValues.BoardSensor);\r\n                        resolve(sensors)\r\n                    },\r\n                    error => reject(error));\r\n                else reject(new Error(\"board model not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.removeSensor = (board_model_id, sensor_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.removeSensors(sensor_id).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"board model not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /boardmodel 01) Create Model\r\n * @apiGroup Board\r\n * @apiName createBoardModel\r\n * @apiDescription create a new board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} name board model name\r\n * @apiParam {string} type board type, must be 'environmental', 'wearable' or 'non-wearable'\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"Zolertia RE-Mote\",\r\n *          \"type\": \"environmental\"\r\n *     }\r\n * @apiSuccess {string} id created board model id\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.create(req.body).then(\r\n            model => res.status(200).json({ id: model.id }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n* @api {get} /boardmodel 02) List Models\r\n* @apiGroup Board\r\n* @apiName listsBoardsModel\r\n* @apiDescription list all board models. \r\n* @apiVersion 1.0.0\r\n* @apiUse box\r\n*\r\n* @apiPermission admin\r\n* @apiSuccess {array} models list of board models\r\n* @apiSuccess {string} id id of each board model\r\n* @apiSuccess {string} type type of the model (must be 'environmental', 'wearable' or 'non-wearable')\r\n* @apiSuccess {string} name name of the model\r\n* @apiSuccessExample {json} Response example:\r\n* {\r\n*  \"models\": [\r\n*      {\r\n*          \"id\": \"5d93585b-f511-4fa8-b69e-692c2474d5e8\",\r\n*          \"type\": \"non-wearable\",\r\n*          \"name\": \"MySignals\"\r\n*      },\r\n*      {\r\n*          \"id\": \"d4710130-4c8c-4ade-96c7-0d5c00738eda\",\r\n*          \"type\": \"environmental\",\r\n*          \"name\": \"Zolertia RE-Mote\"\r\n*      }\r\n*  ]\r\n* }\r\n*/\r\nexports.list = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.list().then(\r\n            models => res.status(200).json({ models: models }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /boardmodel/:id 03) Update Model\r\n * @apiGroup Board\r\n * @apiName updateBoardModel\r\n * @apiDescription update a board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model id to update\r\n * @apiParam {string} name board model name\r\n * @apiParam {string} type board type, must be 'environmental', 'wearable' or 'non-wearable'\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"Zolertia RE-Mote\",\r\n *          \"type\": \"environmental\"\r\n *     }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.update(req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /boardmodel/:id 04) Delete Model\r\n * @apiGroup Board\r\n * @apiName deleteBoardModel\r\n * @apiDescription remove a board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model id to delete\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.remove(req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /boardmodel/:id/sensor 05) Add Sensors\r\n * @apiGroup Board\r\n * @apiName setSensors\r\n * @apiDescription add sensors to a board model\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {array} sensors list of sensors IDs\r\n * @apiParamExample {json} Request example:\r\n * {\r\n *  \"sensors\": [\r\n *      \"75a60f5f-ef3d-4556-9cdd-981894c8f1dc\",\r\n *      \"c704c803-d1fc-4eed-831e-0aba3cd75a60\",\r\n *      \"00397579-0a11-42ee-b522-b25e11630eda\"\r\n *  ]\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.setSensors = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.setSensors(req.params.id, req.body.sensors).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} boardmodel/:id/sensor 06) Get Sensors\r\n * @apiGroup Board\r\n * @apiName getSensors\r\n * @apiDescription list sensors of a board model\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model unique ID\r\n * @apiSuccess {array} models list of sensors\r\n * @apiSuccess {string} transducer transducer name\r\n * @apiSuccess {string} measure transducer measure\r\n * @apiSuccess {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiSuccess {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiSuccess {decimal} min_possible minimum possible value to sensor\r\n * @apiSuccess {decimal} max_possible maximum possible value to sensor\r\n * @apiSuccessExample {json} Request example:\r\n * {\r\n *  \"sensors\": [\r\n *      {\r\n *           \"id\": \"e783b552-567f-499b-b480-9d373fe62a17\"\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getSensors = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.getSensors(req.params.id).then(\r\n            sensors => res.status(200).json({ sensors: sensors }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} boardmodel/:id/sensor 07) Remove Sensor\r\n * @apiGroup Board\r\n * @apiName removeSensor\r\n * @apiDescription remove sensor from a board model \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model unique ID\r\n * @apiParam {string} sensor_id sensor to remove ID\r\n * @apiParamExample {json} Response example:\r\n * {\r\n *  \"sensor_id\": \"00397579-0a11-42ee-b522-b25e11630eda\"\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeSensor = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.removeSensor(req.params.id, req.body.sensor_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}","module.exports.v1_0_0 = {\r\n    'board_model': require('./v1.0.0/board_model'),\r\n    'board': require('./v1.0.0/board'),\r\n    'manage':require('./v1.0.0/manage'),\r\n    'record': require('./v1.0.0/record'),\r\n    'sensor':require('./v1.0.0/sensor'),\r\n    'user': require('./v1.0.0/user'),\r\n    'vitabox': require('./v1.0.0/vitabox'),\r\n}","// ROUTES FOR OUR API\r\n// =============================================================================\r\nmodule.exports = (app) => {\r\n\r\n    var controllers = require('./controllers/index'),\r\n        versioning = require('express-routes-versioning')();\r\n\r\n\r\n    app\r\n        .get('/', versioning({\r\n            \"1.0.0\": (req, res) => res.json({ message: 'Welcome to our api!' }),\r\n            \"2.0.0\": (req, res) => res.json({ error: 'invalid version' })\r\n        }))\r\n        /*________________________________________________check\r\n        *_____________________USERS_______________________\r\n        *_________________________________________________*/\r\n        .post('/register', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.register\r\n        }))\r\n        .post('/login', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.login,\r\n        }))\r\n        .post('/chpass', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.changePassword,\r\n        }))\r\n        /*________________________________________________check\r\n        *____________________ VITABOX_____________________\r\n        *_________________________________________________*/\r\n        .post('/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.create\r\n        }))\r\n        .get('/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.list\r\n        }))\r\n        .get('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.find\r\n        }))\r\n        .put('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.update\r\n        }))\r\n        .delete('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.delete\r\n        }))\r\n        .post('/vitabox/:id/register', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.register\r\n        }))\r\n        .post('/vitabox/:id/connect', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.connect\r\n        }))\r\n        .get('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getUsers\r\n        }))\r\n        .post('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addUser\r\n        }))\r\n        .delete('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removeUser\r\n        }))\r\n        .post('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addPatient\r\n        }))\r\n        .get('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getPatients\r\n        }))\r\n        .delete('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removePatient\r\n        }))\r\n        .post('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addBoard\r\n        }))\r\n        .get('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getBoards\r\n        }))\r\n        .delete('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removeBoard\r\n        }))\r\n        /*________________________________________________check\r\n        *__________________ BOARD MODEL___________________\r\n        *_________________________________________________*/\r\n        .post('/boardmodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.create\r\n        }))\r\n        .get('/boardmodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.list\r\n        }))\r\n        .put('/boardmodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.update\r\n        }))\r\n        .delete('/boardmodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.delete\r\n        }))\r\n        .post('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.setSensors\r\n        }))\r\n        .get('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.getSensors\r\n        }))\r\n        .delete('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.removeSensor\r\n        }))\r\n        /*________________________________________________check\r\n        *_____________________SENSOR______________________\r\n        *_________________________________________________*/\r\n        .post('/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.create\r\n        }))\r\n        .get('/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.list\r\n        }))\r\n        .put('/sensor/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.update\r\n        }))\r\n        .delete('/sensor/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.delete\r\n        }))\r\n        /*________________________________________________\r\n        *____________________RECORDS______________________\r\n        *_________________________________________________*/\r\n        .post('/record', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.create\r\n        }))\r\n        .get('/record', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.list\r\n        }))\r\n        /*________________________________________________\r\n        *_____________________TRASH_______________________\r\n        *_________________________________________________*/\r\n        .get('/destroy', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.destroyAll\r\n        }))\r\n\r\n\r\n    app.all('*', (req, res) => {\r\n        res.status(404).json({ 'message': 'Route could not be found' });\r\n    });\r\n};","module.exports = require(\"express\");","module.exports = require(\"os\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"fs\");","module.exports = require(\"crypto\");","var utils = require('../business/v1.0.0/utils');\r\n\r\nmodule.exports.seed = (db) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n\r\n        db.User.count({ where: { admin: true } }).then(\r\n            count => {\r\n                if (count < 1) {\r\n                    utils.encrypt([\"admin@a.aa\", \"user1@a.aa\", \"user2@a.aa\", \"123qweASD\", \"passvita\"])\r\n                        .then(\r\n                            encrypted => {\r\n\r\n                                db.User.bulkCreate([\r\n                                    { \"email\": encrypted[0], \"admin\": true, \"password\": encrypted[3] },\r\n                                    { \"email\": encrypted[1], \"password\": encrypted[3] },\r\n                                    { \"email\": encrypted[2], \"password\": encrypted[3] }\r\n                                ]).then(\r\n                                    users => db.Vitabox.create({ \"latitude\": \"39.6003075\", \"longitude\": \"-8.3906627\", \"address\": \"Av. Dr. Aurélio Ribeiro 3, Tomar, Portugal\", \"registered\": true, \"active\": true, \"password\": encrypted[4] }).then(\r\n                                        vitabox => vitabox.addUsers([users[1].id, users[2].id]).then(\r\n                                            () => db.Boardmodel.bulkCreate([\r\n                                                { \"name\": \"Zolertia RE-Mote\", \"type\": \"environmental\" },\r\n                                                { \"name\": \"Xiaomi MI Band\", \"type\": \"wearable\" },\r\n                                                { \"name\": \"MySignals\", \"type\": \"non-wearable\" }\r\n                                            ]).then(\r\n                                                board_models => db.Board.bulkCreate([\r\n                                                    { \"vitabox_id\": vitabox.id, \"boardmodel_id\": board_models[0].id, \"location\": \"kitchen\" },\r\n                                                    { \"vitabox_id\": vitabox.id, \"boardmodel_id\": board_models[1].id },\r\n                                                    { \"vitabox_id\": vitabox.id, \"boardmodel_id\": board_models[2].id, \"location\": \"bedroom\" }\r\n                                                ]).then(\r\n                                                    () => db.Sensor.bulkCreate([\r\n                                                        { \"transducer\": \"dht22\", \"measure\": \"temperature\", \"min_acceptable\": \"10\", \"max_acceptable\": \"25\", \"min_possible\": \"-20\", \"max_possible\": \"50\" },\r\n                                                        { \"transducer\": \"dht22\", \"measure\": \"humidity\", \"min_acceptable\": \"30\", \"max_acceptable\": \"50\", \"min_possible\": \"20\", \"max_possible\": \"60\" },\r\n                                                        { \"transducer\": \"mq-7\", \"measure\": \"carbon_monoxide\", \"min_acceptable\": \"2\", \"max_acceptable\": \"10\", \"min_possible\": \"10\", \"max_possible\": \"500\" }\r\n                                                    ]).then(\r\n                                                        sensors => board_models[0].addSensors([sensors[0].id, sensors[1].id]).then(\r\n                                                            () => resolve(),\r\n                                                            error => reject(error)),\r\n                                                        error => reject(error)),\r\n                                                    error => reject(error)),\r\n                                                error => reject(error)),\r\n                                            error => reject(error)),\r\n                                        error => reject(error)),\r\n                                    error => reject(error));\r\n                            }, error => reject(error));\r\n                } else resolve();\r\n            }, error => reject(error));\r\n    });\r\n\r\n}","var mongoose = require('mongoose');\r\nvar schema = new mongoose.Schema({\r\n    value: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    datetime: {\r\n        type: Date,\r\n        default: Date.now()\r\n    },\r\n    patient_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    board_id: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    sensor_id: {\r\n        type: String,\r\n        required: true\r\n    },\r\n});\r\n\r\nmodule.exports = mongoose.model('Record', schema);","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Vitabox = sequelize.define('Vitabox', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    latitude: {\r\n      type: DataTypes.DECIMAL(10, 7),\r\n      allowNull: true,\r\n      defaultValue: null,\r\n      validate: {\r\n        min: {\r\n          args: -90,\r\n          msg: \"latitude minimum acceptable value is -90\"\r\n        }, \r\n        max: {\r\n          args: 90,\r\n          msg: \"latitude maximum acceptable value is 90\"\r\n        }\r\n      }\r\n    },\r\n    longitude: {\r\n      type: DataTypes.DECIMAL(10, 7),\r\n      allowNull: true,\r\n      defaultValue: null,\r\n      validate: {\r\n        min: {\r\n          args: -180,\r\n          msg: \"longitude minimum acceptable value is -180\"\r\n        }, \r\n        max: {\r\n          args: 180,\r\n          msg: \"longitude maximum acceptable value is 180\"\r\n        }\r\n      }\r\n    },\r\n    settings: {\r\n      type: DataTypes.JSON,\r\n      allowNull: true,\r\n      defaultValue: null,\r\n    },\r\n    address: { type: DataTypes.STRING },\r\n    registered: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    active: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    }\r\n  }, { underscored: true });\r\n\r\n  Vitabox.associate = function (models) {\r\n    models.Vitabox.belongsToMany(models.User, { through: models.UserVitabox });\r\n    models.Vitabox.hasMany(models.Patient);\r\n    models.Vitabox.hasMany(models.Board);\r\n  };\r\n\r\n  return Vitabox;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var User = sequelize.define('User', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        email: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            unique:{\r\n                args: true,\r\n                msg: 'email already registered'\r\n            },\r\n        },\r\n        password: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false\r\n        },\r\n        admin: {\r\n            type: DataTypes.BOOLEAN,\r\n            defaultValue: false\r\n        }\r\n    }, {\r\n            scopes: {\r\n                profile: { attributes: { exclude: ['password'] } }\r\n            },\r\n            underscored: true\r\n        });\r\n\r\n    User.associate = function (models) {\r\n        models.User.belongsToMany(models.Vitabox, { through: models.UserVitabox });\r\n    };\r\n\r\n    return User;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var UserVitabox = sequelize.define('UserVitabox', {\r\n    sponsor: {\r\n        type: DataTypes.BOOLEAN,\r\n        defaultValue: false\r\n    }\r\n  }, { underscored: true });\r\n\r\n  return UserVitabox;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Sensor = sequelize.define('Sensor', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        transducer: {\r\n            type: DataTypes.STRING,\r\n            allowNull:{\r\n                args: false,\r\n                msg: \"transducer name must be defined\"\r\n            }\r\n        },\r\n        measure:{\r\n            type: DataTypes.STRING,\r\n            allowNull: {\r\n                args: false,\r\n                msg: \"transducer measure must be defined\"\r\n            }\r\n        },\r\n        min_acceptable: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            allowNull: {\r\n                args: false,\r\n                msg: \"minimum acceptable value must be defined\"\r\n            }\r\n        },\r\n        max_acceptable: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            allowNull: {\r\n                args: false,\r\n                msg: \"maximum acceptable value must be defined\"\r\n            }\r\n        },\r\n        min_possible: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            allowNull: {\r\n                args: false,\r\n                msg: \"minimum possible value must be defined\"\r\n            }\r\n        },\r\n        max_possible: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            allowNull: {\r\n                args: false,\r\n                msg: \"maximum possible value must be defined\"\r\n            }\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Sensor.associate = function (models) {\r\n        models.Sensor.belongsToMany(models.Boardmodel, { through: \"BoardSensor\" });\r\n    };\r\n\r\n    return Sensor;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Patient = sequelize.define('Patient', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        birthdate: {\r\n            type: DataTypes.DATEONLY,\r\n            allowNull:{\r\n                args: false,\r\n                msg: \"patient birth date must be defined\"\r\n            }\r\n        },\r\n        name: {\r\n            type: DataTypes.STRING,\r\n            allowNull:{\r\n                args: false,\r\n                msg: \"patient name must be defined\"\r\n            }\r\n        },\r\n        gender: {\r\n            type: DataTypes.ENUM,\r\n            values: ['undefined', 'male', 'female'],\r\n            defaultValue: 'undefined',\r\n            validate: {\r\n                isIn: {\r\n                    args: ['male', 'female', 'undefined'],\r\n                    msg: \"gender must be 'male', 'female' or 'undefined'\"\r\n                }\r\n            }\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Patient.associate = function (models) {\r\n        models.Patient.belongsTo(models.Vitabox);\r\n    };\r\n\r\n    return Patient;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Board = sequelize.define('Board', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        location: {\r\n            type: DataTypes.STRING,\r\n            allowNull: true,\r\n            defaultValue: null\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Board.associate = function (models) {\r\n        models.Board.belongsTo(models.Vitabox);\r\n        models.Board.belongsTo(models.Boardmodel);\r\n    };\r\n\r\n    return Board;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Boardmodel = sequelize.define('Boardmodel', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        type: {\r\n            type: DataTypes.ENUM,\r\n            values: ['environmental', 'wearable', 'non-wearable'],\r\n            allowNull: {\r\n                args: false,\r\n                msg: \"board type must be defined\"\r\n            },\r\n            validate: {\r\n                isIn: {\r\n                    args: ['environmental', 'wearable', 'non-wearable'],\r\n                    msg: \"board type must be 'environmental', 'wearable' or 'non-wearable'\"\r\n                }\r\n            }\r\n        },\r\n        name: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            unique: {\r\n                args: true,\r\n                msg: 'board model already registered'\r\n            }\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Boardmodel.associate = function (models) {\r\n        models.Boardmodel.hasMany(models.Board);\r\n        models.Boardmodel.belongsToMany(models.Sensor, { through: \"BoardSensor\" });\r\n    };\r\n\r\n    return Boardmodel;\r\n};","module.exports = require(\"sequelize\");","module.exports = require(\"dotenv\");","module.exports = require(\"cluster\");","// apidoc -i docs/ -f .js -o docs/\r\n\r\n// server.js\r\n\r\n// BASE SETUP\r\n// =============================================================================\r\nvar cluster = require('cluster');\r\n// Get the env variables from .env\r\nrequire('dotenv').config();\r\n\r\nif (cluster.isMaster) {\r\n    var db = require('./app/models/index');\r\n    db.sequelize.sync().then(\r\n        () => {\r\n            require('./app/models/seed').seed(db).then(\r\n                () => {\r\n                    console.log('\\x1b[32m%s\\x1b[0m.', '(PLAIN) Connection established with MongoDB and MySQL');\r\n\r\n                    var cpus = require('os').cpus().length\r\n                    console.log('Master cluster setting up ' + cpus + ' workers...');\r\n\r\n                    for (var i = 0; i < cpus; i++) {\r\n                        cluster.fork();\r\n                    }\r\n\r\n                    cluster.on('exit', function (worker, code, signal) {\r\n                        console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal + '-> Starting a new worker');\r\n                        cluster.fork();\r\n                    });\r\n                },\r\n                error => {\r\n                    console.log('Unable to seed Databases.');\r\n                    console.log(error.message);\r\n                    process.exit(1);\r\n                }\r\n            )\r\n        },\r\n        error => {\r\n            console.log('Unable to connect to Databases.');\r\n            console.log(error);\r\n            process.exit(1);\r\n        });\r\n} else {\r\n    // call the packages we need\r\n    var express = require('express'),           // call express\r\n        // https = require('https'),\r\n        // fs = require(\"fs\"),\r\n        router = require('./app/router'),\r\n        bodyParser = require('body-parser'),\r\n        utils = require('./app/business/index').v1_0_0.utils;\r\n\r\n    // START THE SERVER\r\n    // =============================================================================\r\n    // define our app using express\r\n    var app = express();\r\n\r\n    // middleware to use for all requests\r\n    app.use(bodyParser.urlencoded({ extended: true }));\r\n    app.use(bodyParser.json());\r\n    app.use((req, res, next) => {\r\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n        res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\r\n        res.header(\"Access-Control-Allow-Methods\", \"POST, GET, PUT, DELETE, OPTIONS\");\r\n        res.header('Access-Control-Allow-Credentials', true);\r\n        //console.log(dateFormat(new Date(), \"dd/mm/yyyy hh:MM:ss\"), \"\\x1b[34m\" + req.method, req.url + \"\\x1b[0m\"+ \" pid: \"+process.pid);\r\n        if (req.headers && req.headers.authorization) {\r\n            utils.validateToken(req.headers.authorization, req.connection.remoteAddress).then(\r\n                client => {\r\n                    if (client) {\r\n                        req.client = client;\r\n                        next();\r\n                    } else res.status(500).json({ msg: \"Client not registered\" })\r\n                },\r\n                error => res.status(500).json({ msg: error.message })\r\n            )\r\n        } else {\r\n            req.user = undefined;\r\n            next(); // make sure that proceeds to the next routes and don't stop here\r\n        }\r\n    });\r\n\r\n    // Present SPA\r\n    app.use(express.static(__dirname + '/public'));\r\n    // REGISTER ROUTES -------------------------------\r\n    router(app);\r\n\r\n    // Define the listenning port\r\n    var port = process.env.PORT || 8080;\r\n    // start http server\r\n    app.listen(port, () => {\r\n        // https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\r\n        console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server http listening on port', port);\r\n    });\r\n\r\n    // //set options to https\r\n    // const options = {\r\n    //     key: fs.readFileSync(__dirname + \"/app/keys/https_key.pem\"),\r\n    //     cert: fs.readFileSync(__dirname + \"/app/keys/https_cert.pem\"),\r\n    //     ca: fs.readFileSync(__dirname + \"/app/keys/https_ca.pem\"),\r\n    //     dhparam: fs.readFileSync(__dirname + \"/app/keys/https_dhparam.pem\")\r\n    // };\r\n    // // start https server\r\n    // https.createServer(options, app).listen(8080, () => {\r\n    //     console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server https listening on port', port);\r\n    // });\r\n}"],"sourceRoot":""}