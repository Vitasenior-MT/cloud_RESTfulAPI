{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/models/index.js","webpack:///./app/business/index.js","webpack:///external \"mongoose\"","webpack:///./app/business/v1.0.0/utils.js","webpack:///external \"path\"","webpack:///external \"multer\"","webpack:///external \"fs\"","webpack:///external \"crypto\"","webpack:///./app/models/seed.js","webpack:///external \"http\"","webpack:///external \"express-routes-versioning\"","webpack:///./app/controllers/v1.0.0/vitabox.js","webpack:///./app/controllers/v1.0.0/user.js","webpack:///./app/controllers/v1.0.0/sensor.js","webpack:///./app/controllers/v1.0.0/record.js","webpack:///./app/controllers/v1.0.0/manage.js","webpack:///./app/controllers/v1.0.0/board.js","webpack:///./app/controllers/v1.0.0/board_model.js","webpack:///./app/controllers/index.js","webpack:///./app/router.js","webpack:///./app/business/v1.0.0/vitabox.js","webpack:///external \"nodemailer\"","webpack:///./app/business/v1.0.0/user.js","webpack:///./app/business/v1.0.0/sensor.js","webpack:///./app/business/v1.0.0/record.js","webpack:///./app/business/v1.0.0/patient.js","webpack:///./app/business/v1.0.0/board.js","webpack:///./app/business/v1.0.0/board_model.js","webpack:///external \"body-parser\"","webpack:///./app/middleware.js","webpack:///external \"express\"","webpack:///external \"os\"","webpack:///./node_modules/uuid/lib/bytesToUuid.js","webpack:///./node_modules/uuid/lib/rng.js","webpack:///./node_modules/uuid/v4.js","webpack:///external \"mime-types\"","webpack:///external \"jsonwebtoken\"","webpack:///./app/models/mongodb/warning.js","webpack:///./app/models/mongodb/error.js","webpack:///./app/models/mongodb/log.js","webpack:///./app/models/mongodb/record_old.js","webpack:///./app/models/mongodb/record_temp.js","webpack:///./app/models/mongodb/record_check.js","webpack:///./app/models/mysql/vitabox.js","webpack:///./app/models/mysql/user.js","webpack:///./app/models/mysql/user_vitabox.js","webpack:///./app/models/mysql/sensor.js","webpack:///./app/models/mysql/patient.js","webpack:///./app/models/mysql/board.js","webpack:///./app/models/mysql/board_model.js","webpack:///external \"sequelize\"","webpack:///external \"dotenv\"","webpack:///external \"cluster\"","webpack:///./server.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","mongoose","Sequelize","mongo_uri","mysql_uri","operatorsAliases","$eq","Op","eq","$ne","ne","$gte","gte","$gt","gt","$lte","lte","$lt","lt","$not","not","$in","in","$notIn","notIn","$is","is","$like","like","$notLike","notLike","$iLike","iLike","$notILike","notILike","$regexp","regexp","$notRegexp","notRegexp","$iRegexp","iRegexp","$notIRegexp","notIRegexp","$between","between","$notBetween","notBetween","$overlap","overlap","$contains","contains","$contained","contained","$adjacent","adjacent","$strictLeft","strictLeft","$strictRight","strictRight","$noExtendRight","noExtendRight","$noExtendLeft","noExtendLeft","$and","and","$or","or","$any","any","$all","all","$values","values","$col","col","connect","sequelize","logging","db","Boardmodel","Board","Patient","Sensor","UserVitabox","User","Vitabox","RecordCheck","RecordTemp","RecordOld","Log","Error","Warning","keys","forEach","modelName","associate","connection","v1_0_0","boardmodel","board","patient","record","sensor","user","utils","vitabox","require","__dirname","crypto","fs","jwt","path","mime","multer","uuidv4","encrypt","to_encrypt","map","element","index","cipher","createCipher","process","env","ALGORITHM","KEY","update","Buffer","from","final","error","decrypt","to_decrypt","decipher","createDecipher","createToken","obj","client_address","Promise","resolve","reject","private_key","readFileSync","toString","undefined","code","msg","payload","id","role","constructor","options","expiresIn","algorithm","subject","sign","token","message","validateToken","public_key","algorithms","verify","findById","then","generatePassword","n_char","sk","Math","floor","random","upload","storage","diskStorage","destination","filename","req","file","cb","extension","mimetype","fileFilter","originalname","match","single","err","download","header","Content-Type","lookup","deleteAll","raw","query","truncate","remove","testSeed","seed","count","where","admin","encrypted","bulkCreate","email","password","users","latitude","longitude","address","registered","active","addUsers","type","board_models","vitabox_id","boardmodel_id","location","mac_addr","node_id","boards","transducer","measure","tag","min_acceptable","max_acceptable","min_possible","max_possible","last_commit","deviation_range","last_values","sensors","addSensors","insertMany","datetime","board_id","sensor_id","doc","birthdate","gender","height","patients","addPatients","create","business","res","client","data","status","json","send","register","findByEmail","body","params","addUser","result","requestToken","remoteAddress","list","vitaboxes","find","getSettings","settings","setSettings","delete","flag","sponsor","getUsers","removeUser","user_id","addPatient","createIfNotExists","getPatients","disablePatient","disable","patient_id","verifySponsor","enablePatient","enable","removePatient","withdrawsAccess","addBoard","authenticate","setLocation","getBoards","disableBoard","enableBoard","removeBoard","removeLocation","login","changePassword","forgotPassword","createRecoverToken","sendRecoverEmail","resetPassword","verifyRecoverToken","console","log","records","updateLastCommit","has_invalid","listByPatient","listByPatientSensor","pid","sid","page","listByBoard","listByBoardSensor","bid","listBySensor","fileUpload","fileDownload","writeHead","end","destroyAll","success","testDb","model","models","setSensor","getSensors","removeSensor","board_model","manage","app","controllers","versioning","post","1.0.0","2.0.0","put","attributes","findOne","current_user","findAll","exclude","getVitaboxes","dataValues","length","_isSponsor","destroy","is_sponsor","through","is_user","since","created_at","_isUser","VitaboxId","include","Sensors","BoardSensor","Date","hasUser","test","new_user","resetPasswordToken","resetPasswordExpires","now","transporter","createTransport","host","port","secure","auth","pass","mailOptions","to","html","sendMail","substr","promises","Set","x","valid_records","push","_getRecordsWhere","docs","_getAllRecordsWhere","_removeRecordsWhere","sort","select","skip","limit","exec","temp_doc","check_doc","concat","promise_temp","promise_check","includes","replace","toUpperCase","toLowerCase","lastIndexOf","findByMAC","board_model_id","hasSensor","addSensor","removeSensors","bodyParser","dest","use","urlencoded","extended","next","method","headers","authorization","byteToHex","buf","offset","bth","randomBytes","rng","bytesToUuid","Array","rnds","ii","schema","Schema","required","default","String","seen","Boolean","reported","versionKey","object_id","Number","is_vitabox","is_board","is_sensor","analyzed","DataTypes","define","UUID","defaultValue","UUIDV4","primaryKey","STRING","allowNull","DECIMAL","validate","min","args","max","JSON","notEmpty","BOOLEAN","connected","DATE","underscored","belongsToMany","hasMany","unique","scopes","profile","isDecimal","DATEONLY","weight","FLOAT","belongsTo","last_error","ENUM","isIn","cluster","config","isMaster","sync","workers","cpus","fork","on","worker","signal","exit","express","static","server","createServer","PORT","listen"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 53);\n","var mongoose = require('mongoose'),\r\n    Sequelize = require('sequelize');\r\n\r\nvar mongo_uri = \"\", mysql_uri = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    mongo_uri = 'mongodb://localhost:27017/myproject';\r\n    mysql_uri = 'mysql://api:123qwe@localhost:3306/node';\r\n} else {\r\n    mongo_uri = 'mongodb://localhost:27017/test';\r\n    mysql_uri = 'mysql://api:123qwe@localhost:3306/test';\r\n}\r\n\r\nconst operatorsAliases = {\r\n    $eq: Sequelize.Op.eq,\r\n    $ne: Sequelize.Op.ne,\r\n    $gte: Sequelize.Op.gte,\r\n    $gt: Sequelize.Op.gt,\r\n    $lte: Sequelize.Op.lte,\r\n    $lt: Sequelize.Op.lt,\r\n    $not: Sequelize.Op.not,\r\n    $in: Sequelize.Op.in,\r\n    $notIn: Sequelize.Op.notIn,\r\n    $is: Sequelize.Op.is,\r\n    $like: Sequelize.Op.like,\r\n    $notLike: Sequelize.Op.notLike,\r\n    $iLike: Sequelize.Op.iLike,\r\n    $notILike: Sequelize.Op.notILike,\r\n    $regexp: Sequelize.Op.regexp,\r\n    $notRegexp: Sequelize.Op.notRegexp,\r\n    $iRegexp: Sequelize.Op.iRegexp,\r\n    $notIRegexp: Sequelize.Op.notIRegexp,\r\n    $between: Sequelize.Op.between,\r\n    $notBetween: Sequelize.Op.notBetween,\r\n    $overlap: Sequelize.Op.overlap,\r\n    $contains: Sequelize.Op.contains,\r\n    $contained: Sequelize.Op.contained,\r\n    $adjacent: Sequelize.Op.adjacent,\r\n    $strictLeft: Sequelize.Op.strictLeft,\r\n    $strictRight: Sequelize.Op.strictRight,\r\n    $noExtendRight: Sequelize.Op.noExtendRight,\r\n    $noExtendLeft: Sequelize.Op.noExtendLeft,\r\n    $and: Sequelize.Op.and,\r\n    $or: Sequelize.Op.or,\r\n    $any: Sequelize.Op.any,\r\n    $all: Sequelize.Op.all,\r\n    $values: Sequelize.Op.values,\r\n    $col: Sequelize.Op.col\r\n};\r\n\r\n// Create a new conntection to MongoDB server\r\nmongoose.connect(mongo_uri);\r\n// Create a new connection to MySQL server\r\nvar sequelize = new Sequelize(mysql_uri, { operatorsAliases: operatorsAliases, logging: false });\r\n\r\nconst db = {\r\n    'Boardmodel': require('./mysql/board_model')(sequelize, Sequelize),\r\n    'Board': require('./mysql/board')(sequelize, Sequelize),\r\n    'Patient': require('./mysql/patient')(sequelize, Sequelize),\r\n    'Sensor': require('./mysql/sensor')(sequelize, Sequelize),\r\n    'UserVitabox': require('./mysql/user_vitabox')(sequelize, Sequelize),\r\n    'User': require('./mysql/user')(sequelize, Sequelize),\r\n    'Vitabox': require('./mysql/vitabox')(sequelize, Sequelize),\r\n\r\n    'RecordCheck': require('./mongodb/record_check'),\r\n    'RecordTemp': require('./mongodb/record_temp'),\r\n    'RecordOld': require('./mongodb/record_old'),\r\n    'Log': require('./mongodb/log'),\r\n    'Error': require('./mongodb/error'),\r\n    'Warning': require('./mongodb/warning')\r\n}\r\n\r\nObject.keys(db).forEach(modelName => {\r\n    if (db[modelName].associate) db[modelName].associate(db);\r\n});\r\n\r\ndb.sequelize = sequelize;\r\ndb.mongoose = mongoose.connection;\r\n\r\nmodule.exports = db;","module.exports.v1_0_0 = {\r\n    'boardmodel':require('./v1.0.0/board_model'),\r\n    'board': require('./v1.0.0/board'),\r\n    'patient':require('./v1.0.0/patient'),\r\n    'record': require('./v1.0.0/record'),\r\n    'sensor':require('./v1.0.0/sensor'),\r\n    'user': require('./v1.0.0/user'),\r\n    'utils': require('./v1.0.0/utils'),\r\n    'vitabox': require('./v1.0.0/vitabox'),\r\n};","module.exports = require(\"mongoose\");","var db = require('../../models/index'),\r\n  crypto = require(\"crypto\"),\r\n  fs = require(\"fs\"),\r\n  jwt = require('jsonwebtoken'),\r\n  path = require(\"path\"),\r\n  mime = require('mime-types'),\r\n  multer = require('multer'),\r\n  uuidv4 = require('uuid/v4');\r\n\r\nexports.encrypt = (to_encrypt) => {\r\n  try {\r\n    return {\r\n      value: to_encrypt.map((element, index) => {\r\n        let cipher = crypto.createCipher(process.env.ALGORITHM, process.env.KEY);\r\n        return element = cipher.update(Buffer.from(element), 'utf8', 'hex') + cipher.final('hex');\r\n      }), error: null\r\n    };\r\n  } catch (error) {\r\n    return { value: null, error: error };\r\n  }\r\n}\r\n\r\nexports.decrypt = (to_decrypt) => {\r\n  let decipher = crypto.createDecipher(process.env.ALGORITHM, process.env.KEY);\r\n  return decipher.update(to_decrypt, 'hex', 'utf8') + decipher.final('utf8');\r\n}\r\n\r\nexports.createToken = (obj, client_address) => {\r\n  return new Promise((resolve, reject) => {\r\n    let private_key = fs.readFileSync(__dirname + '/../../keys/key.pem').toString();\r\n    if (private_key === undefined) reject({ code: 500, msg: \"error on load private key\" });\r\n\r\n    let payload = {\r\n      id: obj.id,\r\n      role: obj.constructor.name\r\n    };\r\n    let options = {\r\n      expiresIn: \"8h\",\r\n      algorithm: \"RS256\",\r\n      subject: client_address\r\n    };\r\n    jwt.sign(payload, private_key, options, (error, token) => {\r\n      if (error) reject({ code: 500, msg: error.message });\r\n      resolve(token);\r\n    });\r\n  });\r\n}\r\n\r\nexports.validateToken = (token, client_address) => {\r\n  return new Promise((resolve, reject) => {\r\n    let public_key = fs.readFileSync(__dirname + '/../../keys/cert.pem').toString();\r\n    if (public_key === undefined) reject(\"error on load public key\");\r\n\r\n    let options = {\r\n      algorithms: [\"RS256\"],\r\n      subject: client_address\r\n    };\r\n\r\n    jwt.verify(token, public_key, options, (error, payload) => {\r\n      if (error) reject({ code: 500, msg: error.message });\r\n      db[payload.role].findById(payload.id).then(\r\n        obj => resolve(obj),\r\n        error => reject({ code: 500, msg: error.message })\r\n      );\r\n    });\r\n  });\r\n}\r\n\r\nexports.generatePassword = (n_char) => {\r\n  let sk = \"\", i, j, base = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n  for (i = 0; i < n_char; i++) sk += base[Math.floor(Math.random() * 61)];\r\n  return sk;\r\n}\r\n\r\nexports.upload = () => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      let obj = multer({\r\n        storage: multer.diskStorage(\r\n          {\r\n            destination: path.resolve(__dirname, '..', '..', '..', 'files'),\r\n            filename: (req, file, cb) => cb(null, uuidv4() + '.' + mime.extension(file.mimetype))\r\n          }\r\n        ),\r\n        fileFilter: (req, file, cb) => {\r\n          if (!file.originalname.match(/\\.(jpg|jpeg|png|gif|pdf)$/)) return cb(new Error('Only image files are allowed!'), false);\r\n          cb(null, true);\r\n        }\r\n      }).single('file');\r\n      resolve(obj);\r\n    } catch (err) { reject({ code: 500, msg: err.message }); }\r\n  });\r\n}\r\n\r\nexports.download = (filename) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      let file = fs.readFileSync(path.resolve(__dirname, '..', '..', '..', 'files', filename));\r\n      let header = { 'Content-Type': mime.lookup(filename) }\r\n      resolve({ file: file, header: header });\r\n    } catch (err) { reject({ code: 500, msg: err.message }); }\r\n  });\r\n}\r\n\r\n\r\n// JUST TO DEVELOPMENT\r\nexports.deleteAll = () => {\r\n  return new Promise((resolve, reject) => {\r\n\r\n    var options = { raw: true };\r\n\r\n    db.sequelize.query('SET FOREIGN_KEY_CHECKS = 0', options).then(() => {\r\n      db.UserVitabox.truncate().then(() => {\r\n        db.User.truncate().then(() => {\r\n          db.Vitabox.truncate().then(() => {\r\n            db.Boardmodel.truncate().then(() => {\r\n              db.Board.truncate().then(() => {\r\n                db.Patient.truncate().then(() => {\r\n                  db.RecordTemp.remove({}, () => {\r\n                    db.RecordOld.remove({}, () => {\r\n                      db.RecordCheck.remove({}, () => {\r\n                        db.Log.remove({}, () => {\r\n                          db.Warning.remove({}, () => {\r\n                            db.sequelize.query('SET FOREIGN_KEY_CHECKS = 1', options).then(\r\n                              () => resolve(),\r\n                              error => reject(error));\r\n                          });\r\n                        }, error => reject(error));\r\n                      }, error => reject(error));\r\n                    }, error => reject(error));\r\n                  }, error => reject(error));\r\n                }, error => reject(error));\r\n              }, error => reject(error));\r\n            }, error => reject(error));\r\n          }, error => reject(error));\r\n        }, error => reject(error));\r\n      }, error => reject(error));\r\n    }, error => reject(error));\r\n  });\r\n}\r\n\r\nexports.testSeed = () => {\r\n  return new Promise((resolve, reject) => {\r\n    require('../../models/seed').testSeed(db).then(\r\n      () => resolve(),\r\n      error => reject(error));\r\n  });\r\n}","module.exports = require(\"path\");","module.exports = require(\"multer\");","module.exports = require(\"fs\");","module.exports = require(\"crypto\");","var utils = require('../business/v1.0.0/utils');\r\n\r\nmodule.exports.seed = (db) => {\r\n  return new Promise((resolve, reject) => {\r\n\r\n    db.User.count({ where: { admin: true } }).then(\r\n      count => {\r\n        if (count < 1) {\r\n          let encrypted = utils.encrypt([\"admin@a.aa\", \"user1@a.aa\", \"user2@a.aa\", \"123qweASD\", \"passvita\", \"José António\", \"Manuela Antonieta\"])\r\n          if (!encrypted.error) {\r\n\r\n            db.User.bulkCreate([\r\n              { \"email\": encrypted.value[0], \"admin\": true, \"password\": encrypted.value[3] },\r\n              { \"email\": encrypted.value[1], \"password\": encrypted.value[3] },\r\n              { \"email\": encrypted.value[2], \"password\": encrypted.value[3] }\r\n            ]).then(\r\n              users => db.Vitabox.bulkCreate([\r\n                { \"latitude\": \"39.6003075\", \"longitude\": \"-8.3906627\", \"address\": \"Av. Dr. Aurélio Ribeiro 3, Tomar, Portugal\", \"registered\": true, \"active\": true, \"password\": encrypted.value[4] },\r\n                { \"latitude\": \"39.6003075\", \"longitude\": \"-8.3906627\", \"address\": \"Largo S.Sebastião, 4G, 2drt, Torres Novas, Portugal\", \"registered\": true, \"active\": true, \"password\": encrypted.value[4] }\r\n              ]).then(\r\n                vitabox => vitabox[0].addUsers([users[1].id, users[2].id]).then(\r\n                  () => db.Boardmodel.bulkCreate([\r\n                    { \"name\": \"Zolertia RE-Mote\", \"type\": \"environmental\" },\r\n                    { \"name\": \"Xiaomi MI Band\", \"type\": \"wearable\" },\r\n                    { \"name\": \"MySignals\", \"type\": \"non-wearable\" }\r\n                  ]).then(\r\n                    board_models => db.Board.bulkCreate([\r\n                      { \"vitabox_id\": vitabox[0].id, \"boardmodel_id\": board_models[0].id, \"location\": \"kitchen\", \"mac_addr\": \"00:12:4b:00:06:0d:60:c8\", \"node_id\": \"60c8\", password: encrypted.value[4], active: true },\r\n                      { \"vitabox_id\": vitabox[0].id, \"boardmodel_id\": board_models[0].id, \"location\": \"kitchen\", \"mac_addr\": \"00:12:4b:00:06:0d:b2:1a\", \"node_id\": \"b21a\", password: encrypted.value[4], active: true },\r\n                      { \"vitabox_id\": vitabox[0].id, \"boardmodel_id\": board_models[0].id, \"location\": \"bedroom\", \"mac_addr\": \"00:12:4b:00:06:0d:60:fb\", \"node_id\": \"60fb\", password: encrypted.value[4], active: true },\r\n                      { \"vitabox_id\": vitabox[0].id, \"boardmodel_id\": board_models[0].id, \"location\": \"bedroom\", \"mac_addr\": \"00:12:4b:00:14:d5:2d:c6\", \"node_id\": \"2dc6\", password: encrypted.value[4], active: true },\r\n                      { \"vitabox_id\": vitabox[0].id, \"boardmodel_id\": board_models[0].id, \"location\": \"bedroom\", \"mac_addr\": \"00:12:4b:00:06:0d:61:0d\", \"node_id\": \"610d\", password: encrypted.value[4], active: true },\r\n                      { \"vitabox_id\": vitabox[0].id, \"boardmodel_id\": board_models[0].id, \"location\": \"bedroom\", \"mac_addr\": \"00:12:4b:00:14:d5:2f:26\", \"node_id\": \"2f26\", password: encrypted.value[4], active: true }\r\n                    ]).then(\r\n                      boards => db.Sensor.bulkCreate([\r\n                        { \"transducer\": \"dht22\", \"measure\": \"temperature\", \"tag\": \"temp\", \"min_acceptable\": \"10\", \"max_acceptable\": \"25\", \"min_possible\": \"-20\", \"max_possible\": \"50\", \"last_commit\":\"2018-06-18T06:48:48.400Z\", \"deviation_range\":5, \"last_values\":[21,23,24,22,20] },\r\n                        { \"transducer\": \"dht22\", \"measure\": \"humidity\", \"tag\": \"humi\", \"min_acceptable\": \"30\", \"max_acceptable\": \"50\", \"min_possible\": \"20\", \"max_possible\": \"60\" },\r\n                        { \"transducer\": \"mq-7\", \"measure\": \"monoxide carbon\", \"tag\": \"mono\", \"min_acceptable\": \"2\", \"max_acceptable\": \"10\", \"min_possible\": \"10\", \"max_possible\": \"500\" }\r\n                      ]).then(\r\n                        sensors => board_models[0].addSensors([sensors[0].id, sensors[1].id]).then(\r\n                          () => db.RecordTemp.insertMany([\r\n                            { value: \"24\", datetime: \"2018-05-10T04:58:27.554Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-18T13:24:08.176Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-22T09:01:50.898Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-22T16:35:01.871Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-12T03:05:08.544Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-14T00:20:19.826Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-06T16:35:16.145Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-08T20:27:43.220Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-04-22T21:34:22.648Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-04-21T17:45:26.138Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-06-15T10:02:25.281Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-09T07:42:58.206Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-11T23:46:33.157Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-25T18:12:06.148Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-22T05:35:28.250Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-04-29T18:33:19.761Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-26T13:16:14.798Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-06-17T11:49:42.001Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-22T09:29:19.112Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-13T10:56:08.106Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-04-27T03:31:37.851Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-20T11:19:27.817Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-07T09:35:35.929Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-06-11T15:40:22.727Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-17T03:42:17.876Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-12T10:25:24.904Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-31T18:15:26.045Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-28T07:29:26.578Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-27T07:51:02.314Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-11T11:28:35.771Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-06-13T03:35:07.869Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-06-16T18:07:12.596Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-19T03:25:26.446Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-15T05:03:23.796Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-04-21T04:21:50.004Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-17T21:36:30.720Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-04-21T12:12:40.721Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-23T06:13:53.667Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-06-16T20:46:38.758Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-04-27T22:28:19.244Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-16T01:39:41.107Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-29T06:45:27.839Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-11T23:56:02.247Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-24T17:35:53.199Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-03T13:15:17.519Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-24T21:06:31.989Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-05T12:49:14.275Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-04-21T13:15:47.182Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-27T18:34:45.394Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-04-23T20:52:39.790Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-17T19:54:39.722Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-17T21:07:08.075Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-13T08:07:13.386Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-06-05T11:34:21.274Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-06-08T09:38:59.089Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-06-16T07:09:03.740Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-13T03:04:31.436Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-03T21:30:17.675Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-06-17T02:25:22.446Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-04T10:24:38.059Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-07T05:05:52.168Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-21T20:30:07.182Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-04-18T22:28:00.546Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-06-07T17:38:46.159Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-04-22T20:41:24.225Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-17T06:07:17.290Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-29T17:09:48.597Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-12T10:27:23.280Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-06-02T14:21:14.957Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-06-06T21:19:17.379Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-23T06:53:36.735Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-02T08:20:51.839Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-18T12:51:25.864Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-28T12:30:10.873Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-17T15:19:23.336Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-04-22T17:03:20.988Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-28T07:41:54.472Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-05T02:05:34.981Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-17T15:23:15.778Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-04-28T01:23:07.460Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-06T00:21:47.250Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-26T19:48:12.349Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-07T18:56:20.275Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-06-03T04:31:52.828Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-19T09:00:48.407Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-01T16:20:53.312Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-06-13T13:51:23.190Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-17T07:14:41.900Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-17T02:36:04.491Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-09T00:51:31.889Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-14T23:28:39.151Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-06-07T12:13:11.456Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-06-10T11:46:50.927Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-12T07:12:13.136Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-04-30T13:07:26.338Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-06-17T04:33:56.451Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-21T17:54:17.076Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-11T08:34:06.377Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-21T08:33:19.636Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-06-10T07:48:11.031Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-12T16:39:23.976Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-06-12T05:13:45.860Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-09T17:50:05.336Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-04-19T02:59:05.413Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-06-18T06:48:48.400Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-31T00:27:52.244Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-25T07:56:33.631Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-06-11T15:22:41.231Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-04-27T17:57:58.692Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-04-27T15:30:20.777Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-29T08:55:23.936Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-28T02:08:38.521Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-04-28T16:44:28.847Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-04-21T07:07:09.284Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-09T02:38:02.046Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-19T12:05:07.918Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-31T09:11:15.568Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-06-16T15:40:41.166Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-21T14:36:16.432Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-07T09:07:49.581Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-22T12:21:28.625Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-21T04:58:46.780Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-17T15:50:01.238Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-04-29T05:39:54.203Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-01T20:27:43.177Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-06-08T19:14:05.697Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-06-07T10:33:37.088Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-20T14:25:30.012Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-06-11T04:17:56.039Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-10T07:09:16.856Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-06-13T19:11:33.928Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-06-14T18:29:54.082Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-21T21:43:03.893Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-06-09T05:20:17.818Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-06-15T18:09:21.435Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-03T08:19:45.729Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-12T23:03:00.478Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-01T05:30:56.441Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-04-23T15:53:36.665Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-10T22:16:05.061Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-02T18:31:27.107Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-04-29T21:06:42.303Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-28T14:14:53.407Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-04-19T04:19:37.529Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-15T13:33:12.555Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-06T02:01:57.510Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-06-12T09:26:19.968Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-06-04T15:25:45.581Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-21T16:41:51.887Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-15T21:38:10.276Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-02T17:27:47.866Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-17T02:38:07.200Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-02T04:12:46.391Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-06-07T02:59:50.271Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-04-26T05:46:54.159Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-15T03:51:12.264Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-24T18:09:38.820Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-24T02:23:19.241Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-06-15T13:38:39.475Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-21T08:11:31.413Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-01T11:54:13.318Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-12T01:10:16.849Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-06-05T22:57:50.146Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-26T09:18:13.007Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-04-23T17:07:19.107Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-21T06:25:08.716Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-06-16T21:17:23.276Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-22T19:05:02.653Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-23T20:30:48.511Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-09T19:30:30.820Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-04-21T00:39:51.754Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-06-12T02:42:06.090Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-06-17T12:25:04.135Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-03T13:14:06.126Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-06-07T03:06:09.357Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-06-04T23:30:22.745Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-06-02T00:26:50.386Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-04-27T09:17:10.692Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-09T09:45:53.687Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-04-25T18:41:38.325Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-23T10:39:08.455Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-07T16:36:11.544Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-04-20T11:09:34.911Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-08T09:01:25.442Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-12T04:21:07.008Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-22T12:33:07.946Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-28T06:49:51.184Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-04-20T23:43:51.716Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-04T04:25:03.746Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-04-25T13:19:35.676Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-13T12:48:50.729Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-02T12:54:30.484Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-19T17:28:02.687Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-06-13T21:43:14.627Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-24T12:52:37.427Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-22T15:42:06.596Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-06T19:45:33.280Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-20T12:49:24.840Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-04T12:30:39.012Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-03T10:28:32.645Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-14T02:30:02.100Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-04-18T21:16:12.163Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-23T00:43:42.068Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-07T09:51:34.578Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-16T19:13:52.990Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-06-02T07:53:50.486Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-23T01:49:38.832Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-06-11T12:12:12.888Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-07T03:41:11.931Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-14T22:23:52.143Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-20T18:28:57.317Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-04-20T20:32:19.043Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-29T08:19:04.747Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-22T14:16:00.771Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-17T08:45:50.915Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-06-10T08:05:14.135Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-12T14:47:19.794Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-24T09:31:39.760Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-29T13:04:39.398Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-06-08T20:31:19.634Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-04T22:58:34.460Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-04-26T23:35:31.054Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-29T20:39:01.222Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-06-12T18:04:44.019Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-06-17T13:13:03.948Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-06-08T18:58:55.893Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-04-21T09:51:10.876Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-13T20:25:16.357Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-04-21T22:11:02.912Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-03T19:38:39.660Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-04-21T09:13:13.369Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-06-08T03:16:30.777Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-19T21:33:18.845Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-04-30T17:26:38.027Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-19T15:46:26.552Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-04-29T10:20:55.050Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-05T16:26:16.233Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-04-25T00:35:15.404Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-04-25T23:29:51.855Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-22T22:59:03.231Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-09T12:31:45.649Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-29T10:46:24.528Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-06-15T02:20:46.762Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-04-21T22:37:20.266Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-11T00:19:33.223Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-04-29T20:47:51.746Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-04-21T16:20:41.537Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-06-04T12:56:13.587Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-17T14:55:13.655Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-06-14T14:38:39.227Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-10T19:21:48.860Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-06-10T11:49:41.758Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-02T12:46:10.813Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-15T03:07:29.091Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-26T08:20:23.187Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-04-26T14:57:08.085Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-19T03:11:35.364Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-04-23T10:49:43.041Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-07T19:23:34.800Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-06T08:44:19.621Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-04T22:43:29.846Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-19T17:27:51.331Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-22T05:26:42.819Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-17T10:59:53.052Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-17T20:43:24.355Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-24T17:16:51.289Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-30T04:31:27.403Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-04-23T11:00:17.829Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-03T10:14:48.593Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-05T22:01:09.304Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-04-18T18:08:09.978Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-25T21:22:00.914Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-12T19:36:39.450Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-07T12:24:06.900Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-07T12:27:27.155Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-02T17:46:22.656Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-06-06T18:01:53.118Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-08T14:49:53.535Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-04-30T12:35:22.818Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-06-06T15:17:58.154Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-06-01T00:10:40.136Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-06-09T20:42:00.333Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-18T11:33:49.761Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-04-19T04:07:35.024Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-12T01:13:45.780Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-29T01:28:26.501Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-26T21:20:08.507Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-28T11:14:00.190Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-03T23:00:22.204Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-01T09:10:16.936Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-17T12:17:42.394Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-04-23T08:18:23.123Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-02T10:09:13.933Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-04-28T19:31:56.525Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-04-26T04:41:28.830Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-24T13:08:11.587Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-04-25T15:50:47.491Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-27T09:09:43.288Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-04-24T11:10:06.463Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-13T13:15:41.426Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-30T16:51:09.421Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-02T22:46:38.452Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-04-19T01:26:29.909Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-26T20:14:58.876Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-10T19:00:41.280Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-05T09:30:50.499Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-15T23:10:16.191Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-15T02:07:15.686Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-04-30T13:49:56.820Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-22T13:45:54.570Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-16T17:49:19.130Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-03T21:01:59.368Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-31T19:21:59.272Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-31T05:03:08.962Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-08T08:41:21.887Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-04-20T20:47:08.754Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-30T19:53:08.281Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-19T22:52:05.538Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-27T09:52:10.063Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-06-08T13:59:17.865Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-04-29T16:30:23.506Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-02T08:15:31.196Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-04-25T09:35:59.902Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-06-16T01:00:16.611Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-04T09:05:51.476Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-26T20:56:08.278Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-02T03:34:56.882Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-25T07:54:01.587Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-10T09:06:45.556Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-25T11:59:32.632Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-04-20T23:45:08.405Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-21T19:27:28.806Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-06T00:23:17.823Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-15T09:17:28.333Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-02T08:00:35.201Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-06-08T05:14:29.070Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-27T10:24:36.710Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-10T19:23:51.002Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-02T00:44:48.512Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-27T21:04:07.695Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-23T19:57:55.888Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-08T12:31:13.341Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-06T07:17:52.830Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-14T21:16:36.797Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-06-02T18:11:47.787Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-30T04:20:12.205Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-06T20:56:27.801Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-11T18:22:55.217Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-04T06:32:10.823Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-04-20T04:04:21.654Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-17T19:52:18.394Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-25T18:02:26.338Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-12T14:23:50.292Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-12T13:03:46.274Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-29T06:00:50.576Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-06-05T11:27:55.663Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-30T09:37:29.574Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-04T16:26:27.241Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-01T15:15:22.282Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-08T17:02:05.112Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-06-08T01:24:55.216Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-04-26T09:37:21.077Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-04-18T23:45:33.129Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-18T01:46:36.212Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-09T08:45:32.253Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-08T04:49:12.525Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-22T09:15:42.011Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-06-06T19:38:39.006Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-01T10:08:37.878Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-08T02:58:19.132Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-17T07:15:07.835Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-13T19:03:50.033Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-06-15T19:04:09.665Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-04-21T18:54:41.728Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-13T09:08:22.416Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-16T09:08:49.320Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-06T19:50:31.439Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-06-07T00:46:40.274Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-24T23:33:48.641Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-08T18:46:17.991Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-29T01:40:37.055Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-30T19:30:31.794Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-31T05:24:56.042Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-28T12:56:57.066Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-27T12:31:26.070Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-07T12:34:07.711Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-19T13:40:37.584Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-06T05:27:33.273Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-16T05:03:15.057Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-17T17:32:16.483Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-10T12:39:52.980Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-13T09:19:51.525Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-06-14T11:21:21.782Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-17T10:09:45.690Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-17T05:01:11.643Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-21T02:23:59.414Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-29T14:15:15.951Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-06-06T00:13:49.173Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-04-27T02:24:45.587Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-04-27T20:49:05.962Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-04-21T05:27:38.487Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-17T10:02:51.181Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-16T23:38:10.481Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-29T06:34:21.759Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-08T08:16:45.577Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-31T21:11:47.063Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-31T12:23:53.433Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-04-25T00:37:50.797Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-11T17:28:58.668Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-04-21T19:20:11.029Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-04-20T00:29:53.759Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-28T20:57:30.455Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-12T19:33:54.340Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-06-16T16:50:44.692Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-14T21:53:53.076Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-06-18T00:48:15.967Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-04-22T13:01:38.025Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-09T19:03:32.917Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-04-19T07:09:34.431Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-12T19:21:59.229Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-06-11T22:44:22.012Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-23T20:48:46.028Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-09T19:57:24.478Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-20T02:20:29.944Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-04-23T19:22:56.014Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-20T17:10:07.431Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-06-07T02:43:51.564Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-15T05:37:38.465Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-17T01:58:49.038Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-06-17T18:17:09.806Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-01T03:18:07.268Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-29T06:47:59.868Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-02T12:41:35.232Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-09T01:02:06.579Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-06-08T00:26:01.553Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-04-19T06:12:20.810Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-25T04:09:52.173Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-04-22T13:03:09.554Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-06-03T23:45:08.153Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-26T01:15:06.051Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-06-07T09:27:18.014Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-06-04T12:13:17.787Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-12T22:25:47.020Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-04-25T10:29:22.251Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-06-13T09:25:27.469Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-04-20T16:12:50.562Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-04-29T19:56:53.794Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-30T23:08:29.989Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-06-15T01:48:18.056Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-29T01:44:30.435Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-03T18:13:05.968Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-15T19:59:27.076Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-06-10T03:26:24.138Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-18T06:47:03.846Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-06-11T17:50:33.580Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-21T13:20:59.067Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-04-26T17:29:53.860Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-04T11:05:47.972Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-19T13:44:26.957Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-04-24T20:43:26.110Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-06-06T01:19:45.651Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-04-22T21:22:29.200Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-06-02T18:59:40.154Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-04-28T23:00:08.099Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-28T20:38:37.432Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-27T07:42:39.625Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-06-13T10:00:39.095Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-26T01:45:52.959Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-07T08:37:58.759Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-03T07:07:58.896Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-06-02T09:18:40.120Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-05T13:53:18.751Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-18T16:51:04.644Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-06-09T22:38:07.204Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-27T08:06:05.918Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-04-23T00:25:37.673Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-23T08:57:26.958Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-13T02:43:55.034Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-04-19T16:02:50.270Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-04-29T01:57:59.716Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-17T09:56:20.136Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-06-16T01:21:04.873Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-07T20:34:11.239Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-06-09T02:05:54.714Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-06-01T19:07:02.489Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-06-02T09:13:02.203Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-17T18:07:35.312Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-06-04T17:14:51.582Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-06-10T16:11:13.611Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-23T04:33:40.119Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-28T15:23:49.264Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-06-01T17:07:03.425Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-02T06:19:53.148Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-04-19T23:21:50.474Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-20T16:24:10.595Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-09T14:36:49.251Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-04-23T17:49:16.390Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-04-25T20:43:59.452Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-29T03:35:26.713Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-04-20T14:45:08.501Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-04T06:13:17.992Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-06-13T12:33:41.230Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-06-01T08:23:26.738Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-04-21T10:14:41.057Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-06-16T01:11:01.377Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-03T03:02:52.229Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-30T21:50:12.246Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-23T12:53:31.846Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-25T23:14:44.556Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-13T20:23:13.729Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-10T02:38:28.737Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-23T06:57:41.684Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-30T12:26:18.342Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-11T20:37:48.376Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-01T06:01:07.814Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-06-02T05:35:43.194Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-30T03:11:56.112Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-04-27T01:32:36.031Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-30T10:20:48.158Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-24T21:09:09.472Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-12T20:14:22.501Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-04-26T13:23:53.735Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-04-29T04:53:06.308Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-16T01:24:09.725Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-21T14:53:17.394Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-05T20:10:53.091Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-28T14:26:24.682Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-06-10T18:25:31.226Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-01T05:22:38.544Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-28T17:12:22.231Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-15T23:52:26.626Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-06-09T04:14:04.066Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-06T03:48:09.806Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-15T03:51:01.942Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-04-22T07:01:57.523Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-02T18:23:08.882Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-20T14:38:51.259Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-31T21:23:11.663Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-28T16:24:58.587Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-04-27T15:01:45.911Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-22T02:57:02.030Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-30T07:16:45.530Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-16T01:56:18.955Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-06-15T11:37:57.715Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-13T02:29:54.895Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-06-01T13:25:20.725Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-14T16:34:17.197Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-25T11:24:18.350Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-06T10:14:23.282Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-04-27T23:38:57.973Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-06-06T00:13:54.126Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-22T10:16:39.471Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-06-08T09:11:02.379Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-06-11T04:23:45.382Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-22T20:28:10.337Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-06T13:57:17.117Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-04-21T21:25:06.261Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-23T12:06:19.093Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-06-14T20:24:58.835Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-13T07:25:40.835Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-28T09:45:51.353Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-04T14:55:54.719Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-27T04:46:01.273Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-07T09:53:45.824Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-04-22T00:22:12.571Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-22T02:50:22.076Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-25T11:13:59.979Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-04-19T22:42:21.331Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-06-03T21:35:14.803Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-08T06:21:38.600Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-22T18:12:33.075Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-11T21:49:06.754Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-16T03:26:47.503Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-02T23:00:15.650Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-15T14:36:14.429Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-21T20:02:21.108Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-21T00:50:44.831Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-06-07T06:44:04.121Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-17T22:00:15.027Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-07T20:31:06.759Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-12T09:21:23.509Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-04-20T08:00:23.470Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-26T10:56:30.795Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-04-27T14:40:45.441Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-20T12:30:13.085Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-06-05T16:18:09.335Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-06-03T07:20:37.757Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-06-09T07:23:00.859Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-06-11T13:22:54.693Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-16T21:43:25.922Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-06-17T11:18:49.430Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-09T06:54:10.338Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-30T03:40:17.605Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-29T19:22:51.532Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-04-28T17:13:57.434Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-26T05:40:10.379Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-06T04:00:09.059Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-20T00:54:53.286Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-18T17:27:41.825Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-10T13:55:55.097Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-23T05:31:23.333Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-04-22T09:45:20.047Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-04-27T19:26:29.396Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-06-10T04:35:30.313Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-19T12:47:23.251Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-06-15T00:25:43.943Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-13T14:22:04.170Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-17T05:10:58.456Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-06-09T17:17:03.424Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-10T23:55:49.655Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-13T18:28:42.248Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-04-28T16:59:35.114Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-02T23:14:42.674Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-31T06:06:15.565Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-04-24T17:24:46.211Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-24T16:06:04.117Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-04-27T21:46:49.786Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-03T02:40:09.442Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-02T09:38:54.729Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-06-17T14:10:43.314Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-21T20:36:37.318Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-17T00:45:11.751Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-04-28T19:13:08.379Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-24T17:54:52.044Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-05T05:24:15.811Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-06-06T15:26:52.476Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-04-23T19:35:20.230Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-11T08:58:46.243Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-04-18T10:55:00.117Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-04-22T05:32:33.115Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-04-30T16:31:53.525Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-22T08:58:22.190Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-02T23:30:06.419Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-15T18:58:24.428Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-09T12:24:38.449Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-16T01:34:14.424Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-06-05T19:36:55.975Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-04-20T12:14:33.613Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-20T21:39:52.205Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-06T18:48:26.074Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-02T05:25:24.791Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-23T17:58:37.335Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-15T02:23:02.014Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-23T18:29:44.864Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-06-08T00:38:22.396Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-04-24T12:48:05.005Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-04-21T02:24:49.697Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-23T05:44:26.856Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-27T17:32:47.115Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-04-27T11:22:11.280Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-06-06T20:04:46.567Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-01T16:07:24.937Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-31T07:12:48.453Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-27T08:38:08.741Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-24T00:25:01.899Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-11T22:40:26.830Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-04-30T23:49:24.627Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-12T23:00:25.348Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-21T08:25:39.166Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-28T10:07:18.722Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-02T11:29:42.375Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-27T09:52:17.441Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-07T01:34:54.302Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-29T17:12:24.539Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-17T05:13:56.862Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-18T19:32:54.920Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-13T14:52:37.361Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-26T21:21:21.173Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-04-19T12:08:24.158Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-28T20:25:47.249Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-27T17:28:33.863Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-06-02T16:21:32.795Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-27T21:53:57.636Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-04-19T11:28:25.434Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-06-05T11:30:17.719Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-04-18T16:28:31.975Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-06-12T17:30:15.196Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-06-14T03:17:19.641Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-04-25T07:35:34.519Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-29T07:23:54.344Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-24T23:37:35.985Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-20T14:09:50.436Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-29T22:32:24.389Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-15T22:43:40.152Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-06T22:18:07.797Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-22T11:48:37.791Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-17T05:43:49.677Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-28T18:02:46.443Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-04-20T14:56:09.971Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-23T21:39:59.600Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-06-08T03:13:45.995Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-06-02T00:04:56.171Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-06T12:52:56.946Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-21T21:24:09.664Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-11T22:38:01.558Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-14T05:41:44.896Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-11T21:14:31.150Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-17T10:11:19.693Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-04-19T05:46:58.392Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-14T02:55:09.510Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-24T11:54:38.525Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-31T05:40:27.321Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-05T22:18:01.174Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-12T16:01:02.913Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-03T10:58:11.752Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-18T18:29:48.840Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-30T09:42:33.210Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-03T05:29:42.065Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-06-11T18:44:24.384Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-17T06:59:39.684Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-06-14T15:33:12.686Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-20T12:54:04.747Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-26T03:47:10.347Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-12T09:22:53.297Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-18T23:33:25.664Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-10T03:41:36.384Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-09T10:17:52.931Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-19T08:45:43.561Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-06-02T08:27:54.097Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-04-21T02:57:38.328Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-04-22T12:10:13.131Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-25T06:15:40.117Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-04-24T07:56:20.541Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-06-07T06:23:23.371Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-04-19T12:57:37.202Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-30T18:14:57.600Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-06T16:41:08.907Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-05T20:31:36.595Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-26T13:20:32.874Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-06-12T01:48:26.068Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-05T07:13:21.418Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-13T20:08:07.668Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-06T01:34:01.051Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-06-14T07:32:51.094Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-04-21T05:48:08.333Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-14T10:39:17.141Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-02T14:07:31.080Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-22T18:27:28.156Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-12T21:51:10.595Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-04-29T13:01:41.858Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-06-09T09:09:08.198Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-06-15T21:23:32.792Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-06-05T14:01:58.500Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-06-14T08:55:44.507Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-16T07:48:39.044Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-23T11:41:27.772Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-04-18T14:08:01.375Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-04-20T03:32:39.875Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-05-19T14:41:44.329Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-05T03:57:07.990Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-06-01T02:48:10.067Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-06-15T05:58:49.109Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-13T13:48:34.539Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-10T12:29:59.799Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-06-04T17:55:35.361Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-25T16:49:05.519Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-08T06:35:59.191Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-02T10:34:18.354Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-04T22:25:59.304Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-15T15:34:41.561Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-17T16:09:58.326Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-02T22:11:21.611Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-04-21T08:30:37.512Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-25T20:51:14.871Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-25T15:56:05.487Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-10T01:50:31.392Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-06-02T10:26:17.331Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-15T12:08:01.336Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-04-25T23:46:24.296Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-30T16:19:26.759Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-27T18:17:29.158Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-06-06T23:20:54.489Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-04-30T18:53:19.119Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-05-29T00:49:06.013Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-24T18:23:13.016Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-09T08:08:29.539Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-06-09T09:48:49.341Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-20T23:05:24.461Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-17T21:41:34.079Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-06-01T22:10:44.275Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-04-22T18:52:26.049Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-18T00:21:41.676Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-03T21:36:04.166Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-06-05T13:29:05.490Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-06-10T11:20:40.029Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-04-29T08:46:51.765Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-13T14:11:27.870Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-28T04:44:55.249Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-31T11:26:48.673Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-15T01:48:19.755Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-06-15T23:19:36.315Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-11T00:47:21.701Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-06-17T17:20:31.480Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-02T04:58:38.375Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-04-23T06:17:28.562Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-11T18:11:19.535Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-04-19T07:31:56.260Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-04-30T10:01:20.760Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-23T13:51:27.610Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-06-04T17:05:03.744Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-19T01:23:55.321Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-02T17:39:29.194Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-04-23T17:03:36.141Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-04-22T00:53:27.219Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-09T17:58:56.670Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-08T01:56:57.664Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-09T08:58:23.709Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-07T19:46:27.996Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-24T01:35:35.097Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-02T22:06:29.423Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-06-11T22:03:28.574Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-25T23:19:37.331Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-06-05T05:08:35.840Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-04-30T23:39:33.954Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-16T21:38:53.320Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-04-22T17:35:35.977Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-25T03:36:09.828Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-18T03:09:07.133Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-06-17T09:41:11.980Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-02T19:15:54.576Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-06-08T05:52:26.535Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-26T15:41:15.192Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-04-20T23:11:30.491Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-31T21:00:12.188Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-17T02:53:03.785Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-06-07T07:57:36.254Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-06-06T03:54:04.218Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-20T22:11:40.848Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-20T07:11:14.895Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-04-20T09:00:01.985Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-04T23:24:44.091Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-21T01:55:18.405Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-06-03T09:52:52.675Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-20T05:14:05.553Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-03T07:16:29.578Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-01T15:13:43.614Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-06-03T16:03:53.047Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-05-07T00:40:54.104Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-04-23T10:42:11.942Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-06-06T15:58:58.719Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-04-24T06:10:53.272Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-21T18:57:00.111Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-06-04T22:22:36.323Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-07T12:35:23.913Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-04T01:27:35.770Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-14T00:05:02.807Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-18T07:00:08.974Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-04-24T15:42:05.818Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-06-10T16:32:00.162Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-28T15:02:56.017Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-06-05T17:46:19.000Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-19T11:44:23.550Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-02T19:24:03.162Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-22T12:41:02.831Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-22T17:53:10.901Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-08T06:06:06.460Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-04-26T02:48:08.207Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-04-23T16:06:22.689Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-16T23:00:37.620Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-06-04T00:03:16.388Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-04-26T22:43:19.034Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-11T22:40:45.351Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-06-12T08:21:30.401Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-26T10:50:19.050Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-04-22T18:30:24.000Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-21T21:01:41.752Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-08T13:03:14.663Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-06-04T15:22:11.497Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-31T23:54:16.777Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"18\", datetime: \"2018-04-19T19:51:13.937Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-06T15:50:46.534Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-26T19:36:41.510Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-04-20T13:08:58.160Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-06-02T02:54:52.990Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-06-04T04:58:41.448Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-08T07:46:45.654Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-20T21:20:37.060Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-07T01:07:57.672Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-28T07:52:27.242Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-04T08:53:37.143Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-06-06T22:52:52.245Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-20T23:11:26.511Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-12T16:47:35.613Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-16T06:11:49.954Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-04-29T18:36:32.986Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-06-16T08:51:48.961Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-02T13:55:34.258Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-04-30T04:50:10.299Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-21T14:15:09.856Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-04-30T06:40:15.585Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-06-17T06:04:59.967Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-04-29T04:13:27.429Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"33\", datetime: \"2018-05-15T08:03:37.906Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-08T02:58:17.177Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-28T03:24:46.017Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-06-17T01:55:29.514Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-06-10T05:47:55.494Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-04-22T11:52:18.929Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-04-28T15:22:12.771Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-29T14:36:33.947Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-04-20T06:22:44.903Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-17T12:53:33.760Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-04-25T20:50:54.382Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-04-19T18:10:49.729Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-11T20:40:31.784Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-01T01:02:50.029Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-04-22T00:30:21.273Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-16T20:51:14.158Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"15\", datetime: \"2018-04-26T05:10:59.342Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-04T14:24:12.905Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-02T15:22:32.257Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-17T03:07:59.962Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"22\", datetime: \"2018-05-15T08:16:35.273Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-04-20T12:22:21.464Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-31T09:25:08.140Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-04-30T03:12:21.947Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-06-04T05:56:07.810Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-27T06:19:09.308Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-06-14T01:48:39.708Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-14T23:00:43.692Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-14T18:39:52.618Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-06-06T13:42:50.138Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-25T15:27:47.203Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-17T02:42:44.164Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-12T16:10:27.550Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-10T15:28:50.898Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-08T12:49:36.196Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-22T09:53:39.985Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-10T06:16:02.116Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-11T18:08:49.702Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"19\", datetime: \"2018-04-25T10:28:04.174Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-14T01:57:07.054Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-10T01:05:52.269Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-05T09:38:50.934Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-20T22:37:10.282Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-06-02T17:25:35.208Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-19T22:31:30.533Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-06-14T13:30:47.533Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-05-10T15:26:16.085Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-24T09:14:18.348Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-06-04T22:36:09.771Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-29T11:47:18.805Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-22T23:34:14.186Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"21\", datetime: \"2018-05-01T06:45:53.138Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-14T03:27:41.468Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-06-01T01:03:00.974Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-04-23T16:54:54.740Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-15T01:50:10.119Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-06-12T13:08:16.230Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-05-18T01:56:35.958Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-16T19:14:14.822Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-15T13:28:21.810Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-06-05T03:09:01.047Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-23T13:42:17.568Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"27\", datetime: \"2018-05-26T23:08:36.962Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-06-13T23:44:10.986Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-14T14:37:17.640Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-23T13:42:40.164Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-06-06T12:22:42.564Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"13\", datetime: \"2018-05-19T09:00:20.696Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-30T19:15:03.938Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-06-16T07:34:38.093Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-04-24T15:20:38.138Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"6\", datetime: \"2018-05-19T14:37:23.570Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-04-24T17:35:31.128Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"24\", datetime: \"2018-05-17T04:13:44.156Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"7\", datetime: \"2018-05-22T00:59:11.753Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-06-16T15:16:13.217Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-04T15:11:33.276Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-06-10T19:41:37.763Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-06-05T01:52:46.808Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"26\", datetime: \"2018-05-01T03:49:55.052Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"12\", datetime: \"2018-05-19T07:49:24.668Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-05-07T08:42:10.800Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"11\", datetime: \"2018-05-31T22:00:45.531Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"25\", datetime: \"2018-05-22T12:30:57.236Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-04-29T09:01:00.131Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"23\", datetime: \"2018-05-11T00:20:00.690Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-06-15T22:45:55.398Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-05-06T03:44:38.241Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-26T14:29:13.077Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"9\", datetime: \"2018-05-02T19:12:28.803Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-17T09:05:24.850Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-05T20:49:33.238Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"16\", datetime: \"2018-05-17T05:58:24.512Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"29\", datetime: \"2018-05-21T07:02:47.844Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"17\", datetime: \"2018-05-01T10:42:56.486Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"8\", datetime: \"2018-04-21T05:09:20.734Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-06-13T07:39:10.396Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"14\", datetime: \"2018-05-23T01:14:54.471Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-10T00:55:10.845Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-25T00:41:24.830Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"34\", datetime: \"2018-05-16T02:32:07.830Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"20\", datetime: \"2018-05-27T17:36:30.382Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"31\", datetime: \"2018-05-25T12:33:43.514Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"28\", datetime: \"2018-06-07T20:30:28.143Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"5\", datetime: \"2018-06-07T08:35:10.139Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"10\", datetime: \"2018-05-06T10:34:13.559Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"30\", datetime: \"2018-04-25T09:08:47.822Z\", board_id: boards[1].id, sensor_id: sensors[0].id },\r\n                            { value: \"32\", datetime: \"2018-05-12T16:01:38.658Z\", board_id: boards[1].id, sensor_id: sensors[0].id }\r\n                          ], (error, doc) => {\r\n                            if (error) reject(error);\r\n                            else db.Patient.bulkCreate([\r\n                              { \"name\": encrypted.value[5], \"birthdate\": \"1987-02-28\", \"gender\": \"male\", active: true, height:1.73 },\r\n                              { \"name\": encrypted.value[6], \"birthdate\": \"1972-02-28\", \"gender\": \"female\", active: true, height:1.61 }\r\n                            ]).then(\r\n                              patients => vitabox[0].addPatients(patients).then(\r\n                                () => resolve(),\r\n                                error => reject(error)),\r\n                              error => reject(error));\r\n                          }),\r\n                          error => reject(error)),\r\n                        error => reject(error)),\r\n                      error => reject(error)),\r\n                    error => reject(error)),\r\n                  error => reject(error)),\r\n                error => reject(error)),\r\n              error => reject(error));\r\n          } else reject(encrypted.error);\r\n        } else resolve();\r\n      }, error => reject(error));\r\n  });\r\n\r\n}\r\n\r\nmodule.exports.testSeed = (db) => {\r\n  return new Promise((resolve, reject) => {\r\n\r\n    let encrypted = utils.encrypt([\"admin@a.aa\", \"123qweASD\"]);\r\n    if (!encrypted.error) {\r\n\r\n      db.User.create({ \"email\": encrypted.value[0], \"admin\": true, \"password\": encrypted.value[1] }).then(\r\n        () => resolve(),\r\n        error => reject(error));\r\n    } else reject(encrypted.error);\r\n  });\r\n}","module.exports = require(\"http\");","module.exports = require(\"express-routes-versioning\");","var business = require('../../business/index').v1_0_0;\r\n/**\r\n * @apiDefine box\r\n * \r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiError {number} status http status code: 500 to business logic errors and 401 to unauthorized\r\n * @apiError {string} error error description\r\n */\r\n\r\n/**\r\n * @api {post} /vitabox 01) Create\r\n * @apiGroup Vitabox\r\n * @apiName create\r\n * @apiDescription create a new vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiSuccess {string} id created box id\r\n * @apiSuccess {string} password created box serial key\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.vitabox.create().then(\r\n            data => res.status(200).json(data),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/register 02) Register\r\n * @apiGroup Vitabox\r\n * @apiName vitaboxRegister\r\n * @apiDescription register vitabox, the user must be authenticated as \"admin\" and will define the \"sponsor\" account to the vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id vitabox id\r\n * @apiParam {decimal} latitude min: -90, max: 90 (based on google maps coordinates)\r\n * @apiParam {decimal} longitude min: -180, max: 180 (based on google maps coordinates)\r\n * @apiParam {string} address full address with postal code\r\n * @apiParam {string} email sponsor's email\r\n * @apiParamExample {json} Request example to admin:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"email\": \"sponsor@example.com\"\r\n *     }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly registered\r\n */\r\nexports.register = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.user.findByEmail(req.body.email).then(\r\n            user => {\r\n                business.vitabox.register(req.params.id, req.body).then(\r\n                    vitabox => {\r\n                        business.vitabox.addUser(req.client, vitabox.id, user.id, true).then(\r\n                            () => res.status(200).json({ result: true }),\r\n                            error => res.status(error.code).send(error.msg));\r\n                    }, error => res.status(error.code).send(error.msg));\r\n            }, error => res.status(500).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/connect 03) Request Token\r\n * @apiGroup Vitabox\r\n * @apiName vitaboxLogin\r\n * @apiDescription request for a token to the vitabox\r\n * @apiVersion 1.0.0\r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiError {string} error error description\r\n * \r\n * @apiParam {string} :id vitabox id\r\n * @apiParam {string} password password generated on creation\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.requestToken = (req, res) => {\r\n    business.vitabox.requestToken(req.params.id, req.body.password).then(\r\n        data => {\r\n            business.utils.createToken(data, req.connection.remoteAddress).then(\r\n                token => res.status(200).json({ token: token }),\r\n                error => res.status(500).send({ error: error.msg }));\r\n        },\r\n        error => res.status(error.code).send(error.msg)\r\n    );\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox 04) List\r\n * @apiGroup Vitabox\r\n * @apiName list\r\n * @apiDescription list all vitaboxes related to the user. \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission any user\r\n * @apiSuccess {array} vitaboxes list of vitaboxes\r\n * @apiSuccess {string} id id of each vitabox\r\n * @apiSuccess {decimal} latitude latitude of each vitabox, min: -90, max: 90 (based on google maps coordinates)\r\n * @apiSuccess {decimal} longitude longitude of each vitabox, min: -180, max: 180 (based on google maps coordinates)\r\n * @apiSuccess {string} address full address of each vitabox\r\n * @apiSuccess {boolean} sponsor flag indicating if the requester is sponsor of that vitabox (only if NOT admin)\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox (only if admin)\r\n * @apiSuccess {boolean} registered flag indicating if the vitabox was already registered (only if admin)\r\n * @apiSuccess {boolean} active flag indicating if the vitabox was already activated (only if admin)\r\n * @apiSuccess {datetime} created_at date of production (only if admin)\r\n * @apiSuccess {datetime} updated_at date of last update (only if admin)\r\n * @apiSuccessExample {json} Response example to common user:\r\n * {\r\n *  \"vitaboxes\": [\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"sponsor\": true\r\n *      },\r\n *      {\r\n *          \"id\": \"a6abfa76-68f0-4325-b3ab-6c540a800284\",\r\n *          \"latitude\": \"51.5058372\",\r\n *          \"longitude\": \"-0.1899126\",\r\n *          \"address\": \"Kensington Gardens, London W8 4PX, Reino Unido\",\r\n *          \"sponsor\": false\r\n *      }\r\n *  ]\r\n * }\r\n * @apiSuccessExample {json} Response example to admin:\r\n * {\r\n *  \"vitaboxes\": [\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          },\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"registered\": false,\r\n *          \"active\": false,\r\n *          \"created_at\": \"2018-02-22T11:57:53.000Z\",\r\n *          \"updated_at\": \"2018-02-22T11:57:53.000Z\"\r\n *      }\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"51.5058372\",\r\n *          \"longitude\": \"-0.1899126\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          },\r\n *          \"address\": \"Kensington Gardens, London W8 4PX, Reino Unido\",\r\n *          \"registered\": false,\r\n *          \"active\": false,\r\n *          \"created_at\": \"2018-02-22T11:57:53.000Z\",\r\n *          \"updated_at\": \"2018-02-22T11:57:53.000Z\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.list = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.list(req.client).then(\r\n            data => res.status(200).json({ vitaboxes: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id 05) Find\r\n * @apiGroup Vitabox\r\n * @apiName find\r\n * @apiDescription find a specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {string} id vitabox unique ID\r\n * @apiSuccess {decimal} latitude vitabox latitude, min: -90, max: 90 (based on google maps coordinates)\r\n * @apiSuccess {decimal} longitude vitabox longitude, min: -180, max: 180 (based on google maps coordinates)\r\n * @apiSuccess {string} address vitabox full address \r\n * @apiSuccess {boolean} sponsor flag indicating if the requester is sponsor of that vitabox (only if NOT admin)\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox (only if admin)\r\n * @apiSuccess {boolean} registered flag indicating if the vitabox was already registered (only if admin)\r\n * @apiSuccess {boolean} active flag indicating if the vitabox was already activated (only if admin)\r\n * @apiSuccess {datetime} created_at date of production (only if admin)\r\n * @apiSuccess {datetime} updated_at date of last update (only if admin)\r\n * @apiSuccessExample {json} Response example to common user:\r\n * {\r\n *  \"vitabox\": {\r\n *      \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *      \"latitude\": \"38.8976763\",\r\n *      \"longitude\": \"-77.0387185\",\r\n *      \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *      \"sponsor\": false\r\n *  }\r\n * }\r\n * @apiSuccessExample {json} Response example to admin:\r\n * {\r\n *  \"vitabox\": {\r\n *      \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *      \"latitude\": \"38.8976763\",\r\n *      \"longitude\": \"-77.0387185\",\r\n *      \"settings\":{\r\n *          \"cnfg1\": \"true\",\r\n *          \"cnfg2\": \"12345\",\r\n *          \"cnfg3\": \"some other config\"\r\n *      },\r\n *      \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *      \"created_at\": \"2018-02-19T11:38:32.000Z\",\r\n *      \"updated_at\": \"2018-02-23T16:12:47.000Z\"\r\n *  }\r\n * }\r\n */\r\nexports.find = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.find(req.client, req.params.id).then(\r\n            data => res.status(200).json({ vitabox: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /settings/vitabox 06) Get Settings\r\n * @apiGroup Vitabox\r\n * @apiName getSettings\r\n * @apiDescription returns the vitabox settings\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *      \"settings\":{\r\n *          \"cnfg1\": \"true\",\r\n *          \"cnfg2\": \"12345\",\r\n *          \"cnfg3\": \"some other config\"\r\n *      }\r\n * }\r\n */\r\nexports.getSettings = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"Vitabox\") {\r\n        res.status(200).json({ settings: req.client.settings })\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /settings/vitabox 07) Set Settings\r\n * @apiGroup Vitabox\r\n * @apiName setSettings\r\n * @apiDescription update vitabox settings\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox\r\n * @apiParam {json} settings configuration's structure to be updated\r\n * @apiParamExample {json} Response example:\r\n * {\r\n *      \"settings\":{\r\n *          \"cnfg1\": \"true\",\r\n *          \"cnfg2\": \"12345\",\r\n *          \"cnfg3\": \"some other config\"\r\n *      }\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.setSettings = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"Vitabox\") {\r\n        req.client.update({ settings: req.body.settings }).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id 08) Update\r\n * @apiGroup Vitabox\r\n * @apiName update\r\n * @apiDescription update a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {decimal} latitude min: -90, max: 90 (based on google maps coordinates)\r\n * @apiParam {decimal} longitude min: -180, max: 180 (based on google maps coordinates)\r\n * @apiParam {string} address full address with postal code\r\n * @apiParam {json} settings configuration's structure (only if admin)\r\n * @apiParamExample {json} Request example to common user:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\"\r\n *     }\r\n * @apiParamExample {json} Request example to admin:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          }\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.update(req.client, req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id 09) Delete\r\n * @apiGroup Vitabox\r\n * @apiName delete\r\n * @apiDescription list all users related with the vitabox if the requester is related too.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.delete(req.client, req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/user 10) Add User\r\n * @apiGroup Vitabox\r\n * @apiName addUser\r\n * @apiDescription add user to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} email email of the user to add\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"email\": \"user-example@some.thing\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.addUser = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        let flag = req.body.sponsor ? true : false;\r\n        business.user.findByEmail(req.body.email).then(\r\n            user => business.vitabox.addUser(req.client, req.params.id, user.id, flag).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(500).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/user 11) Get Users\r\n * @apiGroup Vitabox\r\n * @apiName getUsers\r\n * @apiDescription get users of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} users vitabox users list\r\n * @apiSuccess {string} id id of each user\r\n * @apiSuccess {string} email email of each user\r\n * @apiSuccess {datetime} since relationship date with the vitabox\r\n * @apiSuccess {boolean} sponsor flag indicating if the user is sponsor of the vitabox\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"users\": [\r\n *      {\r\n *          \"id\": \"585402ef-68dd-44a4-a44b-04152e659d11\",\r\n *          \"email\": \"donaldtrump@usa.com\",\r\n *          \"since\": \"2018-02-19T14:41:13.000Z\",\r\n *          \"sponsor\": false\r\n *      },\r\n *      {\r\n *          \"id\": \"78007a69-baa2-4b24-b936-234883811b6a\",\r\n *          \"email\": \"queenelizabeth@majesty.uk\",\r\n *          \"since\": \"2018-02-19T14:40:14.000Z\",\r\n *          \"sponsor\": true\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getUsers = (req, res) => {\r\n    if (req.client) {\r\n        business.vitabox.getUsers(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n            data => res.status(200).json({ users: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/user 12) Remove User\r\n * @apiGroup Vitabox\r\n * @apiName removeUser\r\n * @apiDescription remove user from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} user_id user unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"user_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeUser = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.removeUser(req.client, req.params.id, req.body.user_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/patient 13) Add Patient\r\n * @apiGroup Vitabox\r\n * @apiName addPatient\r\n * @apiDescription add patient to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} name patient name\r\n * @apiParam {date} birthdate patient birthdate (date only)\r\n * @apiParam {string} gender patient gender (must be 'male', 'female' or 'undefined')\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"José António\",\r\n *          \"birthdate\": \"1987-02-28\",\r\n *          \"gender\": \"male\"\r\n *     }\r\n * @apiSuccess {string} id new patient id\r\n */\r\nexports.addPatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.patient.createIfNotExists(req.body).then(\r\n            patient => business.vitabox.addPatient(req.client, req.params.id, patient.id).then(\r\n                () => res.status(200).json({ id: patient.id }),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/patient 14) Get Patients\r\n * @apiGroup Vitabox\r\n * @apiName getPatients\r\n * @apiDescription get patients of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} patients vitabox patients list\r\n * @apiSuccess {string} id id of each patient\r\n * @apiSuccess {date} birthdate patient birthdate (date only)\r\n * @apiSuccess {string} name name of each patient\r\n * @apiSuccess {string} gender patient gender (must be 'male', 'female' or 'undefined')\r\n * @apiSuccess {datetime} since relationship date with the vitabox \r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"patients\": [\r\n *      {\r\n *          \"id\": \"a77ea0fe-5e34-4189-9702-95cb69b4cd1d\",\r\n *          \"birthdate\": \"1987-02-28\",\r\n *          \"name\": \"José António\",\r\n *          \"gender\": \"male\",\r\n *          \"since\": \"2018-02-19T14:55:59.000Z\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getPatients = (req, res) => {\r\n    if (req.client) {\r\n        business.vitabox.getPatients(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n            data => res.status(200).json({ patients: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id/patient/disable 15) Disable Patient\r\n * @apiGroup Vitabox\r\n * @apiName disablePatient\r\n * @apiDescription disable patient from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} patient_id patient unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"patient_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly disabled\r\n */\r\nexports.disablePatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        if (req.client.admin) {\r\n            business.patient.disable(req.body.patient_id).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg));\r\n        } else {\r\n            business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n                () => business.patient.disable(req.body.patient_id).then(\r\n                    () => res.status(200).json({ result: true }),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg));\r\n        }\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id/patient/enable 16) Enable Patient\r\n * @apiGroup Vitabox\r\n * @apiName enablePatient\r\n * @apiDescription enable patient from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} patient_id patient unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"patient_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly enabled\r\n */\r\nexports.enablePatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        if (req.client.admin) {\r\n            business.patient.enable(req.body.patient_id).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg));\r\n        } else {\r\n            business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n                () => business.patient.enable(req.body.patient_id).then(\r\n                    () => res.status(200).json({ result: true }),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg));\r\n        }\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/patient 17) Remove Patient\r\n * @apiGroup Vitabox\r\n * @apiName removePatient\r\n * @apiDescription remove a patient from a specific vitabox if the requester is sponsor of it, all the patient records will became unavailable to the users of the vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} patient_id patient unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"patient_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removePatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.removePatient(req.client, req.params.id, req.body.patient_id).then(\r\n            () => business.record.withdrawsAccess({ 'patient_id': req.body.patient_id }).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/board 18) Add Board\r\n * @apiGroup Vitabox\r\n * @apiName addBoard\r\n * @apiDescription add board to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} location place where the board is located, if wearable is null\r\n * @apiParam {string} password board password\r\n * @apiParam {string} mac_address board MAC address\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"location\": \"kitchen\",\r\n *          \"password\":\"WkN1NNQiRD\",\r\n *          \"mac_addr\": \"00:12:4b:00:06:0d:60:fb\"\r\n *     }\r\n * @apiSuccess {Object} board return board inserted\r\n */\r\nexports.addBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.board.authenticate(req.body.mac_addr, req.body.password).then(\r\n            board => business.vitabox.addBoard(req.client, req.params.id, board.id).then(\r\n                () => business.board.setLocation(board, req.body.location ? req.body.location : null).then(\r\n                    () => res.status(200).json({ board: board }),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/board 19) Get Boards\r\n * @apiGroup Vitabox\r\n * @apiName getBoards\r\n * @apiDescription get boards of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} boards vitabox boards list\r\n * @apiSuccess {string} id id of each board\r\n * @apiSuccess {string} location place where the board is located (house division)\r\n * @apiSuccess {string} mac_addr board MAC address\r\n * @apiSuccess {boolean} active status of the board, only to admin, the other users will only receive boards with \"is_active=true\"\r\n * @apiSuccess {datetime} updated_at last update time\r\n * @apiSuccess {json} BoardModel model of each board, contains an id, type and name, the vitabox itself wiil receive the transdutors list of each model\r\n * @apiSuccessExample {json} Response example to admin:\r\n * {\r\n *  \"boards\": [\r\n *      {\r\n *          \"id\": \"983227e9-e1dc-410e-829d-1636627397ba\",\r\n *          \"location\": \"kitchen\",\r\n *          \"mac_addr\": \"00:19:B9:FB:E2:58\",\r\n *          \"active\": false,\r\n *          \"updated_at\": \"2018-02-22T15:25:50.000Z\",\r\n *          \"Boardmodel\": {\r\n *              \"id\": \"1920ed05-0a24-4611-b822-5da7a58ba8bb\",\r\n *              \"type\": \"environmental\",\r\n *              \"name\": \"Zolertia RE-Mote\"\r\n *          }\r\n *      }\r\n *  ]\r\n * }\r\n * @apiSuccessExample {json} Response example to vitabox:\r\n * {\r\n *  \"boards\": [\r\n *      {\r\n *          \"id\": \"983227e9-e1dc-410e-829d-1636627397ba\",\r\n *          \"location\": \"kitchen\",\r\n *          \"mac_addr\": \"00:19:B9:FB:E2:58\",\r\n *          \"updated_at\": \"2018-02-22T15:25:50.000Z\",\r\n *          \"node_id\": \"E258\"\r\n *          \"Boardmodel\": {\r\n *              \"id\": \"1920ed05-0a24-4611-b822-5da7a58ba8bb\",\r\n *              \"type\": \"environmental\",\r\n *              \"name\": \"Zolertia RE-Mote\",\r\n *              \"Sensors\": [\r\n *                  {\r\n *                      \"id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *                      \"transducer\": \"dht22\",\r\n *                      \"measure\": \"temperature\",\r\n *                      \"tag\": \"temp\",\r\n *                      \"min_acceptable\": \"10.00000\",\r\n *                      \"max_acceptable\": \"25.00000\",\r\n *                      \"min_possible\": \"-20.00000\",\r\n *                      \"max_possible\": \"50.00000\"\r\n *                  }\r\n *              ]\r\n *          }\r\n *      }\r\n *  ]\r\n * }\r\n * @apiSuccessExample {json} Response example to user:\r\n * {\r\n *  \"boards\": [\r\n *      {\r\n *          \"id\": \"983227e9-e1dc-410e-829d-1636627397ba\",\r\n *          \"location\": \"kitchen\",\r\n *          \"mac_addr\": \"00:19:B9:FB:E2:58\",\r\n *          \"updated_at\": \"2018-02-22T15:25:50.000Z\",\r\n *          \"Boardmodel\": {\r\n *              \"id\": \"1920ed05-0a24-4611-b822-5da7a58ba8bb\",\r\n *              \"type\": \"environmental\",\r\n *              \"name\": \"Zolertia RE-Mote\"\r\n *          }\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getBoards = (req, res) => {\r\n    if (req.client) {\r\n        business.vitabox.getBoards(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n            data => res.status(200).json({ boards: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id/board/disable 20) Disable Board\r\n * @apiGroup Vitabox\r\n * @apiName disableBoard\r\n * @apiDescription disable board from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} board_id board unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"board_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly disabled\r\n */\r\nexports.disableBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        if (req.client.admin) {\r\n            business.board.disable(req.body.board_id).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg));\r\n        } else {\r\n            business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n                () => business.board.disable(req.body.board_id).then(\r\n                    () => res.status(200).json({ result: true }),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg));\r\n        }\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id/board/enable 21) Enable Board\r\n * @apiGroup Vitabox\r\n * @apiName enableBoard\r\n * @apiDescription disable board from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} board_id board unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"board_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly enabled\r\n */\r\nexports.enableBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        if (req.client.admin) {\r\n            business.board.enable(req.body.board_id).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg));\r\n        } else {\r\n            business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n                () => business.board.enable(req.body.board_id).then(\r\n                    () => res.status(200).json({ result: true }),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg));\r\n        }\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/board 22) Remove Board\r\n * @apiGroup Vitabox\r\n * @apiName removeBoard\r\n * @apiDescription remove a board from a specific vitabox if the requester is sponsor of it, all the board records will became unavailable to the users of the vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} board_id board unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"board_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.removeBoard(req.client, req.params.id, req.body.board_id).then(\r\n            () => business.board.removeLocation(req.body.board_id).then(\r\n                () => business.record.withdrawsAccess({ 'board_id': req.body.board_id }).then(\r\n                    () => res.status(200).json({ result: true }),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n/**\r\n * @apiDefine auth\r\n * \r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiError {number} status http status code: 500 to business logic errors and 401 to unauthorized\r\n * @apiError {string} error error description\r\n */\r\n\r\n/**\r\n * @api {post} /register 01) Register user\r\n * @apiGroup Authentication\r\n * @apiName userRegister\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.register = (req, res) => {\r\n    business.user.register(req.body.email, req.body.password).then(\r\n        user => {\r\n            business.utils.createToken(user, req.connection.remoteAddress).then(\r\n                token => res.status(200).json({ token: token, user: user.id }),\r\n                error => res.status(error.code).send(error.msg));\r\n        },\r\n        error => res.status(500).send(error.msg)\r\n    );\r\n}\r\n\r\n/**\r\n * @api {post} /login 02) Login user\r\n * @apiGroup Authentication\r\n * @apiName userLogin\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.login = (req, res) => {\r\n    business.user.login(req.body.email, req.body.password).then(\r\n        user => {\r\n            business.utils.createToken(user, req.connection.remoteAddress).then(\r\n                token => res.status(200).json({ token: token, user: user.id }),\r\n                error => res.status(error.code).send(error.msg));\r\n        },\r\n        error => res.status(error.code).send(error.msg));\r\n}\r\n\r\n/**\r\n * @api {post} /chpass 03) Change password\r\n * @apiGroup Authentication\r\n * @apiName changePassword\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiParam {string} password new password\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.changePassword = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.user.changePassword(req.client, req.body.password).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /forgot 04) Forgot Password\r\n * @apiGroup Authentication\r\n * @apiName forgotPassword\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiSuccess {boolean} result return true if the email was sucessfuly sended\r\n */\r\nexports.forgotPassword = (req, res) => {\r\n    business.user.findByEmail(req.body.email).then(\r\n        user => business.user.createRecoverToken(user).then(\r\n            token => business.user.sendRecoverEmail(user, token).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg)),\r\n        error => {\r\n            if(error.code===404) res.status(200).json({ result: true })\r\n            else res.status(error.code).send(error.msg)\r\n        });\r\n}\r\n\r\n/**\r\n * @api {post} /reset 05) Reset password\r\n * @apiGroup Authentication\r\n * @apiName resetPassword\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} token valid email\r\n * @apiParam {string} password new password\r\n * @apiSuccess {boolean} result return true if was sucessfuly reseted\r\n */\r\nexports.resetPassword = (req, res) => {\r\n    business.user.verifyRecoverToken(req.body.token).then(\r\n        user => business.user.changePassword(user, req.body.password).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg)),\r\n        error => res.status(error.code).send(error.msg));\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /sensor 01) Create\r\n * @apiGroup Sensor\r\n * @apiName createSensor\r\n * @apiDescription create a new sensor.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} transducer transducer name\r\n * @apiParam {string} measure transducer measure\r\n * @apiParam {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiParam {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiParam {decimal} min_possible minimum possible value to sensor\r\n * @apiParam {decimal} max_possible maximum possible value to sensor\r\n * @apiParamExample {json} Request example:\r\n *      {\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n * @apiSuccess {string} id created sensor id\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.create(req.body).then(\r\n            sensor => res.status(200).json({ id: sensor.id }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /sensor 02) List\r\n * @apiGroup Sensor\r\n * @apiName listSensors\r\n * @apiDescription list all sensors. \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n *\r\n * @apiPermission admin\r\n * @apiSuccess {array} models list of sensors\r\n * @apiSuccess {string} transducer transducer name\r\n * @apiSuccess {string} measure transducer measure\r\n * @apiSuccess {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiSuccess {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiSuccess {decimal} min_possible minimum possible value to sensor\r\n * @apiSuccess {decimal} max_possible maximum possible value to sensor\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"sensors\": [\r\n *      {\r\n *          \"transducer\": \"dht22\",\r\n *          \"measure\":\"temperature\",\r\n *          \"min_acceptable\": \"10\",\r\n *          \"max_acceptable\": \"25\",\r\n *          \"min_possible\": \"-20\",\r\n *          \"max_possible\": \"50\"\r\n *      },\r\n *      {\r\n *          \"transducer\": \"mq-7\",\r\n *          \"measure\":\"carbon_monoxide\",\r\n *          \"min_acceptable\": \"2\",\r\n *          \"max_acceptable\": \"10\",\r\n *          \"min_possible\": \"10\",\r\n *          \"max_possible\": \"500\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.list = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.list().then(\r\n            sensors => res.status(200).json({ sensors: sensors }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /sensor/:id 03) Update\r\n * @apiGroup Sensor\r\n * @apiName updateSensor\r\n * @apiDescription update a sensor.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor id to update\r\n * @apiParam {string} transducer transducer name\r\n * @apiParam {string} measure transducer measure\r\n * @apiParam {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiParam {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiParam {decimal} min_possible minimum possible value to sensor\r\n * @apiParam {decimal} max_possible maximum possible value to sensor\r\n * @apiParamExample {json} Request example:\r\n *      {\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.update(req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /sensor/:id 04) Delete\r\n * @apiGroup Sensor\r\n * @apiName deleteSensor\r\n * @apiDescription remove a sensor\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor ID to delete\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.remove(req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /record 1) Receive\r\n * @apiGroup Record\r\n * @apiName createRecord\r\n * @apiDescription receive data from vitabox about it sensors\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox\r\n * @apiParam {decimal} value value catched\r\n * @apiParam {datetime} datetime moment when the value was catched\r\n * @apiParam {string} patient_id patient unique ID related to the value, may be null or omitted\r\n * @apiParam {string} board_id board unique ID related to the value\r\n * @apiParam {string} sensor_id sensor unique ID related to the value\r\n * @apiParamExample {json} Request example:\r\n * {\r\n *  \"records\":[\r\n *      {\r\n *          \"value\": 10,\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"value\": 13,\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly recorded\r\n * @apiSuccess {string} error return \"\" if all records were valid and a error message if some records has invalid parameters\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"result\":true,\r\n *  \"error\": \"some records were discarded by invalid parameters: value, datetime, sensor_id and board_id are required\"\r\n * }\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"Vitabox\") {\r\n        console.log(req.body.records);\r\n        business.vitabox.updateLastCommit(req.client).then(\r\n            () => business.board.updateLastCommit(req.body.records).then(\r\n                () => business.sensor.updateLastCommit(req.body.records).then(\r\n                    () => business.record.create(req.body.records).then(\r\n                        result => {\r\n                            if (result.has_invalid) res.status(200).json({ result: true, error: \"some records were discarded by invalid parameters, value, datetime, sensor_id and board_id are required\" });\r\n                            else res.status(200).json({ result: true, error: \"\" });\r\n                        }, error => res.status(error.code).json(error.msg)),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /record/patient/:pid/sensor/:sid/page/:page 2) List by Patient\r\n * @apiGroup Record\r\n * @apiName listRecordsByPatient\r\n * @apiDescription list all records by patient\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :pid patient unique ID\r\n * @apiParam {string} :sid sensor unique ID\r\n * @apiParam {string} :page each page has 25 records, page must be greater or equal to 1\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {string} patient_id patient unique ID related to the value\r\n * @apiSuccess {string} board_id board unique ID related to the value\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listByPatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.record.listByPatientSensor(req.client, req.params.pid, req.params.sid, req.params.page).then(\r\n            data => res.status(200).json({ records: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /record/board/:bid/sensor/:sid/page/:page 3) List by Board\r\n * @apiGroup Record\r\n * @apiName listRecordsByBoard\r\n * @apiDescription list all records by board\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :bid board unique ID\r\n * @apiParam {string} :sid sensor unique ID\r\n * @apiParam {string} :page each page has 25 records, page must be greater or equal to 1\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {string} patient_id patient unique ID related to the value\r\n * @apiSuccess {string} board_id board unique ID related to the value\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listByBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.record.listByBoardSensor(req.client, req.params.bid, req.params.sid, req.params.page).then(\r\n            data => res.status(200).json({ records: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /record/sensor/:id/page/:page 4) List by Sensor\r\n * @apiGroup Record\r\n * @apiName listRecordsBySensor\r\n * @apiDescription list all records by sensor\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor unique ID\r\n * @apiParam {string} :page each page has 25 records, page must be greater or equal to 1\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {string} patient_id patient unique ID related to the value\r\n * @apiSuccess {string} board_id board unique ID related to the value\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listBySensor = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.record.listBySensor(req.client, req.params.id, req.params.page).then(\r\n            data => res.status(200).json({ records: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","var business = require('../../business/index').v1_0_0,\r\n    fs = require(\"fs\"),\r\n    path = require(\"path\");\r\n\r\nexports.fileUpload = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.utils.upload().then(\r\n            upload => upload(req, res, (err) => {\r\n                if (err) res.status(500).send(\"An error occurred when uploading\");\r\n                else res.status(200).json({ result: true });\r\n            }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\nexports.fileDownload = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.utils.download(req.params.id).then(\r\n            download => {\r\n                res.writeHead(200, download.header);\r\n                res.end(download.file, 'binary');\r\n            }, error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n// To development\r\n\r\nexports.destroyAll = (req, res) => {\r\n    business.utils.deleteAll().then(\r\n        () => res.status(200).json({ success: true }),\r\n        error => res.status(500).send(error.msg)\r\n    );\r\n}\r\n\r\nexports.testDb = (req, res) => {\r\n    business.utils.deleteAll().then(\r\n        () => business.utils.testSeed().then(\r\n            res.status(200).json({ success: true }),\r\n            error => res.status(500).send(error.msg)),\r\n        error => res.status(500).send(error.msg));\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /board 08) Create Board\r\n * @apiGroup Board\r\n * @apiName create a new Board\r\n * @apiDescription register a new board on the system\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} model model id of the board\r\n * @apiParam {string} mac_address board MAC address\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"model\":\"5d93585b-f511-4fa8-b69e-692c2474d5e8\",\r\n *          \"mac_addr\": \"00:12:4b:00:06:0d:60:fb\"\r\n *     }\r\n * @apiSuccess {string} id return the id\r\n * @apiSuccess {string} mac_addr return the mac address\r\n * @apiSuccess {string} password return the generated password\r\n * @apiSuccessExample {json} Response example:\r\n *     {\r\n *          \"id\":\"c293462b-fac1-4f67-b69e-47841274d5e8\",\r\n *          \"mac_addr\": \"00:12:4b:00:06:0d:60:fb\",\r\n *          \"password\": \"aj34Ah1DA1\"\r\n *     }\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.board.create(req.body).then(\r\n            result => res.status(200).json(result),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /boardmodel 01) Create Model\r\n * @apiGroup Board\r\n * @apiName createBoardModel\r\n * @apiDescription create a new board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} name board model name\r\n * @apiParam {string} type board type, must be 'environmental', 'wearable' or 'non-wearable'\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"Zolertia RE-Mote\",\r\n *          \"type\": \"environmental\"\r\n *     }\r\n * @apiSuccess {string} id created board model id\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.create(req.body).then(\r\n            model => res.status(200).json({ id: model.id }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n* @api {get} /boardmodel 02) List Models\r\n* @apiGroup Board\r\n* @apiName listsBoardsModel\r\n* @apiDescription list all board models. \r\n* @apiVersion 1.0.0\r\n* @apiUse box\r\n*\r\n* @apiPermission admin\r\n* @apiSuccess {array} models list of board models\r\n* @apiSuccess {string} id id of each board model\r\n* @apiSuccess {string} type type of the model (must be 'environmental', 'wearable' or 'non-wearable')\r\n* @apiSuccess {string} name name of the model\r\n* @apiSuccessExample {json} Response example:\r\n* {\r\n*  \"models\": [\r\n*      {\r\n*          \"id\": \"5d93585b-f511-4fa8-b69e-692c2474d5e8\",\r\n*          \"type\": \"non-wearable\",\r\n*          \"name\": \"MySignals\"\r\n*      },\r\n*      {\r\n*          \"id\": \"d4710130-4c8c-4ade-96c7-0d5c00738eda\",\r\n*          \"type\": \"environmental\",\r\n*          \"name\": \"Zolertia RE-Mote\"\r\n*      }\r\n*  ]\r\n* }\r\n*/\r\nexports.list = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.list().then(\r\n            models => res.status(200).json({ models: models }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /boardmodel/:id 03) Update Model\r\n * @apiGroup Board\r\n * @apiName updateBoardModel\r\n * @apiDescription update a board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model id to update\r\n * @apiParam {string} name board model name\r\n * @apiParam {string} type board type, must be 'environmental', 'wearable' or 'non-wearable'\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"Zolertia RE-Mote\",\r\n *          \"type\": \"environmental\"\r\n *     }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.update(req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /boardmodel/:id 04) Delete Model\r\n * @apiGroup Board\r\n * @apiName deleteBoardModel\r\n * @apiDescription remove a board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model id to delete\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.remove(req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /boardmodel/:id/sensor 05) Add Sensor\r\n * @apiGroup Board\r\n * @apiName setSensors\r\n * @apiDescription add sensors to a board model\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {array} sensor_id sensors unique ID\r\n * @apiParamExample {json} Request example:\r\n * {\r\n *  \"sensor_id\": \"75a60f5f-ef3d-4556-9cdd-981894c8f1dc\"\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.setSensor = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.setSensor(req.params.id, req.body.sensor_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} boardmodel/:id/sensor 06) Get Sensors\r\n * @apiGroup Board\r\n * @apiName getSensors\r\n * @apiDescription list sensors of a board model\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model unique ID\r\n * @apiSuccess {array} models list of sensors\r\n * @apiSuccess {string} transducer transducer name\r\n * @apiSuccess {string} measure transducer measure\r\n * @apiSuccess {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiSuccess {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiSuccess {decimal} min_possible minimum possible value to sensor\r\n * @apiSuccess {decimal} max_possible maximum possible value to sensor\r\n * @apiSuccessExample {json} Request example:\r\n * {\r\n *  \"sensors\": [\r\n *      {\r\n *           \"id\": \"e783b552-567f-499b-b480-9d373fe62a17\"\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getSensors = (req, res) => {\r\n    if (req.client && req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.getSensors(req.params.id).then(\r\n            sensors => res.status(200).json({ sensors: sensors }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} boardmodel/:id/sensor 07) Remove Sensor\r\n * @apiGroup Board\r\n * @apiName removeSensor\r\n * @apiDescription remove sensor from a board model \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model unique ID\r\n * @apiParam {string} sensor_id sensor to remove ID\r\n * @apiParamExample {json} Response example:\r\n * {\r\n *  \"sensor_id\": \"00397579-0a11-42ee-b522-b25e11630eda\"\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeSensor = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.removeSensor(req.params.id, req.body.sensor_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","module.exports.v1_0_0 = {\r\n    'board_model': require('./v1.0.0/board_model'),\r\n    'board': require('./v1.0.0/board'),\r\n    'manage':require('./v1.0.0/manage'),\r\n    'record': require('./v1.0.0/record'),\r\n    'sensor':require('./v1.0.0/sensor'),\r\n    'user': require('./v1.0.0/user'),\r\n    'vitabox': require('./v1.0.0/vitabox'),\r\n}","// ROUTES FOR OUR API\r\n// =============================================================================\r\nmodule.exports = (app) => {\r\n\r\n    var controllers = require('./controllers/index'),\r\n        versioning = require('express-routes-versioning')();\r\n\r\n    app\r\n        /*________________________________________________\r\n        *_____________________USERS_______________________\r\n        *_________________________________________________*/\r\n        .post('/register', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.register,\r\n            \"2.0.0\": (req, res) => res.json({ error: 'invalid version' })\r\n        }))\r\n        .post('/login', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.login,\r\n        }))\r\n        .post('/chpass', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.changePassword,\r\n        }))\r\n        .post('/forgot', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.forgotPassword,\r\n        }))\r\n        .post('/reset', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.resetPassword,\r\n        }))\r\n        /*________________________________________________\r\n        *____________________ VITABOX_____________________\r\n        *_________________________________________________*/\r\n        .post('/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.create\r\n        }))\r\n        .get('/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.list\r\n        }))\r\n        .get('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.find\r\n        }))\r\n        .get('/settings/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getSettings\r\n        }))\r\n        .put('/settings/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.setSettings\r\n        }))\r\n        .put('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.update\r\n        }))\r\n        .delete('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.delete\r\n        }))\r\n        .post('/vitabox/:id/register', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.register\r\n        }))\r\n        .post('/vitabox/:id/connect', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.requestToken\r\n        }))\r\n        .get('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getUsers\r\n        }))\r\n        .post('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addUser\r\n        }))\r\n        .delete('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removeUser\r\n        }))\r\n        .post('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addPatient\r\n        }))\r\n        .get('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getPatients\r\n        }))\r\n        .put('/vitabox/:id/patient/disable', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.disablePatient\r\n        }))\r\n        .put('/vitabox/:id/patient/enable', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.enablePatient\r\n        }))\r\n        .delete('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removePatient\r\n        }))\r\n        .post('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addBoard\r\n        }))\r\n        .get('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getBoards\r\n        }))\r\n        .put('/vitabox/:id/board/disable', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.disableBoard\r\n        }))\r\n        .put('/vitabox/:id/board/enable', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.enableBoard\r\n        }))\r\n        .delete('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removeBoard\r\n        }))\r\n        /*________________________________________________\r\n        *__________________ BOARD MODEL___________________\r\n        *_________________________________________________*/\r\n        .post('/boardmodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.create\r\n        }))\r\n        .get('/boardmodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.list\r\n        }))\r\n        .put('/boardmodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.update\r\n        }))\r\n        .delete('/boardmodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.delete\r\n        }))\r\n        .post('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.setSensor\r\n        }))\r\n        .get('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.getSensors\r\n        }))\r\n        .delete('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.removeSensor\r\n        }))\r\n        .post('/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board.create\r\n        }))\r\n        /*________________________________________________\r\n        *_____________________SENSOR______________________\r\n        *_________________________________________________*/\r\n        .post('/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.create\r\n        }))\r\n        .get('/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.list\r\n        }))\r\n        .put('/sensor/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.update\r\n        }))\r\n        .delete('/sensor/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.delete\r\n        }))\r\n        /*________________________________________________\r\n        *____________________RECORDS______________________\r\n        *_________________________________________________*/\r\n        .post('/record', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.create\r\n        }))\r\n        .get('/record/patient/:pid/sensor/:sid/page/:page', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listByPatient\r\n        }))\r\n        .get('/record/board/:bid/sensor/:sid/page/:page', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listByBoard\r\n        }))\r\n        .get('/record/sensor/:id/page/:page', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listBySensor\r\n        }))\r\n        /*________________________________________________\r\n        *_____________________FILES_______________________\r\n        *_________________________________________________*/\r\n        .post('/file', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.fileUpload\r\n        }))\r\n        .get('/file/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.fileDownload\r\n        }))\r\n        /*________________________________________________\r\n        *_____________________TRASH_______________________\r\n        *_________________________________________________*/\r\n        .get('/destroy', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.destroyAll\r\n        }))\r\n        .get('/testdb', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.testDb\r\n        }))\r\n\r\n\r\n    app.all('*', (req, res) => {\r\n        res.status(404).json({ 'message': 'Route could not be found' });\r\n    });\r\n};","var db = require('../../models/index'),\r\n  utils = require('./utils');\r\n\r\nexports.create = function () {\r\n  return new Promise((resolve, reject) => {\r\n    let password = utils.generatePassword(10);\r\n    let encrypted = utils.encrypt([password]);\r\n    if (!encrypted.error) {\r\n      db.Vitabox.create({ password: encrypted.value[0] }).then(\r\n        vitabox => resolve({ id: vitabox.id, password: password }),\r\n        error => reject({ code: 500, msg: error.message }));\r\n    }\r\n    else reject({ code: 500, msg: encrypted.error.message });\r\n  });\r\n}\r\n\r\nexports.register = function (vitabox_id, attributes) {\r\n  return new Promise((resolve, reject) => {\r\n    if (attributes.address) db.Vitabox.findOne({ where: { id: vitabox_id, registered: false } }).then(\r\n      vitabox => {\r\n        if (vitabox) vitabox.update({ registered: true, address: attributes.address, longitude: attributes.longitude, latitude: attributes.latitude }).then(\r\n          () => resolve(vitabox),\r\n          error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"Vitabox already registered or doesn´t exist\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n    else reject({ code: 500, msg: \"Vitabox address must be defined\" });\r\n  });\r\n}\r\n\r\nexports.requestToken = function (vitabox_id, password) {\r\n  return new Promise((resolve, reject) => {\r\n    let encrypted = utils.encrypt([password]);\r\n    if (!encrypted.error) db.Vitabox.findOne({ where: { password: encrypted.value[0], id: vitabox_id } }).then(\r\n      vitabox => {\r\n        if (vitabox) if (vitabox.registered)\r\n          if (!vitabox.active) vitabox.update({ active: true }).then(\r\n            vitabox => resolve(vitabox),\r\n            error => reject({ code: 500, msg: error.message }));\r\n          else resolve(vitabox);\r\n        else reject({ code: 401, msg: \"vitabox not registered\" });\r\n        else reject({ code: 401, msg: \"invalid credentials\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n    else reject({ code: 500, msg: encrypted.error.message });\r\n  });\r\n}\r\n\r\nexports.list = function (current_user) {\r\n  return new Promise((resolve, reject) => {\r\n    if (current_user.admin)\r\n      db.Vitabox.findAll({ attributes: { exclude: ['password'] } }).then(\r\n        list => resolve(list),\r\n        error => reject({ code: 500, msg: error.message }));\r\n    else current_user.getVitaboxes({ attributes: ['id', 'latitude', 'longitude', 'address'], where: { active: true } }).then(\r\n      list => {\r\n        list.forEach(element => {\r\n          element.dataValues.sponsor = element.dataValues.UserVitabox.dataValues.sponsor;\r\n          delete element.dataValues.UserVitabox;\r\n        })\r\n        resolve(list);\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.find = function (current_user, vitabox_id) {\r\n  return new Promise((resolve, reject) => {\r\n    if (current_user.admin)\r\n      db.Vitabox.findById(vitabox_id, { attributes: { exclude: ['password'] } }).then(\r\n        vitabox => {\r\n          if (vitabox) resolve(vitabox);\r\n          else reject({ code: 500, msg: \"Vitabox not found\" });\r\n        }, error => reject({ code: 500, msg: error.message }));\r\n    else current_user.getVitaboxes({\r\n      attributes: ['id', 'latitude', 'longitude', 'address'],\r\n      where: { id: vitabox_id, active: true }\r\n    }).then(vitabox => {\r\n      if (vitabox.length > 0) {\r\n        vitabox[0].dataValues.sponsor = vitabox[0].dataValues.UserVitabox.dataValues.sponsor;\r\n        delete vitabox[0].dataValues.UserVitabox;\r\n        resolve(vitabox[0]);\r\n      } else reject({ code: 500, msg: \"Vitabox not found\" });\r\n    }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.update = function (current_user, vitabox_id, attributes) {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.update({ latitude: attributes.latitude, longitude: attributes.longitude, address: attributes.address, settings: attributes.settings }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => vitabox.update({ latitude: attributes.latitude, longitude: attributes.longitude, address: attributes.address }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message })),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found \" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.delete = function (current_user, vitabox_id) {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.destroy().then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => vitabox.destroy().then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message })),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.addUser = function (current_user, vitabox_id, user_id, is_sponsor) {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.addUser(user_id, { through: { sponsor: is_sponsor } }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => vitabox.addUser(user_id, { through: { sponsor: is_sponsor } }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message })),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.getUsers = function (is_user, client, vitabox_id) {\r\n  return new Promise((resolve, reject) => {\r\n    if (is_user) db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (client.admin)\r\n          vitabox.getUsers({ attributes: ['id', 'email'] }).then(\r\n            users => {\r\n              users.forEach(user => {\r\n                user.email = utils.decrypt(user.email);\r\n                user.dataValues.since = user.dataValues.UserVitabox.dataValues.created_at;\r\n                user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n                delete user.dataValues.UserVitabox;\r\n              });\r\n              resolve(users);\r\n            },\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isUser(vitabox, client).then(\r\n          () => vitabox.getUsers({ attributes: ['id', 'email'] }).then(\r\n            users => {\r\n              users.forEach(user => {\r\n                user.email = utils.decrypt(user.email);\r\n                user.dataValues.since = user.dataValues.UserVitabox.dataValues.created_at;\r\n                user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n                delete user.dataValues.UserVitabox;\r\n              });\r\n              resolve(users);\r\n            },\r\n            error => reject({ code: 500, msg: error.message })),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n    else client.getUsers({ attributes: ['id', 'email'] }).then(\r\n      users => {\r\n        users.forEach(user => {\r\n          user.email = utils.decrypt(user.email);\r\n          user.dataValues.since = user.dataValues.UserVitabox.dataValues.created_at;\r\n          user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n          delete user.dataValues.UserVitabox;\r\n        });\r\n        resolve(users);\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.removeUser = function (current_user, vitabox_id, user_id) {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.removeUser(user_id).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => {\r\n            vitabox.removeUser(user_id).then(\r\n              () => resolve(),\r\n              error => reject({ code: 500, msg: error.message }));\r\n          }, error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message })\r\n    );\r\n  });\r\n}\r\n\r\nexports.addPatient = function (current_user, vitabox_id, patient_id) {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.addPatient(patient_id).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => {\r\n            vitabox.addPatient(patient_id).then(\r\n              () => resolve(),\r\n              error => reject({ code: 500, msg: error.message }));\r\n          }, error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message })\r\n    );\r\n  });\r\n}\r\n\r\nexports.getPatients = function (is_user, client, vitabox_id) {\r\n  return new Promise((resolve, reject) => {\r\n    if (is_user) if (client.admin)\r\n      db.Patient.findAll({ where: { vitabox_id: vitabox_id }, attributes: ['id', 'birthdate', 'active', 'name', 'gender', ['created_at', 'since']] }).then(\r\n        patients => {\r\n          patients.forEach(patient => patient.name = utils.decrypt(patient.name));\r\n          resolve(patients);\r\n        }, error => reject({ code: 500, msg: error.message }));\r\n    else db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) _isUser(vitabox, client).then(\r\n          () => db.Patient.findAll({ where: { vitabox_id: vitabox_id, active: true }, attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since']] }).then(\r\n            patients => {\r\n              patients.forEach(patient => patient.name = utils.decrypt(patient.name));\r\n              resolve(patients);\r\n            }, error => reject({ code: 500, msg: error.message })),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n    else client.getPatients({ where: { active: true }, attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since']] }).then(\r\n      patients => {\r\n        patients.forEach(patient => {\r\n          patient.name = utils.decrypt(patient.name);\r\n          delete patient.dataValues.VitaboxId;\r\n        });\r\n        resolve(patients);\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.removePatient = function (current_user, vitabox_id, patient_id) {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.removePatient(patient_id).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => {\r\n            vitabox.removePatient(patient_id).then(\r\n              () => resolve(),\r\n              error => reject({ code: 500, msg: error.message }));\r\n          }, error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.addBoard = function (current_user, vitabox_id, board_id) {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.addBoard(board_id).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => {\r\n            vitabox.addBoard(board_id).then(\r\n              () => resolve(),\r\n              error => reject({ code: 500, msg: error.message }));\r\n          }, error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.getBoards = function (is_user, client, vitabox_id) {\r\n  return new Promise((resolve, reject) => {\r\n    if (is_user) if (client.admin)\r\n      db.Board.findAll({\r\n        where: { vitabox_id: vitabox_id }, attributes: ['id', 'location', 'mac_addr', 'active', 'last_commit', 'updated_at'],\r\n        include: [{ model: db.Boardmodel, attributes: ['id', 'type', 'name'] }]\r\n      }).then(\r\n        boards => resolve(boards),\r\n        error => reject({ code: 500, msg: error.message }));\r\n    else db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) _isUser(vitabox, client).then(\r\n          () => db.Board.findAll({\r\n            where: { vitabox_id: vitabox_id }, attributes: ['id', 'location', 'mac_addr', 'updated_at'],\r\n            include: [{ model: db.Boardmodel, attributes: ['id', 'type', 'name'] }]\r\n          }).then(\r\n            boards => resolve(boards),\r\n            error => reject({ code: 500, msg: error.message })),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n    else client.getBoards({\r\n      where: { active: true }, attributes: ['id', 'location', 'mac_addr', 'node_id', 'updated_at'],\r\n      include: [{\r\n        model: db.Boardmodel, attributes: ['id', 'type', 'name'],\r\n        include: [{\r\n          model: db.Sensor, attributes: { exclude: ['created_at', 'updated_at'] }\r\n        }]\r\n      }],\r\n    }).then(\r\n      boards => {\r\n        boards.forEach(board => board.Boardmodel.Sensors.forEach(sensor => delete sensor.dataValues.BoardSensor));\r\n        resolve(boards);\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.removeBoard = function (current_user, vitabox_id, board_id) {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.removeBoard(board_id).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => {\r\n            vitabox.removeBoard(board_id).then(\r\n              () => resolve(),\r\n              error => reject({ code: 500, msg: error.message }));\r\n          }, error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.verifySponsor = function (current_user, vitabox_id) {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) _isSponsor(vitabox, current_user).then(\r\n          () => resolve(),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.updateLastCommit = (vitabox) => {\r\n  return new Promise((resolve, reject) => {\r\n    vitabox.update({ last_commit: new Date() }).then(\r\n      () => resolve(),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\n// ________________________________________________________________________\r\n// Private\r\n// ________________________________________________________________________\r\n_isSponsor = (vitabox, user) => {\r\n  return new Promise((resolve, reject) => {\r\n    vitabox.getUsers({ where: { id: user.id } }).then(\r\n      users => {\r\n        if (users.length > 0 && users[0].UserVitabox.sponsor) resolve();\r\n        else reject({ code: 401, msg: \"Unauthorized\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\n_isUser = (vitabox, user) => {\r\n  return new Promise((resolve, reject) => {\r\n    vitabox.hasUser(user).then(\r\n      success => {\r\n        if (success) resolve();\r\n        else reject({ code: 401, msg: \"Unauthorized\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}","module.exports = require(\"nodemailer\");","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.register = (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        if (/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d$@$!%*#?&-.]{8,}$/.test(password))\r\n            if (/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/.test(email)) {\r\n                let encrypted = utils.encrypt([email, password]);\r\n                if (!encrypted.error) db.User.create({ email: encrypted.value[0], password: encrypted.value[1] }).then(\r\n                    new_user => resolve(new_user),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: encrypted.error.message });\r\n            } else reject({ code: 500, msg: \"invalid email\" });\r\n        else reject({ code: 500, msg: \"invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\" });\r\n    });\r\n}\r\n\r\nexports.login = (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n        let encrypted = utils.encrypt([email, password]);\r\n        if (!encrypted.error) db.User.findOne({ where: { email: encrypted.value[0], password: encrypted.value[1] } }).then(\r\n            user => {\r\n                if (user) resolve(user);\r\n                else reject({ code: 500, msg: \"email and password don't match\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: encrypted.error.message });\r\n    });\r\n}\r\n\r\nexports.changePassword = (user, password) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d$@$!%*#?&-.]{8,}$/.test(password)) {\r\n            let encrypted = utils.encrypt([password]);\r\n            if (!encrypted.error) user.update({ password: encrypted.value[0] }).then(\r\n                () => resolve(),\r\n                error => reject({ code: 500, msg: error.message }));\r\n            else reject({ code: 500, msg: encrypted.error.message });\r\n        } else reject({ code: 500, msg: \"invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\" });\r\n    });\r\n}\r\n\r\nexports.findByEmail = (email) => {\r\n    return new Promise((resolve, reject) => {\r\n        let encrypted = utils.encrypt([email]);\r\n        if (!encrypted.error) db.User.findOne({ where: { email: encrypted.value[0] } }).then(\r\n            user => {\r\n                if (user) resolve(user);\r\n                else reject({ code: 404, msg: \"user not registered\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: encrypted.error.message });\r\n    });\r\n}\r\n\r\nexports.createRecoverToken = (user) => {\r\n    return new Promise((resolve, reject) => {\r\n        let token = utils.generatePassword(12);\r\n        let encrypted = utils.encrypt([token]);\r\n        if (!encrypted.error) user.update({ resetPasswordToken: encrypted.value[0], resetPasswordExpires: Date.now() + 3600000 }).then(\r\n            () => resolve(token),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: encrypted.error.message });\r\n    });\r\n}\r\n\r\nexports.sendRecoverEmail = (user, token) => {\r\n    return new Promise((resolve, reject) => {\r\n        var nodemailer = require('nodemailer');\r\n        var transporter = nodemailer.createTransport({\r\n            host: 'smtp.gmail.com',\r\n            port: 465,\r\n            secure: true,\r\n            auth: {\r\n                user: 'vitamailtester@gmail.com',\r\n                pass: '1qazXSW\"'\r\n            }\r\n        });\r\n        var mailOptions = {\r\n            to: utils.decrypt(user.email),\r\n            from: 'vitamailtester@gmail.com',\r\n            subject: 'Vitasenior Password Reset',\r\n            html: '<h2>Reset Password</h2><hr><p>You are receiving this because you (or someone else) have requested the reset of the password for your account.</p><p>Please use this code to reset your password: <b>' + token + '</b></p><p>If you did not request this, please ignore this email and your password will remain unchanged.</p>'\r\n        };\r\n        transporter.sendMail(mailOptions, (err) => {\r\n            if (err) reject({ code: 500, msg: err.message });\r\n            else resolve();\r\n        });\r\n    });\r\n}\r\n\r\nexports.verifyRecoverToken = (token) => {\r\n    return new Promise((resolve, reject) => {\r\n        let encrypted = utils.encrypt([token]);\r\n        if (!encrypted.error) db.User.findOne({ where: { resetPasswordToken: encrypted.value[0] } }).then(\r\n            user => {\r\n                if (user && user.resetPasswordExpires > Date.now()) {\r\n                    user.update({ resetPasswordToken: null }).then(\r\n                        () => resolve(user),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                }\r\n                else reject({ code: 500, msg: \"invalid code, please verify your email or request again\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: encrypted.error.message });\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensor.create({ transducer: attributes.transducer, measure: attributes.measure, tag: attributes.measure.substr(0, 4), min_acceptable: attributes.min_acceptable, max_acceptable: attributes.max_acceptable, min_possible: attributes.min_possible, max_possible: attributes.max_possible }).then(\r\n      sensor => resolve(sensor),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.list = (attributes) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensor.findAll({ attributes: { exclude: ['created_at', 'updated_at'] } }).then(\r\n      sensors => resolve(sensors),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.update = (sensor_id, attributes) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensor.findById(sensor_id).then(\r\n      sensor => {\r\n        if (sensor) sensor.update({ transducer: attributes.transducer, measure: attributes.measure, min_acceptable: attributes.min_acceptable, max_acceptable: attributes.max_acceptable, min_possible: attributes.min_possible, max_possible: attributes.max_possible }).then(\r\n          () => resolve(),\r\n          error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"sensor not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.remove = (sensor_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensor.findById(sensor_id).then(\r\n      sensor => {\r\n        if (sensor) sensor.destroy().then(\r\n          () => resolve(),\r\n          error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"sensor not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.updateLastCommit = (records) => {\r\n  return new Promise((resolve, reject) => {\r\n    let promises = [...new Set(records.map(x => x.sensor_id))].map(x => {\r\n      return new Promise((resolve, reject) => {\r\n        db.Sensor.findById(x).then(\r\n          sensor => {\r\n            if (sensor) sensor.update({ last_commit: new Date() }).then(\r\n              () => resolve(),\r\n              error => reject({ code: 500, msg: error.message }));\r\n            else reject({ code: 500, msg: \"Sensor not found\" });\r\n          }, error => reject({ code: 500, msg: error.message }));\r\n      })\r\n    });\r\n    Promise.all(promises).then(\r\n      () => resolve(),\r\n      error => reject({ code: 500, msg: error }));\r\n  });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (body) => {\r\n    return new Promise((resolve, reject) => {\r\n        var valid_records = [], has_invalid = false;\r\n        body.forEach(element => {\r\n            if (element.value !== null && element.value !== undefined && element.datetime)\r\n                valid_records.push({\r\n                    value: element.value,\r\n                    datetime: element.datetime,\r\n                    patient_id: (element.patient_id && element.patient_id !== \"\") ? element.patient_id : null,\r\n                    board_id: element.board_id,\r\n                    sensor_id: element.sensor_id\r\n                });\r\n            else has_invalid = true\r\n        });\r\n        db.RecordTemp.insertMany(valid_records, (error, doc) => {\r\n            if (error) reject({ code: 500, msg: error.message });\r\n            else resolve({ records: valid_records, has_invalid: has_invalid });\r\n        });\r\n    });\r\n}\r\n\r\nexports.listByPatientSensor = (current_user, patient_id, sensor_id, page) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (current_user.admin) _getRecordsWhere({ 'patient_id': patient_id, 'sensor_id': sensor_id }, page).then(\r\n            docs => resolve(docs),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else db.Patient.findById(patient_id, { include: [{ model: db.Vitabox }] }).then(\r\n            patient => {\r\n                if (patient.Vitabox) patient.Vitabox.hasUser(current_user).then(\r\n                    success => {\r\n                        if (success) _getRecordsWhere({ 'patient_id': patient_id, 'sensor_id': sensor_id }, page).then(\r\n                            docs => resolve(docs),\r\n                            error => reject({ code: 500, msg: error.message }));\r\n                        else reject({ code: 401, msg: \"Unauthorized\" });\r\n                    }, error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 401, msg: \"This patient doesn't belong to the vitabox\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.listByBoardSensor = (current_user, board_id, sensor_id, page) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (current_user.admin) _getRecordsWhere({ 'board_id': board_id, 'sensor_id': sensor_id }, page).then(\r\n            docs => resolve(docs),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else db.Board.findById(board_id, { include: [{ model: db.Vitabox }] }).then(\r\n            board => {\r\n                if (board.Vitabox) board.Vitabox.hasUser(current_user).then(\r\n                    success => {\r\n                        if (success) _getRecordsWhere({ 'board_id': board_id, 'sensor_id': sensor_id }, page).then(\r\n                            docs => resolve(docs),\r\n                            error => reject({ code: 500, msg: error.message }));\r\n                        else reject({ code: 401, msg: \"Unauthorized\" });\r\n                    }, error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 401, msg: \"This board doesn't belong to the vitabox\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.listBySensor = (sensor_id, page) => {\r\n    return new Promise((resolve, reject) => {\r\n        _getRecordsWhere({ 'sensor_id': sensor_id }, page).then(\r\n            docs => resolve(docs),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.withdrawsAccess = (obj) => {\r\n    return new Promise((resolve, reject) => {\r\n        _getAllRecordsWhere(obj).then(\r\n            docs => db.RecordOld.insertMany(docs, (error, doc) => {\r\n                if (error) reject({ code: 500, msg: error.message });\r\n                else _removeRecordsWhere(obj).then(\r\n                    () => resolve(),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n            }),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\n_getRecordsWhere = (obj, page) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.RecordTemp.find().where(obj).sort('-datetime').select(\"-_id\").skip((page - 1) * 25).limit(25).exec((error, temp_doc) => {\r\n            if (error) reject(error);\r\n            else {\r\n                if (temp_doc.length === 25) resolve(temp_doc);\r\n                else db.RecordTemp.count(obj, (error, count) => {\r\n                    if (error) reject(error);\r\n                    else db.RecordCheck.find().where(obj).sort('-datetime').select(\"-_id\").skip((page - Math.floor(count / 25) - 1) * 25).limit(25 - temp_doc.length).exec((error, check_doc) => {\r\n                        if (error) reject(error);\r\n                        else resolve(temp_doc.concat(check_doc));\r\n                    });\r\n                })\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n_getAllRecordsWhere = (obj) => {\r\n    return new Promise((resolve, reject) => {\r\n        let promise_temp = new Promise((resolve, reject) => {\r\n            db.RecordTemp.find().where(obj).exec((error, doc) => {\r\n                if (error) reject(error);\r\n                else resolve(doc);\r\n            });\r\n        });\r\n        let promise_check = new Promise((resolve, reject) => {\r\n            db.RecordCheck.find().where(obj).exec((error, doc) => {\r\n                if (error) reject(error);\r\n                else resolve(doc);\r\n            });\r\n        });\r\n        Promise.all([promise_temp, promise_check]).then(\r\n            docs => resolve(docs[0].concat(docs[1])),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\n_removeRecordsWhere = (obj) => {\r\n    return new Promise((resolve, reject) => {\r\n        let promise_temp = new Promise((resolve, reject) => {\r\n            db.RecordTemp.remove(obj).exec(error => {\r\n                if (error) reject(error);\r\n                else resolve();\r\n            });\r\n        });\r\n        let promise_check = new Promise((resolve, reject) => {\r\n            db.RecordCheck.remove(obj).exec(error => {\r\n                if (error) reject(error);\r\n                else resolve();\r\n            });\r\n        });\r\n        Promise.all([promise_temp, promise_check]).then(\r\n            () => resolve(),\r\n            error => reject(error));\r\n    });\r\n}","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.createIfNotExists = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        if ([\"male\", \"female\", \"undefined\"].includes(attributes.gender))\r\n            if (/[A-Z][a-zA-Z\\'áéíóõãÁÉÍÓ][^#&<>\\\"~;$^%{}?!*+_\\-»«@£§€ªº,0-9]{1,50}$/.test(attributes.name)) {\r\n                let encrypted = utils.encrypt([attributes.name.replace(/\\b\\w/g, l => l.toUpperCase())]);\r\n                if (!encrypted.error) {\r\n                    db.Patient.findOne({ where: { name: encrypted.value[0], birthdate: attributes.birthdate } }).then(\r\n                        patient => {\r\n                            if (patient) resolve(patient);\r\n                            else db.Patient.create({\r\n                                name: encrypted.value[0],\r\n                                birthdate: attributes.birthdate,\r\n                                gender: attributes.gender,\r\n                                height: attributes.height\r\n                            }).then(\r\n                                patient => resolve(patient),\r\n                                error => reject({ code: 500, msg: error.message })\r\n                            ), error => reject({ code: 500, msg: error.message })\r\n                        }, error => reject({ code: 500, msg: error.message }));\r\n                } else reject({ code: 500, msg: encrypted.error.message });\r\n            } else reject({ code: 500, msg: \"invalid name\" });\r\n        else reject({ code: 500, msg: \"invalid gender, must be 'male', 'female' or 'undefined'\" });\r\n    });\r\n}\r\n\r\nexports.disable = (patient_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Patient.findById(patient_id).then(\r\n            patient => patient.update({ active: false }).then(\r\n                () => resolve(),\r\n                error => reject({ code: 500, msg: error.message })),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.enable = (patient_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Patient.findById(patient_id).then(\r\n            patient => patient.update({ active: true }).then(\r\n                () => resolve(),\r\n                error => reject({ code: 500, msg: error.message })),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}","var db = require('../../models/index'),\r\n  utils = require('./utils');\r\n\r\nexports.create = (attributes) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (attributes.mac_addr) {\r\n      let password = utils.generatePassword(10);\r\n      let encrypted = utils.encrypt([password]);\r\n      if (!encrypted.error) db.Board.create({\r\n        mac_addr: attributes.mac_addr.toLowerCase(),\r\n        boardmodel_id: attributes.model,\r\n        node_id: attributes.mac_addr.substr(attributes.mac_addr.lastIndexOf(\":\") - 2).replace(\":\", \"\").toLowerCase(),\r\n        password: encrypted.value[0]\r\n      }).then(\r\n        board => resolve({ id: board.id, mac_addr: board.mac_addr, password: password }),\r\n        error => reject({ code: 500, msg: error.message }));\r\n      else reject({ code: 500, msg: encrypted.error.message });\r\n    } else reject({ code: 500, msg: \"MAC address is required\" });\r\n  });\r\n}\r\n\r\nexports.findByMAC = (mac_addr) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findOne({ where: { mac_addr: mac_addr } }).then(\r\n      board => {\r\n        if (board) resolve(board);\r\n        else reject({ code: 500, msg: \"board not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.authenticate = (mac_addr, password) => {\r\n  return new Promise((resolve, reject) => {\r\n    let encrypted = utils.encrypt([password]);\r\n    if (!encrypted.error) db.Board.findOne({\r\n      where: { mac_addr: mac_addr, password: encrypted.value[0] },\r\n      attributes: ['id', 'location', 'mac_addr', 'active', ['created_at', 'since']],\r\n      include: [{ model: db.Boardmodel, attributes: ['id', 'type', 'name'] }, { model: db.Vitabox }]\r\n    }).then(\r\n      board => {\r\n        if (board) if (!board.Vitabox) resolve(board);\r\n        else reject({ code: 500, msg: \"board already in use\" });\r\n        else reject({ code: 500, msg: \"MAC address and password don't match\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n    else reject({ code: 500, msg: encrypted.error.message });\r\n  });\r\n}\r\n\r\nexports.setLocation = (board, location) => {\r\n  return new Promise((resolve, reject) => {\r\n    board.update({ location: location, active: true }).then(\r\n      () => resolve(),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.removeLocation = (board_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findById(board_id).then(\r\n      board => board.update({ location: null, active: false }).then(\r\n        () => resolve(),\r\n        error => reject({ code: 500, msg: error.message })),\r\n      error => reject({ code: 500, msg: error.message }))\r\n  });\r\n}\r\n\r\nexports.enable = (board_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findById(board_id).then(\r\n      board => board.update({ active: true }).then(\r\n        () => resolve(),\r\n        error => reject({ code: 500, msg: error.message })),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.disable = (board_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findById(board_id).then(\r\n      board => board.update({ active: false }).then(\r\n        () => resolve(),\r\n        error => reject({ code: 500, msg: error.message })),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.updateLastCommit = (records) => {\r\n  return new Promise((resolve, reject) => {\r\n    let promises = [...new Set(records.map(x => x.board_id))].map(x => {\r\n      return new Promise((resolve, reject) => {\r\n        db.Board.findById(x).then(\r\n          board => {\r\n            if (board) board.update({ last_commit: new Date() }).then(\r\n              () => resolve(),\r\n              error => reject({ code: 500, msg: error.message }));\r\n            else reject({ code: 500, msg: \"Board not found\" });\r\n          }, error => reject({ code: 500, msg: error.message }));\r\n      })\r\n    });\r\n    Promise.all(promises).then(\r\n      () => resolve(),\r\n      error => reject({ code: 500, msg: error }));\r\n  });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.create({ type: attributes.type, name: attributes.name }).then(\r\n            model => resolve(model),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.list = () => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findAll({ attributes: ['id', 'type', 'name'] }).then(\r\n            models => resolve(models),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.update = (board_model_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.update({ type: attributes.type, name: attributes.name }).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.remove = (board_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.destroy().then(\r\n                    () => resolve(),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.setSensor = (board_model_id, sensor_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (sensor_id)\r\n            db.Boardmodel.findById(board_model_id).then(\r\n                model => {\r\n                    if (model) model.hasSensor(sensor_id).then(\r\n                        success => {\r\n                            if (!success) model.addSensor(sensor_id).then(\r\n                                () => resolve(),\r\n                                error => reject({ code: 500, msg: error.message }));\r\n                            else reject({ code: 500, msg: \"sensor is already associated\" });\r\n                        }, error => reject({ code: 500, msg: error.message }));\r\n                    else reject({ code: 500, msg: \"board model not found\" });\r\n                }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"invalid sensor id\" });\r\n    });\r\n}\r\n\r\nexports.getSensors = (board_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.getSensors({ attributes: { exclude: ['created_at', 'updated_at'] } }).then(\r\n                    sensors => {\r\n                        sensors.forEach(element => delete element.dataValues.BoardSensor);\r\n                        resolve(sensors)\r\n                    },\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.removeSensor = (board_model_id, sensor_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (sensor_id)\r\n            db.Boardmodel.findById(board_model_id).then(\r\n                model => {\r\n                    if (model) model.removeSensors(sensor_id).then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                    else reject({ code: 500, msg: \"board model not found\" });\r\n                }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"invalid sensor id\" });\r\n    });\r\n}","module.exports = require(\"body-parser\");","// MIDDLEWARE FOR OUR API\r\n// =============================================================================\r\nmodule.exports = (app) => {\r\n  var bodyParser = require('body-parser'),\r\n    utils = require('./business/index').v1_0_0.utils,\r\n    multer = require('multer');\r\n  var upload = multer({ dest: require(\"path\").resolve(__dirname, '..', 'files') });\r\n\r\n  // middleware to use for all requests\r\n  app.use(bodyParser.urlencoded({ extended: true }));\r\n  app.use(bodyParser.json());\r\n  app.use((req, res, next) => {\r\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization, Accept-Version\");\r\n    res.header(\"Access-Control-Allow-Methods\", \"POST, GET, PUT, DELETE, OPTIONS\");\r\n    res.header('Access-Control-Allow-Credentials', true);\r\n    if (process.env.NODE_ENV === \"development\") console.log(\"\\x1b[36m\" + req.method, req.url + \"\\x1b[0m\");\r\n\r\n    if (req.method === \"OPTIONS\") {\r\n      return res.send(200);\r\n    }\r\n    if (req.headers.authorization) {\r\n      utils.validateToken(req.headers.authorization, req.connection.remoteAddress).then(\r\n        client => {\r\n          if (client) req.client = client;\r\n          else req.client = null;\r\n          next();\r\n        },\r\n        error => { req.client = null; next(); });\r\n    } else { req.client = null; next(); }\r\n  });\r\n}","module.exports = require(\"express\");","module.exports = require(\"os\");","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","module.exports = require(\"mime-types\");","module.exports = require(\"jsonwebtoken\");","var mongoose = require('mongoose');\r\nvar schema = new mongoose.Schema({\r\n  datetime: {\r\n    type: Date,\r\n    required: true,\r\n    default: Date.now()\r\n  },\r\n  message: {\r\n    type: String,\r\n    required: false\r\n  },\r\n  vitabox_id: {\r\n    type: String,\r\n    required: false\r\n  },\r\n  seen: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: false\r\n  },\r\n  reported: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: false\r\n  }\r\n\r\n}, { versionKey: false });\r\n\r\nmodule.exports = mongoose.model('Warning', schema);","var mongoose = require('mongoose');\r\nvar schema = new mongoose.Schema({\r\n  datetime: {\r\n    type: Date,\r\n    required: true,\r\n    default: Date.now()\r\n  },\r\n  message: {\r\n    type: String,\r\n    required: false\r\n  },\r\n  object_id: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  is_vitabox: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: false\r\n  },\r\n  is_board: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: false\r\n  },\r\n  is_sensor: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: false\r\n  }\r\n}, { versionKey: false });\r\n\r\nmodule.exports = mongoose.model('Error', schema);","var mongoose = require('mongoose');\r\nvar schema = new mongoose.Schema({\r\n  user_id: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  datetime: {\r\n    type: Date,\r\n    required: true,\r\n    default: Date.now()\r\n  },\r\n  message: {\r\n    type: String,\r\n    required: false\r\n  }\r\n}, { versionKey: false });\r\n\r\nmodule.exports = mongoose.model('Log', schema);","var mongoose = require('mongoose');\r\nvar schema = new mongoose.Schema({\r\n    value: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    datetime: {\r\n        type: Date,\r\n        required: true,\r\n        default: Date.now()\r\n    },\r\n    patient_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    board_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    sensor_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    analyzed: { type: Boolean }\r\n}, { versionKey: false });\r\n\r\nmodule.exports = mongoose.model('RecordOld', schema);","var mongoose = require('mongoose');\r\nvar schema = new mongoose.Schema({\r\n    value: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    datetime: {\r\n        type: Date,\r\n        required: true,\r\n        default: Date.now()\r\n    },\r\n    patient_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    board_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    sensor_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    analyzed: {\r\n        type: Boolean,\r\n        default: false\r\n    }\r\n}, { versionKey: false });\r\n\r\nmodule.exports = mongoose.model('RecordTemp', schema);","var mongoose = require('mongoose');\r\nvar schema = new mongoose.Schema({\r\n    value: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    datetime: {\r\n        type: Date,\r\n        required: true,\r\n        default: Date.now()\r\n    },\r\n    patient_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    board_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    sensor_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    analyzed: {\r\n        type: Boolean,\r\n        default: true\r\n    }\r\n}, { versionKey: false });\r\n\r\nmodule.exports = mongoose.model('RecordCheck', schema);","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Vitabox = sequelize.define('Vitabox', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    latitude: {\r\n      type: DataTypes.DECIMAL(10, 7),\r\n      allowNull: true,\r\n      defaultValue: null,\r\n      validate: {\r\n        min: {\r\n          args: -90,\r\n          msg: \"latitude minimum acceptable value is -90\"\r\n        },\r\n        max: {\r\n          args: 90,\r\n          msg: \"latitude maximum acceptable value is 90\"\r\n        }\r\n      }\r\n    },\r\n    longitude: {\r\n      type: DataTypes.DECIMAL(10, 7),\r\n      allowNull: true,\r\n      defaultValue: null,\r\n      validate: {\r\n        min: {\r\n          args: -180,\r\n          msg: \"longitude minimum acceptable value is -180\"\r\n        },\r\n        max: {\r\n          args: 180,\r\n          msg: \"longitude maximum acceptable value is 180\"\r\n        }\r\n      }\r\n    },\r\n    settings: {\r\n      type: DataTypes.JSON,\r\n      allowNull: true,\r\n      defaultValue: null,\r\n    },\r\n    address: {\r\n      type: DataTypes.STRING,\r\n      defaultValue: null,\r\n      validate: {\r\n        notEmpty: {\r\n          args: true,\r\n          msg: \"address must be defined\"\r\n        }\r\n      }\r\n    },\r\n    registered: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    active: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    connected: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    last_commit: {\r\n      type: DataTypes.DATE,\r\n      allowNull: true,\r\n      defaultValue: null\r\n    }\r\n  }, { underscored: true });\r\n\r\n  Vitabox.associate = function (models) {\r\n    models.Vitabox.belongsToMany(models.User, { through: models.UserVitabox });\r\n    models.Vitabox.hasMany(models.Patient);\r\n    models.Vitabox.hasMany(models.Board);\r\n  };\r\n\r\n  return Vitabox;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var User = sequelize.define('User', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    email: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      unique: {\r\n        args: true,\r\n        msg: 'email already registered'\r\n      },\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    admin: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    resetPasswordToken: { type: DataTypes.STRING },\r\n    resetPasswordExpires: { type: DataTypes.DATE },\r\n  }, {\r\n      scopes: {\r\n        profile: { attributes: { exclude: ['password'] } }\r\n      },\r\n      underscored: true\r\n    });\r\n\r\n  User.associate = function (models) {\r\n    models.User.belongsToMany(models.Vitabox, { through: models.UserVitabox });\r\n  };\r\n\r\n  return User;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var UserVitabox = sequelize.define('UserVitabox', {\r\n    sponsor: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    }\r\n  }, { underscored: true });\r\n\r\n  return UserVitabox;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Sensor = sequelize.define('Sensor', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    transducer: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      defaultValue: '',\r\n      validate: {\r\n        notEmpty: {\r\n          msg: \"transducer name must be defined\"\r\n        }\r\n      }\r\n    },\r\n    measure: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      defaultValue: '',\r\n      validate: {\r\n        notEmpty: {\r\n          msg: \"measure init must be defined\"\r\n        }\r\n      }\r\n    },\r\n    tag: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      defaultValue: '',\r\n      validate: {\r\n        notEmpty: {\r\n          msg: \"measure tag must be defined\"\r\n        }\r\n      }\r\n    },\r\n    min_acceptable: {\r\n      type: DataTypes.DECIMAL(10, 5),\r\n      allowNull: false,\r\n      validate: {\r\n        isDecimal: {\r\n          args: true,\r\n          msg: \"minimum acceptable value must be defined\"\r\n        }\r\n      }\r\n    },\r\n    max_acceptable: {\r\n      type: DataTypes.DECIMAL(10, 5),\r\n      allowNull: false,\r\n      validate: {\r\n        isDecimal: {\r\n          args: true,\r\n          msg: \"maximum acceptable value must be defined\"\r\n        }\r\n      }\r\n    },\r\n    min_possible: {\r\n      type: DataTypes.DECIMAL(10, 5),\r\n      allowNull: false,\r\n      validate: {\r\n        isDecimal: {\r\n          args: true,\r\n          msg: \"minimum possible value must be defined\"\r\n        }\r\n      }\r\n    },\r\n    max_possible: {\r\n      type: DataTypes.DECIMAL(10, 5),\r\n      validate: {\r\n        isDecimal: {\r\n          args: true,\r\n          msg: \"maximum possible value must be defined\"\r\n        }\r\n      }\r\n    },\r\n    last_values: {\r\n      type: DataTypes.JSON,\r\n      defaultValue: [],\r\n    },\r\n    last_commit: {\r\n      type: DataTypes.DATE,\r\n      allowNull: true,\r\n      defaultValue: null\r\n    },\r\n    deviation_range: {\r\n      type: DataTypes.DECIMAL(10, 5),\r\n      defaultValue: 0,\r\n    },\r\n  }, { underscored: true });\r\n\r\n  Sensor.associate = function (models) {\r\n    models.Sensor.belongsToMany(models.Boardmodel, { through: \"BoardSensor\" });\r\n  };\r\n\r\n  return Sensor;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Patient = sequelize.define('Patient', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        birthdate: {\r\n            type: DataTypes.DATEONLY,\r\n            allowNull: false\r\n        },\r\n        name: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"patient name must be defined\"\r\n                }\r\n            }\r\n        },\r\n        gender: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"patient gender must be defined\"\r\n                }\r\n            }\r\n        },\r\n        active: {\r\n            type: DataTypes.BOOLEAN,\r\n            defaultValue: true\r\n        },\r\n        weight:{\r\n            type: DataTypes.FLOAT(5, 2),\r\n            allowNull: true,\r\n            defaultValue: null,\r\n            validate: {\r\n              min: {\r\n                args: 10,\r\n                msg: \"minimum weight acceptable value is 10kg\"\r\n              },\r\n              max: {\r\n                args: 300,\r\n                msg: \"maximum weight acceptable value is 300kg\"\r\n              }\r\n            }\r\n        },\r\n        height:{\r\n            type: DataTypes.FLOAT(5, 2),\r\n            allowNull: false,\r\n            validate: {\r\n              min: {\r\n                args: 0.5,\r\n                msg: \"minimum height acceptable value is 0.5m\"\r\n              },\r\n              max: {\r\n                args: 3,\r\n                msg: \"maximum height acceptable value is 3m\"\r\n              }\r\n            }\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Patient.associate = function (models) {\r\n        models.Patient.belongsTo(models.Vitabox);\r\n    };\r\n\r\n    return Patient;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Board = sequelize.define('Board', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    location: {\r\n      type: DataTypes.STRING,\r\n      allowNull: true,\r\n      defaultValue: null\r\n    },\r\n    mac_addr: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      unique: {\r\n        args: true,\r\n        msg: 'MAC address already in use'\r\n      },\r\n      validate: {\r\n        is: {\r\n          args: /^([0-9a-f]{2}[:]){7}([0-9a-f]{2})$/,\r\n          msg: \"MAC addres must be valid\"\r\n        }\r\n      }\r\n    },\r\n    node_id: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      validate: {\r\n        is: {\r\n          args: /^([0-9a-f]{4})$/,\r\n          msg: \"Node id invalid\"\r\n        }\r\n      }\r\n    },\r\n    active: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    last_commit: {\r\n      type: DataTypes.DATE,\r\n      allowNull: true,\r\n      defaultValue: null\r\n    },\r\n    last_error: {\r\n      type: DataTypes.DATE,\r\n      allowNull: true,\r\n      defaultValue: null\r\n    }\r\n  }, { underscored: true });\r\n\r\n  Board.associate = function (models) {\r\n    models.Board.belongsTo(models.Vitabox);\r\n    models.Board.belongsTo(models.Boardmodel);\r\n  };\r\n\r\n  return Board;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Boardmodel = sequelize.define('Boardmodel', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    type: {\r\n      type: DataTypes.ENUM,\r\n      values: [\"environmental\", \"wearable\", \"non-wearable\"],\r\n      validate: {\r\n        isIn: {\r\n          args: [[\"environmental\", \"wearable\", \"non-wearable\"]],\r\n          msg: \"board type must be environmental, wearable or non-wearable\"\r\n        }\r\n      }\r\n    },\r\n    name: {\r\n      type: DataTypes.STRING,\r\n      unique: {\r\n        args: true,\r\n        msg: 'board model already registered'\r\n      },\r\n      allowNull: false,\r\n      defaultValue: '',\r\n      validate: {\r\n        notEmpty: {\r\n          msg: \"board model must be defined\"\r\n        }\r\n      }\r\n    }\r\n  }, { underscored: true });\r\n\r\n  Boardmodel.associate = function (models) {\r\n    models.Boardmodel.hasMany(models.Board);\r\n    models.Boardmodel.belongsToMany(models.Sensor, { through: \"BoardSensor\" });\r\n  };\r\n\r\n  return Boardmodel;\r\n};","module.exports = require(\"sequelize\");","module.exports = require(\"dotenv\");","module.exports = require(\"cluster\");","// server.js\r\n\r\n// BASE SETUP\r\n// =============================================================================\r\nvar cluster = require('cluster');\r\n// Get the env variables from .env\r\nrequire('dotenv').config();\r\n\r\nif (cluster.isMaster) {\r\n    var db = require('./app/models/index');\r\n    db.sequelize.sync().then(() => require('./app/models/seed').seed(db).then(() => {\r\n        console.log('\\x1b[32m%s\\x1b[0m.', '(PLAIN) Connection established with MongoDB and MySQL');\r\n\r\n        let workers = [];\r\n        for (var i = 0; i < require('os').cpus().length; i++) workers.push(cluster.fork());\r\n        console.log('(PLAIN) Master cluster created ' + workers.length + ' workers...');\r\n\r\n        cluster.on('exit', (worker, code, signal) => { console.log('(PLAIN) Worker ' + worker.process.pid + ' died -> Starting a new worker'); cluster.fork(); });\r\n    }, error => { console.log('Unable to seed Databases.', error.message); process.exit(1); }),\r\n        error => { console.log('Unable to connect to Databases.', error); process.exit(1); });\r\n} else {\r\n    var express = require('express'),\r\n        path = require('path');\r\n    // START THE SERVER\r\n    // =============================================================================\r\n    // define our app using express\r\n    var app = express();\r\n    // middleware for all routes\r\n    require('./app/middleware')(app);\r\n    // Present SPA\r\n    app.use('/', express.static(path.resolve(__dirname, 'public')));\r\n    // Present Documentation\r\n    app.use('/docs', express.static(path.resolve(__dirname, 'docs')));\r\n    // define routes\r\n    require('./app/router')(app);\r\n    //initialize a simple http server\r\n    const server = require('http').createServer();\r\n    // start http server\r\n    server.on('request', app);\r\n    // Define the listenning port\r\n    var port = process.env.PORT || 8080;\r\n    server.listen(port, () => {\r\n        // https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\r\n        console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server http listening on port', port);\r\n    });\r\n    // var https = require('https'), fs = require(\"fs\");\r\n    // //set options to https\r\n    // const options = {\r\n    //     key: fs.readFileSync(__dirname + \"/app/keys/key.pem\"),\r\n    //     cert: fs.readFileSync(__dirname + \"/app/keys/cert.pem\"),\r\n    //     ca: fs.readFileSync(__dirname + \"/app/keys/ca.pem\"),\r\n    //     dhparam: fs.readFileSync(__dirname + \"/app/keys/dhparam.pem\")\r\n    // };\r\n    // // start https server\r\n    // https.createServer(options, app).listen(8080, () => {\r\n    //     console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server https listening on port', port);\r\n    // });\r\n}"],"sourceRoot":""}