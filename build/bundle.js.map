{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/models/index.js","webpack:///./app/business/index.js","webpack:///./app/business/v1.0.0/utils.js","webpack:///./app/models/seed.js","webpack:///external \"mongoose\"","webpack:///external \"body-parser\"","webpack:///external \"express-routes-versioning\"","webpack:///./app/controllers/v1.0.0/vitabox.js","webpack:///./app/controllers/v1.0.0/user.js","webpack:///./app/controllers/v1.0.0/sensor.js","webpack:///./app/controllers/v1.0.0/record.js","webpack:///./app/controllers/v1.0.0/manage.js","webpack:///./app/controllers/v1.0.0/board.js","webpack:///./app/business/v1.0.0/vitabox.js","webpack:///./app/business/v1.0.0/user.js","webpack:///./app/business/v1.0.0/sensor.js","webpack:///./app/business/v1.0.0/record.js","webpack:///./app/business/v1.0.0/patient.js","webpack:///./app/business/v1.0.0/board.js","webpack:///./app/business/v1.0.0/board_model.js","webpack:///./app/controllers/v1.0.0/board_model.js","webpack:///./app/controllers/index.js","webpack:///./app/router.js","webpack:///external \"path\"","webpack:///external \"express\"","webpack:///external \"os\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"fs\"","webpack:///external \"crypto\"","webpack:///./app/models/mongodb/record.js","webpack:///./app/models/mysql/vitabox.js","webpack:///./app/models/mysql/user.js","webpack:///./app/models/mysql/user_vitabox.js","webpack:///./app/models/mysql/sensor.js","webpack:///./app/models/mysql/patient.js","webpack:///./app/models/mysql/board.js","webpack:///./app/models/mysql/board_model.js","webpack:///external \"sequelize\"","webpack:///external \"dotenv\"","webpack:///external \"cluster\"","webpack:///./server.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","mongoose","Sequelize","mongo_uri","mysql_uri","operatorsAliases","$eq","Op","eq","$ne","ne","$gte","gte","$gt","gt","$lte","lte","$lt","lt","$not","not","$in","in","$notIn","notIn","$is","is","$like","like","$notLike","notLike","$iLike","iLike","$notILike","notILike","$regexp","regexp","$notRegexp","notRegexp","$iRegexp","iRegexp","$notIRegexp","notIRegexp","$between","between","$notBetween","notBetween","$overlap","overlap","$contains","contains","$contained","contained","$adjacent","adjacent","$strictLeft","strictLeft","$strictRight","strictRight","$noExtendRight","noExtendRight","$noExtendLeft","noExtendLeft","$and","and","$or","or","$any","any","$all","all","$values","values","$col","col","connect","sequelize","logging","db","Boardmodel","Board","Patient","Sensor","UserVitabox","User","Vitabox","Record","keys","forEach","modelName","associate","connection","v1_0_0","boardmodel","board","patient","record","sensor","user","utils","vitabox","__dirname","crypto","fs","jwt","encrypt","to_encrypt","Promise","resolve","reject","element","index","cipher","createCipher","process","env","ALGORITHM","KEY","update","Buffer","from","final","decrypt","to_decrypt","decipher","createDecipher","createToken","obj","client_address","private_key","readFileSync","toString","undefined","code","msg","payload","id","role","constructor","options","expiresIn","algorithm","subject","sign","error","token","message","validateToken","public_key","algorithms","verify","findById","then","generatePassword","sk","Math","floor","random","deleteAll","raw","query","truncate","remove","testSeed","seed","count","where","admin","encrypted","bulkCreate","email","password","users","create","latitude","longitude","address","registered","active","addUsers","type","board_models","vitabox_id","boardmodel_id","location","mac_addr","boards","transducer","measure","min_acceptable","max_acceptable","min_possible","max_possible","sensors","addSensors","insertMany","datetime","board_id","sensor_id","doc","birthdate","gender","patients","addPatients","require","business","req","res","client","data","status","json","send","register","findByEmail","body","params","addUser","result","remoteAddress","list","vitaboxes","find","getSettings","settings","setSettings","delete","flag","sponsor","getUsers","removeUser","user_id","addPatient","getPatients","removePatient","patient_id","addBoard","authenticate","setLocation","getBoards","removeBoard","login","changePassword","old_password","new_password","records","invalid","listByPatient","listByBoard","listBySensor","destroyAll","success","testDb","attributes","findOne","current_user","findAll","exclude","getVitaboxes","dataValues","length","_isSponsor","destroy","is_sponsor","through","is_user","since","created_at","_isUser","VitaboxId","console","log","include","model","Sensors","BoardSensor","node_id","substr","lastIndexOf","replace","hasUser","test","new_user","to_insert","push","equals","select","exec","encrypted_name","toLowerCase","findByMAC","models","board_model_id","setSensor","hasSensor","addSensor","getSensors","removeSensor","removeSensors","board_model","manage","app","controllers","versioning","post","1.0.0","2.0.0","put","schema","Schema","Number","required","Date","default","now","String","versionKey","DataTypes","define","UUID","defaultValue","UUIDV4","primaryKey","STRING","allowNull","DECIMAL","validate","min","args","max","JSON","notEmpty","BOOLEAN","underscored","belongsToMany","hasMany","unique","scopes","profile","isDecimal","DATEONLY","ENUM","isIn","belongsTo","cluster","config","isMaster","sync","cpus","fork","on","worker","signal","pid","exit","express","path","router","bodyParser","use","urlencoded","extended","next","header","method","headers","authorization","static","port","PORT","listen"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 40);\n","var mongoose = require('mongoose'),\r\n    Sequelize = require('sequelize');\r\n\r\nvar mongo_uri = \"\", mysql_uri = \"\";\r\n\r\nif (process.env.NODE_ENV===\"production\") {\r\n    mongo_uri = 'mongodb://localhost:27017/myproject';\r\n    mysql_uri = 'mysql://api:123qwe@localhost:3306/node';\r\n}else{\r\n    mongo_uri = 'mongodb://localhost:27017/test';\r\n    mysql_uri = 'mysql://api:123qwe@localhost:3306/test';\r\n}\r\n\r\nconst operatorsAliases = {\r\n    $eq: Sequelize.Op.eq,\r\n    $ne: Sequelize.Op.ne,\r\n    $gte: Sequelize.Op.gte,\r\n    $gt: Sequelize.Op.gt,\r\n    $lte: Sequelize.Op.lte,\r\n    $lt: Sequelize.Op.lt,\r\n    $not: Sequelize.Op.not,\r\n    $in: Sequelize.Op.in,\r\n    $notIn: Sequelize.Op.notIn,\r\n    $is: Sequelize.Op.is,\r\n    $like: Sequelize.Op.like,\r\n    $notLike: Sequelize.Op.notLike,\r\n    $iLike: Sequelize.Op.iLike,\r\n    $notILike: Sequelize.Op.notILike,\r\n    $regexp: Sequelize.Op.regexp,\r\n    $notRegexp: Sequelize.Op.notRegexp,\r\n    $iRegexp: Sequelize.Op.iRegexp,\r\n    $notIRegexp: Sequelize.Op.notIRegexp,\r\n    $between: Sequelize.Op.between,\r\n    $notBetween: Sequelize.Op.notBetween,\r\n    $overlap: Sequelize.Op.overlap,\r\n    $contains: Sequelize.Op.contains,\r\n    $contained: Sequelize.Op.contained,\r\n    $adjacent: Sequelize.Op.adjacent,\r\n    $strictLeft: Sequelize.Op.strictLeft,\r\n    $strictRight: Sequelize.Op.strictRight,\r\n    $noExtendRight: Sequelize.Op.noExtendRight,\r\n    $noExtendLeft: Sequelize.Op.noExtendLeft,\r\n    $and: Sequelize.Op.and,\r\n    $or: Sequelize.Op.or,\r\n    $any: Sequelize.Op.any,\r\n    $all: Sequelize.Op.all,\r\n    $values: Sequelize.Op.values,\r\n    $col: Sequelize.Op.col\r\n};\r\n\r\n// Create a new conntection to MongoDB server\r\nmongoose.connect(mongo_uri);\r\n// Create a new connection to MySQL server\r\nvar sequelize = new Sequelize(mysql_uri, { operatorsAliases: operatorsAliases, logging: false });\r\n\r\nconst db = {\r\n    'Boardmodel': require('./mysql/board_model')(sequelize, Sequelize),\r\n    'Board': require('./mysql/board')(sequelize, Sequelize),\r\n    'Patient': require('./mysql/patient')(sequelize, Sequelize),\r\n    'Sensor': require('./mysql/sensor')(sequelize, Sequelize),\r\n    'UserVitabox': require('./mysql/user_vitabox')(sequelize, Sequelize),\r\n    'User': require('./mysql/user')(sequelize, Sequelize),\r\n    'Vitabox': require('./mysql/vitabox')(sequelize, Sequelize),\r\n\r\n    'Record': require('./mongodb/record')\r\n}\r\n\r\nObject.keys(db).forEach(modelName => {\r\n    if (db[modelName].associate) db[modelName].associate(db);\r\n});\r\n\r\ndb.sequelize = sequelize;\r\ndb.mongoose = mongoose.connection;\r\n\r\nmodule.exports = db;","module.exports.v1_0_0 = {\r\n    'boardmodel':require('./v1.0.0/board_model'),\r\n    'board': require('./v1.0.0/board'),\r\n    'patient':require('./v1.0.0/patient'),\r\n    'record': require('./v1.0.0/record'),\r\n    'sensor':require('./v1.0.0/sensor'),\r\n    'user': require('./v1.0.0/user'),\r\n    'utils': require('./v1.0.0/utils'),\r\n    'vitabox': require('./v1.0.0/vitabox'),\r\n};","var crypto = require(\"crypto\"),\r\n    fs = require(\"fs\"),\r\n    jwt = require('jsonwebtoken'),\r\n    db = require('../../models/index');\r\n\r\nexports.encrypt = function (to_encrypt) {\r\n    return new Promise((resolve, reject) => {\r\n        to_encrypt.forEach((element, index) => {\r\n            let cipher = crypto.createCipher(process.env.ALGORITHM, process.env.KEY);\r\n            return to_encrypt[index] = cipher.update(Buffer.from(element), 'utf8', 'hex') + cipher.final('hex');\r\n        });\r\n        resolve(to_encrypt);\r\n    });\r\n}\r\n\r\nexports.decrypt = function (to_decrypt) {\r\n    let decipher = crypto.createDecipher(process.env.ALGORITHM, process.env.KEY);\r\n    return decipher.update(to_decrypt, 'hex', 'utf8') + decipher.final('utf8');\r\n}\r\n\r\nexports.createToken = function (obj, client_address) {\r\n    return new Promise((resolve, reject) => {\r\n        let private_key = fs.readFileSync(__dirname + '/../../keys/key.pem').toString();\r\n        if (private_key === undefined) reject({ code: 500, msg: \"error on load private key\" });\r\n\r\n        let payload = {\r\n            id: obj.id,\r\n            role: obj.constructor.name\r\n        };\r\n        let options = {\r\n            expiresIn: \"8h\",\r\n            algorithm: \"RS256\",\r\n            subject: client_address\r\n        };\r\n        jwt.sign(payload, private_key, options, function (error, token) {\r\n            if (error) reject({ code: 500, msg: error.message });\r\n            resolve(token);\r\n        });\r\n    });\r\n}\r\n\r\nexports.validateToken = function (token, client_address) {\r\n    return new Promise((resolve, reject) => {\r\n        let public_key = fs.readFileSync(__dirname + '/../../keys/cert.pem').toString();\r\n        if (public_key === undefined) reject(\"error on load public key\");\r\n\r\n        let options = {\r\n            algorithms: [\"RS256\"],\r\n            subject: client_address\r\n        };\r\n\r\n        jwt.verify(token, public_key, options, function (error, payload) {\r\n            if (error) reject({ code: 500, msg: error.message });\r\n            db[payload.role].findById(payload.id).then(\r\n                obj => resolve(obj),\r\n                error => reject({ code: 500, msg: error.message })\r\n            );\r\n        });\r\n    });\r\n}\r\n\r\nexports.generatePassword = () => {\r\n    let sk = \"\", i, j, base = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n    for (i = 0; i < 10; i++) sk += base[Math.floor(Math.random() * 61)];\r\n    return sk;\r\n}\r\n\r\n\r\n// JUST TO DEVELOPMENT\r\nexports.deleteAll = function () {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var options = { raw: true };\r\n\r\n        db.sequelize.query('SET FOREIGN_KEY_CHECKS = 0', options).then(() => {\r\n            db.UserVitabox.truncate().then(() => {\r\n                db.User.truncate().then(() => {\r\n                    db.Vitabox.truncate().then(() => {\r\n                        db.Boardmodel.truncate().then(() => {\r\n                            db.Board.truncate().then(() => {\r\n                                db.Patient.truncate().then(() => {\r\n                                    db.Record.remove({}, () => {\r\n                                        db.sequelize.query('SET FOREIGN_KEY_CHECKS = 1', options).then(\r\n                                            () => resolve(),\r\n                                            error => reject(error));\r\n                                    });\r\n                                }, error => reject(error));\r\n                            }, error => reject(error));\r\n                        }, error => reject(error));\r\n                    }, error => reject(error));\r\n                }, error => reject(error));\r\n            }, error => reject(error));\r\n        }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.testSeed = function () {\r\n    return new Promise((resolve, reject) => {\r\n        require('../../models/seed').testSeed(db).then(\r\n            () => resolve(),\r\n            error => reject(error));\r\n    });\r\n}","var utils = require('../business/v1.0.0/utils');\r\n\r\nmodule.exports.seed = (db) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n\r\n        db.User.count({ where: { admin: true } }).then(\r\n            count => {\r\n                if (count < 1) {\r\n                    utils.encrypt([\"admin@a.aa\", \"user1@a.aa\", \"user2@a.aa\", \"123qweASD\", \"passvita\", \"José António\", \"Manuela Antonieta\"])\r\n                        .then(\r\n                            encrypted => {\r\n\r\n                                db.User.bulkCreate([\r\n                                    { \"email\": encrypted[0], \"admin\": true, \"password\": encrypted[3] },\r\n                                    { \"email\": encrypted[1], \"password\": encrypted[3] },\r\n                                    { \"email\": encrypted[2], \"password\": encrypted[3] }\r\n                                ]).then(\r\n                                    users => db.Vitabox.create({ \"latitude\": \"39.6003075\", \"longitude\": \"-8.3906627\", \"address\": \"Av. Dr. Aurélio Ribeiro 3, Tomar, Portugal\", \"registered\": true, \"active\": true, \"password\": encrypted[4] }).then(\r\n                                        vitabox => vitabox.addUsers([users[1].id, users[2].id]).then(\r\n                                            () => db.Boardmodel.bulkCreate([\r\n                                                { \"name\": \"Zolertia RE-Mote\", \"type\": \"environmental\" },\r\n                                                { \"name\": \"Xiaomi MI Band\", \"type\": \"wearable\" },\r\n                                                { \"name\": \"MySignals\", \"type\": \"non-wearable\" }\r\n                                            ]).then(\r\n                                                board_models => db.Board.bulkCreate([\r\n                                                    { \"vitabox_id\": vitabox.id, \"boardmodel_id\": board_models[0].id, \"location\": \"kitchen\", \"mac_addr\":\"00:12:4b:00:06:0d:60:c8\", password: encrypted[4], active:true  },\r\n                                                    { \"vitabox_id\": vitabox.id, \"boardmodel_id\": board_models[1].id , \"mac_addr\":\"00:12:4b:00:06:0d:b2:1a\", password: encrypted[4], active:true },\r\n                                                    { \"vitabox_id\": vitabox.id, \"boardmodel_id\": board_models[2].id, \"location\": \"bedroom\", \"mac_addr\":\"00:12:4b:00:06:0d:60:fb\", password: encrypted[4], active:true }\r\n                                                ]).then(\r\n                                                    boards => db.Sensor.bulkCreate([\r\n                                                        { \"transducer\": \"dht22\", \"measure\": \"temperature\", \"min_acceptable\": \"10\", \"max_acceptable\": \"25\", \"min_possible\": \"-20\", \"max_possible\": \"50\" },\r\n                                                        { \"transducer\": \"dht22\", \"measure\": \"humidity\", \"min_acceptable\": \"30\", \"max_acceptable\": \"50\", \"min_possible\": \"20\", \"max_possible\": \"60\" },\r\n                                                        { \"transducer\": \"mq-7\", \"measure\": \"carbon_monoxide\", \"min_acceptable\": \"2\", \"max_acceptable\": \"10\", \"min_possible\": \"10\", \"max_possible\": \"500\" }\r\n                                                    ]).then(\r\n                                                        sensors => board_models[0].addSensors([sensors[0].id, sensors[1].id]).then(\r\n                                                            () => db.Record.insertMany([\r\n                                                                { value: \"20\", datetime: \"2018-03-08T09:43:40.000Z\", board_id: boards[0].id, sensor_id: sensors[0].id },\r\n                                                                { value: \"22\", datetime: \"2018-03-08T09:47:28.000Z\", board_id: boards[0].id, sensor_id: sensors[0].id },\r\n                                                                { value: \"19\", datetime: \"2018-03-08T09:53:47.000Z\", board_id: boards[0].id, sensor_id: sensors[0].id }\r\n                                                            ], (error, doc) => {\r\n                                                                if (error) reject(error);\r\n                                                                else db.Patient.bulkCreate([\r\n                                                                    { \"name\": encrypted[5], \"birthdate\": \"1987-02-28\", \"gender\": \"male\" },\r\n                                                                    { \"name\": encrypted[6], \"birthdate\": \"1972-02-28\", \"gender\": \"female\" }\r\n                                                                ]).then(\r\n                                                                    patients => vitabox.addPatients(patients).then(\r\n                                                                        () => resolve(),\r\n                                                                        error => reject(error)),\r\n                                                                    error => reject(error));\r\n                                                            }),\r\n                                                            error => reject(error)),\r\n                                                        error => reject(error)),\r\n                                                    error => reject(error)),\r\n                                                error => reject(error)),\r\n                                            error => reject(error)),\r\n                                        error => reject(error)),\r\n                                    error => reject(error));\r\n                            }, error => reject(error));\r\n                } else resolve();\r\n            }, error => reject(error));\r\n    });\r\n\r\n}\r\n\r\nmodule.exports.testSeed = (db) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        utils.encrypt([\"admin@a.aa\", \"123qweASD\"])\r\n            .then(\r\n                encrypted => {\r\n\r\n                    db.User.create({ \"email\": encrypted[0], \"admin\": true, \"password\": encrypted[1] }).then(\r\n                        () => resolve(),\r\n                        error => reject(error));\r\n                }, error => reject(error));\r\n    });\r\n}","module.exports = require(\"mongoose\");","module.exports = require(\"body-parser\");","module.exports = require(\"express-routes-versioning\");","var business = require('../../business/index').v1_0_0;\r\n/**\r\n * @apiDefine box\r\n * \r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiError {number} status http status code: 500 to business logic errors and 401 to unauthorized\r\n * @apiError {string} error error description\r\n */\r\n\r\n/**\r\n * @api {post} /vitabox 01) Create\r\n * @apiGroup Vitabox\r\n * @apiName create\r\n * @apiDescription create a new vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiSuccess {string} id created box id\r\n * @apiSuccess {string} password created box serial key\r\n */\r\nexports.create = function (req, res) {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.vitabox.create().then(\r\n            data => res.status(200).json(data),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/register 02) Register\r\n * @apiGroup Vitabox\r\n * @apiName vitaboxRegister\r\n * @apiDescription register vitabox, the user must be authenticated as \"admin\" and will define the \"sponsor\" account to the vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id vitabox id\r\n * @apiParam {decimal} latitude min: -90, max: 90 (based on google maps coordinates)\r\n * @apiParam {decimal} longitude min: -180, max: 180 (based on google maps coordinates)\r\n * @apiParam {string} address full address with postal code\r\n * @apiParam {string} email sponsor's email\r\n * @apiParamExample {json} Request example to admin:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"email\": \"sponsor@example.com\"\r\n *     }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly registered\r\n */\r\nexports.register = function (req, res) {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.user.findByEmail(req.body.email).then(\r\n            user => {\r\n                business.vitabox.register(req.params.id, req.body).then(\r\n                    vitabox => {\r\n                        business.vitabox.addUser(req.client, vitabox.id, user.id, true).then(\r\n                            () => res.status(200).json({ result: true }),\r\n                            error => res.status(error.code).send(error.message));\r\n                    },\r\n                    error => res.status(error.code).send(error.message));\r\n            },\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/connect 03) Request Token\r\n * @apiGroup Vitabox\r\n * @apiName vitaboxLogin\r\n * @apiDescription request for a token to the vitabox\r\n * @apiVersion 1.0.0\r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiError {string} error error description\r\n * \r\n * @apiParam {string} :id vitabox id\r\n * @apiParam {string} password password generated on creation\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.connect = function (req, res) {\r\n    business.vitabox.connect(req.params.id, req.body.password).then(\r\n        data => {\r\n            business.utils.createToken(data, req.connection.remoteAddress).then(\r\n                token => res.status(200).json({ token: token }),\r\n                error => res.status(500).send({ error: error.message }));\r\n        },\r\n        error => res.status(401).send(error.message)\r\n    );\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox 04) List\r\n * @apiGroup Vitabox\r\n * @apiName list\r\n * @apiDescription list all vitaboxes related to the user. \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission any user\r\n * @apiSuccess {array} vitaboxes list of vitaboxes\r\n * @apiSuccess {string} id id of each vitabox\r\n * @apiSuccess {decimal} latitude latitude of each vitabox, min: -90, max: 90 (based on google maps coordinates)\r\n * @apiSuccess {decimal} longitude longitude of each vitabox, min: -180, max: 180 (based on google maps coordinates)\r\n * @apiSuccess {string} address full address of each vitabox\r\n * @apiSuccess {boolean} sponsor flag indicating if the requester is sponsor of that vitabox (only if NOT admin)\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox (only if admin)\r\n * @apiSuccess {boolean} registered flag indicating if the vitabox was already registered (only if admin)\r\n * @apiSuccess {boolean} active flag indicating if the vitabox was already activated (only if admin)\r\n * @apiSuccess {datetime} created_at date of production (only if admin)\r\n * @apiSuccess {datetime} updated_at date of last update (only if admin)\r\n * @apiSuccessExample {json} Response example to common user:\r\n * {\r\n *  \"vitaboxes\": [\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"sponsor\": true\r\n *      },\r\n *      {\r\n *          \"id\": \"a6abfa76-68f0-4325-b3ab-6c540a800284\",\r\n *          \"latitude\": \"51.5058372\",\r\n *          \"longitude\": \"-0.1899126\",\r\n *          \"address\": \"Kensington Gardens, London W8 4PX, Reino Unido\",\r\n *          \"sponsor\": false\r\n *      }\r\n *  ]\r\n * }\r\n * @apiSuccessExample {json} Response example to admin:\r\n * {\r\n *  \"vitaboxes\": [\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          },\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"registered\": false,\r\n *          \"active\": false,\r\n *          \"created_at\": \"2018-02-22T11:57:53.000Z\",\r\n *          \"updated_at\": \"2018-02-22T11:57:53.000Z\"\r\n *      }\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"51.5058372\",\r\n *          \"longitude\": \"-0.1899126\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          },\r\n *          \"address\": \"Kensington Gardens, London W8 4PX, Reino Unido\",\r\n *          \"registered\": false,\r\n *          \"active\": false,\r\n *          \"created_at\": \"2018-02-22T11:57:53.000Z\",\r\n *          \"updated_at\": \"2018-02-22T11:57:53.000Z\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.list = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.list(req.client).then(\r\n            data => res.status(200).json({ vitaboxes: data }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id 05) Find\r\n * @apiGroup Vitabox\r\n * @apiName find\r\n * @apiDescription find a specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {string} id vitabox unique ID\r\n * @apiSuccess {decimal} latitude vitabox latitude, min: -90, max: 90 (based on google maps coordinates)\r\n * @apiSuccess {decimal} longitude vitabox longitude, min: -180, max: 180 (based on google maps coordinates)\r\n * @apiSuccess {string} address vitabox full address \r\n * @apiSuccess {boolean} sponsor flag indicating if the requester is sponsor of that vitabox (only if NOT admin)\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox (only if admin)\r\n * @apiSuccess {boolean} registered flag indicating if the vitabox was already registered (only if admin)\r\n * @apiSuccess {boolean} active flag indicating if the vitabox was already activated (only if admin)\r\n * @apiSuccess {datetime} created_at date of production (only if admin)\r\n * @apiSuccess {datetime} updated_at date of last update (only if admin)\r\n * @apiSuccessExample {json} Response example to common user:\r\n * {\r\n *  \"vitabox\": {\r\n *      \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *      \"latitude\": \"38.8976763\",\r\n *      \"longitude\": \"-77.0387185\",\r\n *      \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *      \"sponsor\": false\r\n *  }\r\n * }\r\n * @apiSuccessExample {json} Response example to admin:\r\n * {\r\n *  \"vitabox\": {\r\n *      \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *      \"latitude\": \"38.8976763\",\r\n *      \"longitude\": \"-77.0387185\",\r\n *      \"settings\":{\r\n *          \"cnfg1\": \"true\",\r\n *          \"cnfg2\": \"12345\",\r\n *          \"cnfg3\": \"some other config\"\r\n *      },\r\n *      \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *      \"created_at\": \"2018-02-19T11:38:32.000Z\",\r\n *      \"updated_at\": \"2018-02-23T16:12:47.000Z\"\r\n *  }\r\n * }\r\n */\r\nexports.find = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.find(req.client, req.params.id).then(\r\n            data => res.status(200).json({ vitabox: data }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /settings/vitabox 06) Get Settings\r\n * @apiGroup Vitabox\r\n * @apiName getSettings\r\n * @apiDescription returns the vitabox settings\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *      \"settings\":{\r\n *          \"cnfg1\": \"true\",\r\n *          \"cnfg2\": \"12345\",\r\n *          \"cnfg3\": \"some other config\"\r\n *      }\r\n * }\r\n */\r\nexports.getSettings = function (req, res) {\r\n    if (req.client.constructor.name === \"Vitabox\") {\r\n        res.status(200).json({ settings: req.client.settings })\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /settings/vitabox 07) Set Settings\r\n * @apiGroup Vitabox\r\n * @apiName setSettings\r\n * @apiDescription update vitabox settings\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox\r\n * @apiParam {json} settings configuration's structure to be updated\r\n * @apiParamExample {json} Response example:\r\n * {\r\n *      \"settings\":{\r\n *          \"cnfg1\": \"true\",\r\n *          \"cnfg2\": \"12345\",\r\n *          \"cnfg3\": \"some other config\"\r\n *      }\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.setSettings = function (req, res) {\r\n    if (req.client.constructor.name === \"Vitabox\") {\r\n        req.client.update({ settings: req.body.settings }).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id 08) Update\r\n * @apiGroup Vitabox\r\n * @apiName update\r\n * @apiDescription update a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {decimal} latitude min: -90, max: 90 (based on google maps coordinates)\r\n * @apiParam {decimal} longitude min: -180, max: 180 (based on google maps coordinates)\r\n * @apiParam {string} address full address with postal code\r\n * @apiParam {json} settings configuration's structure (only if admin)\r\n * @apiParamExample {json} Request example to common user:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\"\r\n *     }\r\n * @apiParamExample {json} Request example to admin:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          }\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.update = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.update(req.client, req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id 09) Delete\r\n * @apiGroup Vitabox\r\n * @apiName delete\r\n * @apiDescription list all users related with the vitabox if the requester is related too.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.delete = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.delete(req.client, req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/user 10) Add User\r\n * @apiGroup Vitabox\r\n * @apiName addUser\r\n * @apiDescription add user to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} email email of the user to add\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"email\": \"user-example@some.thing\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.addUser = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        let flag = req.body.sponsor ? true : false;\r\n        business.user.findByEmail(req.body.email).then(\r\n            user => business.vitabox.addUser(req.client, req.params.id, user.id, flag).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.message)),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/user 11) Get Users\r\n * @apiGroup Vitabox\r\n * @apiName getUsers\r\n * @apiDescription get users of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} users vitabox users list\r\n * @apiSuccess {string} id id of each user\r\n * @apiSuccess {string} email email of each user\r\n * @apiSuccess {datetime} since relationship date with the vitabox\r\n * @apiSuccess {boolean} sponsor flag indicating if the user is sponsor of the vitabox\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"users\": [\r\n *      {\r\n *          \"id\": \"585402ef-68dd-44a4-a44b-04152e659d11\",\r\n *          \"email\": \"donaldtrump@usa.com\",\r\n *          \"since\": \"2018-02-19T14:41:13.000Z\",\r\n *          \"sponsor\": false\r\n *      },\r\n *      {\r\n *          \"id\": \"78007a69-baa2-4b24-b936-234883811b6a\",\r\n *          \"email\": \"queenelizabeth@majesty.uk\",\r\n *          \"since\": \"2018-02-19T14:40:14.000Z\",\r\n *          \"sponsor\": true\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getUsers = function (req, res) {\r\n    business.vitabox.getUsers(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n        data => res.status(200).json({ users: data }),\r\n        error => res.status(error.code).send(error.message));\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/user 12) Remove User\r\n * @apiGroup Vitabox\r\n * @apiName removeUser\r\n * @apiDescription remove user from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} user_id user unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"user_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeUser = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.removeUser(req.client, req.params.id, req.body.user_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/patient 13) Add Patient\r\n * @apiGroup Vitabox\r\n * @apiName addPatient\r\n * @apiDescription add patient to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} name patient name\r\n * @apiParam {date} birthdate patient birthdate (date only)\r\n * @apiParam {string} gender patient gender (must be 'male', 'female' or 'undefined')\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"José António\",\r\n *          \"birthdate\": \"1987-02-28\",\r\n *          \"gender\": \"male\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.addPatient = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.patient.create(req.body).then(\r\n            patient => business.vitabox.addPatient(req.client, req.params.id, patient.id).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.message)),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/patient 14) Get Patients\r\n * @apiGroup Vitabox\r\n * @apiName getPatients\r\n * @apiDescription get patients of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} patients vitabox patients list\r\n * @apiSuccess {string} id id of each patient\r\n * @apiSuccess {date} birthdate patient birthdate (date only)\r\n * @apiSuccess {string} name name of each patient\r\n * @apiSuccess {string} gender patient gender (must be 'male', 'female' or 'undefined')\r\n * @apiSuccess {datetime} since relationship date with the vitabox \r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"patients\": [\r\n *      {\r\n *          \"id\": \"a77ea0fe-5e34-4189-9702-95cb69b4cd1d\",\r\n *          \"birthdate\": \"1987-02-28\",\r\n *          \"name\": \"José António\",\r\n *          \"gender\": \"male\",\r\n *          \"since\": \"2018-02-19T14:55:59.000Z\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getPatients = function (req, res) {\r\n    business.vitabox.getPatients(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n        data => res.status(200).json({ patients: data }),\r\n        error => res.status(error.code).send(error.message));\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/patient 15) Remove Patient\r\n * @apiGroup Vitabox\r\n * @apiName removePatient\r\n * @apiDescription remove patient from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} patient_id patient unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"patient_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removePatient = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.removePatient(req.client, req.params.id, req.body.patient_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/board 16) Add Board\r\n * @apiGroup Vitabox\r\n * @apiName addBoard\r\n * @apiDescription add board to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} location place where the board is located, if wearable is null\r\n * @apiParam {string} password board password\r\n * @apiParam {string} mac_address board MAC address\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"location\": \"kitchen\",\r\n *          \"password\":\"WkN1NNQiRD\",\r\n *          \"mac_addr\": \"00:12:4b:00:06:0d:60:fb\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.addBoard = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.board.authenticate(req.body.mac_addr, req.body.password).then(\r\n            board => business.vitabox.addBoard(req.client, req.params.id, board.id).then(\r\n                () => business.board.setLocation(board, req.body.location ? req.body.location : null).then(\r\n                    () => res.status(200).json({ result: true }),\r\n                    error => res.status(error.code).send(error.message)),\r\n                error => res.status(error.code).send(error.message)),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/board 17) Get Boards\r\n * @apiGroup Vitabox\r\n * @apiName getBoards\r\n * @apiDescription get boards of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} boards vitabox boards list\r\n * @apiSuccess {string} id id of each board\r\n * @apiSuccess {string} location place where the board is located (house division)\r\n * @apiSuccess {string} mac_addr board MAC address\r\n * @apiSuccess {datetime} created_at register day to the vitabox\r\n * @apiSuccess {json} BoardModel model of each board, contains an id, type and name\r\n * @apiSuccessExample {json} Response example to user:\r\n * {\r\n *  \"boards\": [\r\n *      {\r\n *          \"id\": \"983227e9-e1dc-410e-829d-1636627397ba\",\r\n *          \"location\": \"kitchen\",\r\n *          \"mac_addr\": \"00:19:B9:FB:E2:58\",\r\n *          \"created_at\": \"2018-02-22T15:25:50.000Z\",\r\n *          \"BoardModel\": {\r\n *              \"id\": \"1920ed05-0a24-4611-b822-5da7a58ba8bb\",\r\n *              \"type\": \"environmental\",\r\n *              \"name\": \"Zolertia RE-Mote\",\r\n *              \"Sensors\": [\r\n *                  {\r\n *                      \"id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *                      \"transducer\": \"dht22\",\r\n *                      \"measure\": \"temperature\",\r\n *                      \"min_acceptable\": \"10.00000\",\r\n *                      \"max_acceptable\": \"25.00000\",\r\n *                      \"min_possible\": \"-20.00000\",\r\n *                      \"max_possible\": \"50.00000\"\r\n *                  }\r\n *              ]\r\n *          }\r\n *      }\r\n *  ]\r\n * }\r\n * @apiSuccessExample {json} Response example to vitabox:\r\n * {\r\n *  \"boards\": [\r\n *      {\r\n *          \"id\": \"983227e9-e1dc-410e-829d-1636627397ba\",\r\n *          \"location\": \"kitchen\",\r\n *          \"mac_addr\": \"00:19:B9:FB:E2:58\",\r\n *          \"created_at\": \"2018-02-22T15:25:50.000Z\",\r\n *          \"node_id\": \"E258\"\r\n *          \"BoardModel\": {\r\n *              \"id\": \"1920ed05-0a24-4611-b822-5da7a58ba8bb\",\r\n *              \"type\": \"environmental\",\r\n *              \"name\": \"Zolertia RE-Mote\",\r\n *              \"Sensors\": [\r\n *                  {\r\n *                      \"id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *                      \"transducer\": \"dht22\",\r\n *                      \"measure\": \"temperature\",\r\n *                      \"min_acceptable\": \"10.00000\",\r\n *                      \"max_acceptable\": \"25.00000\",\r\n *                      \"min_possible\": \"-20.00000\",\r\n *                      \"max_possible\": \"50.00000\"\r\n *                  }\r\n *              ]\r\n *          }\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getBoards = function (req, res) {\r\n    business.vitabox.getBoards(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n        data => res.status(200).json({ boards: data }),\r\n        error => res.status(error.code).send(error.message));\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/patient 18) Remove Board\r\n * @apiGroup Vitabox\r\n * @apiName removeBoard\r\n * @apiDescription remove board from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} board_id board unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"board_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeBoard = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.removeBoard(req.client, req.params.id, req.body.board_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n/**\r\n * @apiDefine auth\r\n * \r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiError {number} status http status code: 500 to business logic errors and 401 to unauthorized\r\n * @apiError {string} error error description\r\n */\r\n\r\n/**\r\n * @api {post} /register 01) Register user\r\n * @apiGroup Authentication\r\n * @apiName userRegister\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.register = function (req, res) {\r\n    business.user.register(req.body.email, req.body.password).then(\r\n        user => {\r\n            business.utils.createToken(user, req.connection.remoteAddress).then(\r\n                token => res.status(200).json({ token: token, user: user.id }),\r\n                error => res.status(error.code).send(error.message));\r\n        },\r\n        error => res.status(500).send(error.message)\r\n    );\r\n}\r\n\r\n/**\r\n * @api {post} /login 02) Login user\r\n * @apiGroup Authentication\r\n * @apiName userLogin\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.login = function (req, res) {\r\n    business.user.login(req.body.email, req.body.password).then(\r\n        user => {\r\n            business.utils.createToken(user, req.connection.remoteAddress).then(\r\n                token => res.status(200).json({ token: token, user: user.id }),\r\n                error => res.status(error.code).send(error.message));\r\n        },\r\n        error => res.status(error.code).send(error.message));\r\n}\r\n\r\n/**\r\n * @api {post} /chpass 03) Change password\r\n * @apiGroup Authentication\r\n * @apiName changePassword\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiParam {string} old_password old password\r\n * @apiParam {string} new_password new password\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.changePassword = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.user.changePassword(req.client.id, req.body.old_password, req.body.new_password).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /sensor 01) Create\r\n * @apiGroup Sensor\r\n * @apiName createSensor\r\n * @apiDescription create a new sensor.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} transducer transducer name\r\n * @apiParam {string} measure transducer measure\r\n * @apiParam {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiParam {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiParam {decimal} min_possible minimum possible value to sensor\r\n * @apiParam {decimal} max_possible maximum possible value to sensor\r\n * @apiParamExample {json} Request example:\r\n *      {\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n * @apiSuccess {string} id created sensor id\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.create(req.body).then(\r\n            sensor => res.status(200).json({ id: sensor.id }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /sensor 02) List\r\n * @apiGroup Sensor\r\n * @apiName listSensors\r\n * @apiDescription list all sensors. \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n *\r\n * @apiPermission admin\r\n * @apiSuccess {array} models list of sensors\r\n * @apiSuccess {string} transducer transducer name\r\n * @apiSuccess {string} measure transducer measure\r\n * @apiSuccess {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiSuccess {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiSuccess {decimal} min_possible minimum possible value to sensor\r\n * @apiSuccess {decimal} max_possible maximum possible value to sensor\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"sensors\": [\r\n *      {\r\n *          \"transducer\": \"dht22\",\r\n *          \"measure\":\"temperature\",\r\n *          \"min_acceptable\": \"10\",\r\n *          \"max_acceptable\": \"25\",\r\n *          \"min_possible\": \"-20\",\r\n *          \"max_possible\": \"50\"\r\n *      },\r\n *      {\r\n *          \"transducer\": \"mq-7\",\r\n *          \"measure\":\"carbon_monoxide\",\r\n *          \"min_acceptable\": \"2\",\r\n *          \"max_acceptable\": \"10\",\r\n *          \"min_possible\": \"10\",\r\n *          \"max_possible\": \"500\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.list = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.list().then(\r\n            sensors => res.status(200).json({ sensors: sensors }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /sensor/:id 03) Update\r\n * @apiGroup Sensor\r\n * @apiName updateSensor\r\n * @apiDescription update a sensor.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor id to update\r\n * @apiParam {string} transducer transducer name\r\n * @apiParam {string} measure transducer measure\r\n * @apiParam {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiParam {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiParam {decimal} min_possible minimum possible value to sensor\r\n * @apiParam {decimal} max_possible maximum possible value to sensor\r\n * @apiParamExample {json} Request example:\r\n *      {\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.update(req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /sensor/:id 04) Delete\r\n * @apiGroup Sensor\r\n * @apiName deleteSensor\r\n * @apiDescription remove a sensor\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor ID to delete\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.remove(req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).send(error.message)\r\n        );\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /record 1) Receive\r\n * @apiGroup Record\r\n * @apiName createRecord\r\n * @apiDescription receive data from vitabox about it sensors\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox\r\n * @apiParam {decimal} value value catched\r\n * @apiParam {datetime} datetime moment when the value was catched\r\n * @apiParam {string} patient_id patient unique ID related to the value, may be null or omitted\r\n * @apiParam {string} board_id board unique ID related to the value\r\n * @apiParam {string} sensor_id sensor unique ID related to the value\r\n * @apiParamExample {json} Request example:\r\n * {\r\n *  \"records\":[\r\n *      {\r\n *          \"value\": 10,\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"value\": 13,\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly recorded\r\n * @apiSuccess {string} error return \"\" if all records were valid and a error message if some records has invalid parameters\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"result\":true,\r\n *  \"error\": \"some records were discarded by invalid parameters: value, datetime, sensor_id and board_id are required\"\r\n * }\r\n */\r\nexports.create = function (req, res) {\r\n    if (req.client.constructor.name === \"Vitabox\") {\r\n        business.record.create(req.body.records).then(\r\n            invalid => {\r\n                if (invalid) res.status(200).json({ result: true, error: \"some records were discarded by invalid parameters, value, datetime, sensor_id and board_id are required\" });\r\n                else res.status(200).json({ result: true, error: \"\" });\r\n            },\r\n            error => res.status(500).json({ result: false, error: error.message }));\r\n    } else {\r\n        res.status(401).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /record/patient/:id 2) List by Patient\r\n * @apiGroup Record\r\n * @apiName listRecordsByPatient\r\n * @apiDescription list all records by patient\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :id patient unique ID\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {string} patient_id patient unique ID related to the value\r\n * @apiSuccess {string} board_id board unique ID related to the value\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listByPatient = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.record.listByPatient(req.client, req.params.id).then(\r\n            data => res.status(200).json({ records: data }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /record/board/:id 3) List by Board\r\n * @apiGroup Record\r\n * @apiName listRecordsByBoard\r\n * @apiDescription list all records by board\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :id board unique ID\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {string} patient_id patient unique ID related to the value\r\n * @apiSuccess {string} board_id board unique ID related to the value\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listByBoard = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.record.listByBoard(req.client, req.params.id).then(\r\n            data => res.status(200).json({ records: data }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /record/sensor/:id 4) List by Sensor\r\n * @apiGroup Record\r\n * @apiName listRecordsBySensor\r\n * @apiDescription list all records by sensor\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor unique ID\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {string} patient_id patient unique ID related to the value\r\n * @apiSuccess {string} board_id board unique ID related to the value\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listBySensor = function (req, res) {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.record.listBySensor(req.client, req.params.id).then(\r\n            data => res.status(200).json({ records: data }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\nexports.destroyAll = function (req, res) {\r\n    business.utils.deleteAll().then(\r\n        () => res.status(200).json({ success: true }),\r\n        error => res.status(500).send(error.message)\r\n    );\r\n}\r\n\r\nexports.testDb = function (req, res) {\r\n    business.utils.deleteAll().then(\r\n        () => business.utils.testSeed().then(\r\n            res.status(200).json({ success: true }),\r\n            error => res.status(500).send(error.message)),\r\n        error => res.status(500).send(error.message));\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /board 08) Create Board\r\n * @apiGroup Board\r\n * @apiName create a new Board\r\n * @apiDescription register a new board on the system\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} model model id of the board\r\n * @apiParam {string} mac_address board MAC address\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"model\":\"5d93585b-f511-4fa8-b69e-692c2474d5e8\",\r\n *          \"mac_addr\": \"00:12:4b:00:06:0d:60:fb\"\r\n *     }\r\n * @apiSuccess {string} id return the id\r\n * @apiSuccess {string} mac_addr return the mac address\r\n * @apiSuccess {string} password return the generated password\r\n * @apiSuccessExample {json} Response example:\r\n *     {\r\n *          \"id\":\"c293462b-fac1-4f67-b69e-47841274d5e8\",\r\n *          \"mac_addr\": \"00:12:4b:00:06:0d:60:fb\",\r\n *          \"password\": \"aj34Ah1DA1\"\r\n *     }\r\n */\r\nexports.create = function (req, res) {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.board.create(req.body).then(\r\n            result => res.status(200).json(result),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.create = function () {\r\n    return new Promise((resolve, reject) => {\r\n        let password = utils.generatePassword();\r\n        utils.encrypt([password]).then(\r\n            encrypted => db.Vitabox.create({ password: encrypted[0] }).then(\r\n                vitabox => resolve({ id: vitabox.id, password: password }),\r\n                error => reject({ code: 500, msg: error.message })),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.register = function (vitabox_id, attributes) {\r\n    return new Promise((resolve, reject) => {\r\n        if (attributes.address) db.Vitabox.findOne({ where: { id: vitabox_id, registered: false } }).then(\r\n            vitabox => {\r\n                if (vitabox) vitabox.update({ registered: true, address: attributes.address, longitude: attributes.longitude, latitude: attributes.latitude }).then(\r\n                    () => resolve(vitabox),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"Vitabox already registered or doesn´t exist\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"Vitabox address must be defined\" });\r\n    });\r\n}\r\n\r\nexports.connect = function (vitabox_id, password) {\r\n    return new Promise((resolve, reject) => {\r\n        utils.encrypt([password]).then(\r\n            encrypted => db.Vitabox.findOne({ where: { password: encrypted[0], id: vitabox_id, registered: true } }).then(\r\n                vitabox => {\r\n                    if (vitabox) vitabox.update({ active: true }).then(\r\n                        () => resolve(vitabox),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                    else reject({ code: 500, msg: \"vitabox not found, verify if was already created and registered\" });\r\n                }, error => reject({ code: 500, msg: error.message })),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.list = function (current_user) {\r\n    return new Promise((resolve, reject) => {\r\n        if (current_user.admin)\r\n            db.Vitabox.findAll({ attributes: { exclude: ['password'] } }).then(\r\n                list => resolve(list),\r\n                error => reject({ code: 500, msg: error.message }));\r\n        else current_user.getVitaboxes({ attributes: ['id', 'latitude', 'longitude', 'address'], where: { active: true } }).then(\r\n            list => {\r\n                list.forEach(element => {\r\n                    element.dataValues.sponsor = element.dataValues.UserVitabox.dataValues.sponsor;\r\n                    delete element.dataValues.UserVitabox;\r\n                })\r\n                resolve(list);\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.find = function (current_user, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (current_user.admin)\r\n            db.Vitabox.findById(vitabox_id, { attributes: { exclude: ['password'] } }).then(\r\n                vitabox => {\r\n                    if (vitabox) resolve(vitabox);\r\n                    else reject({ code: 500, msg: \"Vitabox not found\" });\r\n                }, error => reject({ code: 500, msg: error.message }));\r\n        else current_user.getVitaboxes({\r\n            attributes: ['id', 'latitude', 'longitude', 'address'],\r\n            where: { id: vitabox_id, active: true }\r\n        }).then(vitabox => {\r\n            if (vitabox.length > 0) {\r\n                vitabox[0].dataValues.sponsor = vitabox[0].dataValues.UserVitabox.dataValues.sponsor;\r\n                delete vitabox[0].dataValues.UserVitabox;\r\n                resolve(vitabox[0]);\r\n            } else reject({ code: 500, msg: \"Vitabox not found\" });\r\n        }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.update = function (current_user, vitabox_id, attributes) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) if (current_user.admin)\r\n                    vitabox.update({ latitude: attributes.latitude, longitude: attributes.longitude, address: attributes.address, settings: attributes.settings }).then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                else _isSponsor(vitabox, current_user).then(\r\n                    () => vitabox.update({ latitude: attributes.latitude, longitude: attributes.longitude, address: attributes.address }).then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message })),\r\n                    error => reject(error));\r\n                else reject({ code: 500, msg: \"Vitabox not found \" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.delete = function (current_user, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) if (current_user.admin)\r\n                    vitabox.destroy().then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                else _isSponsor(vitabox, current_user).then(\r\n                    () => vitabox.destroy().then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message })),\r\n                    error => reject(error));\r\n                else reject({ code: 500, msg: \"Vitabox not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.addUser = function (current_user, vitabox_id, user_id, is_sponsor) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) if (current_user.admin)\r\n                    vitabox.addUser(user_id, { through: { sponsor: is_sponsor } }).then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                else _isSponsor(vitabox, current_user).then(\r\n                    () => vitabox.addUser(user_id, { through: { sponsor: is_sponsor } }).then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message })),\r\n                    error => reject(error));\r\n                else reject({ code: 500, msg: \"Vitabox not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.getUsers = function (is_user, client, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (is_user) db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) if (client.admin)\r\n                    vitabox.getUsers({ attributes: ['id', 'email'] }).then(\r\n                        users => {\r\n                            users.forEach(user => {\r\n                                user.email = utils.decrypt(user.email);\r\n                                user.dataValues.since = user.dataValues.UserVitabox.dataValues.created_at;\r\n                                user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n                                delete user.dataValues.UserVitabox;\r\n                            });\r\n                            resolve(users);\r\n                        },\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                else _isUser(vitabox, client).then(\r\n                    () => vitabox.getUsers({ attributes: ['id', 'email'] }).then(\r\n                        users => {\r\n                            users.forEach(user => {\r\n                                user.email = utils.decrypt(user.email);\r\n                                user.dataValues.since = user.dataValues.UserVitabox.dataValues.created_at;\r\n                                user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n                                delete user.dataValues.UserVitabox;\r\n                            });\r\n                            resolve(users);\r\n                        },\r\n                        error => reject({ code: 500, msg: error.message })),\r\n                    error => reject(error));\r\n                else reject({ code: 500, msg: \"Vitabox not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n        else client.getUsers({ attributes: ['id', 'email'] }).then(\r\n            users => {\r\n                users.forEach(user => {\r\n                    user.email = utils.decrypt(user.email);\r\n                    user.dataValues.since = user.dataValues.UserVitabox.dataValues.created_at;\r\n                    user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n                    delete user.dataValues.UserVitabox;\r\n                });\r\n                resolve(users);\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.removeUser = function (current_user, vitabox_id, user_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) if (current_user.admin)\r\n                    vitabox.removeUser(user_id).then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                else _isSponsor(vitabox, current_user).then(\r\n                    () => {\r\n                        vitabox.removeUser(user_id).then(\r\n                            () => resolve(),\r\n                            error => reject({ code: 500, msg: error.message }));\r\n                    }, error => reject(error));\r\n                else reject({ code: 500, msg: \"Vitabox not found\" });\r\n            }, error => reject({ code: 500, msg: error.message })\r\n        );\r\n    });\r\n}\r\n\r\nexports.addPatient = function (current_user, vitabox_id, patient_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) if (current_user.admin)\r\n                    vitabox.addPatient(patient_id).then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                else _isSponsor(vitabox, current_user).then(\r\n                    () => {\r\n                        vitabox.addPatient(patient_id).then(\r\n                            () => resolve(),\r\n                            error => reject({ code: 500, msg: error.message }));\r\n                    }, error => reject(error));\r\n                else reject({ code: 500, msg: \"Vitabox not found\" });\r\n            }, error => reject({ code: 500, msg: error.message })\r\n        );\r\n    });\r\n}\r\n\r\nexports.getPatients = function (is_user, client, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (is_user) if (client.admin)\r\n            db.Patient.findAll({ where: { vitabox_id: vitabox_id }, attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since']] }).then(\r\n                patients => {\r\n                    patients.forEach(patient => patient.name = utils.decrypt(patient.name));\r\n                    resolve(patients);\r\n                }, error => reject({ code: 500, msg: error.message }));\r\n        else db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) _isUser(vitabox, client).then(\r\n                    () => db.Patient.findAll({ where: { vitabox_id: vitabox_id }, attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since']] }).then(\r\n                        patients => {\r\n                            patients.forEach(patient => patient.name = utils.decrypt(patient.name));\r\n                            resolve(patients);\r\n                        }, error => reject({ code: 500, msg: error.message })),\r\n                    error => reject(error));\r\n                else reject({ code: 500, msg: \"Vitabox not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n        else client.getPatients({ attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since']] }).then(\r\n            patients => {\r\n                patients.forEach(patient => {\r\n                    patient.name = utils.decrypt(patient.name);\r\n                    delete patient.dataValues.VitaboxId;\r\n                });\r\n                resolve(patients);\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.removePatient = function (current_user, vitabox_id, patient_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) if (current_user.admin)\r\n                    vitabox.removePatient(patient_id).then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                else _isSponsor(vitabox, current_user).then(\r\n                    () => {\r\n                        vitabox.removePatient(patient_id).then(\r\n                            () => resolve(),\r\n                            error => reject({ code: 500, msg: error.message }));\r\n                    }, error => reject(error)\r\n                );\r\n                else reject({ code: 500, msg: \"Vitabox not found\" });\r\n            }, error => reject({ code: 500, msg: error.message })\r\n        );\r\n    });\r\n}\r\n\r\nexports.addBoard = function (current_user, vitabox_id, board_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) if (current_user.admin)\r\n                    vitabox.addBoard(board_id).then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                else _isSponsor(vitabox, current_user).then(\r\n                    () => {\r\n                        console.log(\"is user\");\r\n                        vitabox.addBoard(board_id).then(\r\n                            () => resolve(),\r\n                            error => reject({ code: 500, msg: error.message }));\r\n                    }, error => reject(error)\r\n                );\r\n                else reject({ code: 500, msg: \"Vitabox not found\" });\r\n            }, error => reject({ code: 500, msg: error.message })\r\n        );\r\n    });\r\n}\r\n\r\nexports.getBoards = function (is_user, client, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (is_user) if (client.admin)\r\n            db.Board.findAll({\r\n                where: { vitabox_id: vitabox_id }, attributes: ['id', 'location', 'mac_addr', 'created_at'], include: [{\r\n                    model: db.Boardmodel, attributes: ['id', 'type', 'name'], include: [{\r\n                        model: db.Sensor, attributes: { exclude: ['created_at', 'updated_at'] }\r\n                    }]\r\n                }]\r\n            }).then(\r\n                boards => {\r\n                    boards.forEach(board => board.Boardmodel.Sensors.forEach(sensor => delete sensor.dataValues.BoardSensor));\r\n                    resolve(boards);\r\n                }, error => reject({ code: 500, msg: error.message }));\r\n        else db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) _isUser(vitabox, client).then(\r\n                    () => db.Board.findAll({\r\n                        where: { vitabox_id: vitabox_id }, attributes: ['id', 'location', 'mac_addr', 'created_at'], include: [{\r\n                            model: db.Boardmodel, attributes: ['id', 'type', 'name'], include: [{\r\n                                model: db.Sensor, attributes: { exclude: ['created_at', 'updated_at'] }\r\n                            }]\r\n                        }]\r\n                    }).then(\r\n                        boards => {\r\n                            boards.forEach(board => board.Boardmodel.Sensors.forEach(sensor => delete sensor.dataValues.BoardSensor));\r\n                            resolve(boards);\r\n                        },\r\n                        error => reject({ code: 500, msg: error.message })),\r\n                    error => reject(error));\r\n                else reject({ code: 500, msg: \"Vitabox not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n        else client.getBoards({\r\n            attributes: ['id', 'location', 'mac_addr', 'created_at'], include: [{\r\n                model: db.Boardmodel, attributes: ['id', 'type', 'name'], include: [{\r\n                    model: db.Sensor, attributes: { exclude: ['created_at', 'updated_at'] }\r\n                }]\r\n            }],\r\n        }).then(\r\n            boards => {\r\n                boards.forEach(board => {\r\n                    board.node_id = board.mac_addr.substr(board.mac_addr.lastIndexOf(\":\") - 2).replace(\":\", \"\");\r\n                    board.Boardmodel.Sensors.forEach(sensor => delete sensor.dataValues.BoardSensor);\r\n                });\r\n                resolve(boards);\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.removeBoard = function (current_user, vitabox_id, board_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) if (current_user.admin)\r\n                    vitabox.removeBoard(board_id).then(\r\n                        () => resolve(),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                else _isSponsor(vitabox, current_user).then(\r\n                    () => {\r\n                        vitabox.removeBoard(board_id).then(\r\n                            () => resolve(),\r\n                            error => reject({ code: 500, msg: error.message }));\r\n                    }, error => reject(error)\r\n                );\r\n                else reject({ code: 500, msg: \"Vitabox not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\n// ________________________________________________________________________\r\n// Private\r\n// ________________________________________________________________________\r\n_isSponsor = (vitabox, user) => {\r\n    return new Promise((resolve, reject) => {\r\n        vitabox.getUsers({ where: { id: user.id } }).then(\r\n            users => {\r\n                if (users.length > 0 && users[0].UserVitabox.sponsor) resolve();\r\n                else reject({ code: 401, msg: \"Unauthorized\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\n_isUser = (vitabox, user) => {\r\n    return new Promise((resolve, reject) => {\r\n        vitabox.hasUser(user).then(\r\n            success => {\r\n                if (success) resolve();\r\n                else reject({ code: 401, msg: \"Unauthorized\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.register = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        if (/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d$@$!%*#?&-.]{8,}$/.test(password))\r\n            if (/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/.test(email))\r\n\r\n                utils.encrypt([email, password]).then(\r\n                    encrypted => db.User.create({ email: encrypted[0], password: encrypted[1] }).then(\r\n                        new_user => resolve(new_user),\r\n                        error => reject({ code: 500, msg: error.message })),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n\r\n            else reject({ code: 500, msg: \"invalid email\" });\r\n        else reject({ code: 500, msg: \"invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\" });\r\n    });\r\n}\r\n\r\nexports.login = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        utils.encrypt([email, password]).then(\r\n            encrypted => {\r\n                db.User.findOne({ where: { email: encrypted[0], password: encrypted[1] } }).then(\r\n                    user => {\r\n                        if (user) resolve(user);\r\n                        else reject({ code: 500, msg: \"email and password don't match\" });\r\n                    }, error => reject({ code: 500, msg: error.message }));\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.changePassword = function (user_id, old_password, new_password) {\r\n    return new Promise((resolve, reject) => {\r\n        if (/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d$@$!%*#?&-.]{8,}$/.test(new_password))\r\n            utils.encrypt([old_password, new_password]).then(\r\n                encrypted => {\r\n                    db.User.findOne({ where: { id: user_id, password: encrypted[0] } }).then(\r\n                        user => {\r\n                            if (user) user.update({ password: encrypted[1] }).then(\r\n                                () => resolve(),\r\n                                error => reject({ code: 500, msg: error.message }));\r\n                            else reject({ code: 500, msg: \"old password don't match\" });\r\n                        }, error => reject({ code: 500, msg: error.message }));\r\n                }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\" });\r\n    });\r\n}\r\n\r\nexports.findByEmail = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        utils.encrypt([email]).then(\r\n            encrypted => db.User.findOne({ where: { email: encrypted[0] } }).then(\r\n                user => {\r\n                    if (user) resolve(user);\r\n                    else reject({ code: 500, msg: \"user not registered\" });\r\n                }, error => reject({ code: 500, msg: error.message })),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.create({ transducer: attributes.transducer, measure: attributes.measure, min_acceptable: attributes.min_acceptable, max_acceptable: attributes.max_acceptable, min_possible: attributes.min_possible, max_possible: attributes.max_possible }).then(\r\n            sensor => resolve(sensor),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.list = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.findAll({ attributes: { exclude: ['created_at', 'updated_at'] } }).then(\r\n            sensors => resolve(sensors),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.update = (sensor_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.findById(sensor_id).then(\r\n            sensor => {\r\n                if (sensor) sensor.update({ transducer: attributes.transducer, measure: attributes.measure, min_acceptable: attributes.min_acceptable, max_acceptable: attributes.max_acceptable, min_possible: attributes.min_possible, max_possible: attributes.max_possible }).then(\r\n                    () => resolve(),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"sensor not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.remove = (sensor_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.findById(sensor_id).then(\r\n            sensor => {\r\n                if (sensor) sensor.destroy().then(\r\n                    () => resolve(),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"sensor not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = function (body) {\r\n    return new Promise((resolve, reject) => {\r\n        var to_insert = [], invalid = false;\r\n        body.forEach(element => {\r\n            if (element.board_id && element.board_id !== '' && element.sensor_id && element.sensor_id !== '' && element.value && element.datetime)\r\n                to_insert.push({\r\n                    value: element.value,\r\n                    datetime: element.datetime,\r\n                    patient_id: (element.patient_id && element.patient_id !== \"\") ? element.patient_id : null,\r\n                    board_id: element.board_id,\r\n                    sensor_id: element.sensor_id\r\n                });\r\n            else invalid = true\r\n        });\r\n        db.Record.insertMany(to_insert, (error, doc) => {\r\n            if (error) reject({ code: 500, msg: error.message });\r\n            else resolve(invalid);\r\n        });\r\n    });\r\n}\r\n\r\nexports.listByPatient = function (current_user, patient_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (current_user.admin) db.Record.find().where('patient_id').equals(patient_id).select(\"-_id\").exec((error, doc) => {\r\n            if (error) reject(error);\r\n            else resolve(doc);\r\n        });\r\n        else db.Patient.findById(patient_id, { include: [{ model: db.Vitabox }] }).then(\r\n            patient => patient.Vitabox.hasUser(current_user).then(\r\n                success => {\r\n                    if (success)\r\n                        db.Record.find().where('patient_id').equals(patient_id).select(\"-_id\").exec((error, doc) => {\r\n                            if (error) reject({ code: 500, msg: error.message });\r\n                            else resolve(doc);\r\n                        });\r\n                    else reject({ code: 401, msg: \"Unauthorized\" });\r\n                },\r\n                error => reject({ code: 500, msg:error.message })),\r\n            error => reject({ code: 500, msg:error.message }));\r\n    });\r\n}\r\n\r\nexports.listByBoard = function (current_user, board_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (current_user.admin) db.Record.find().where('board_id').equals(board_id).select(\"-_id\").exec((error, doc) => {\r\n            if (error) reject(error);\r\n            else resolve(doc);\r\n        });\r\n        else db.Board.findById(board_id, { include: [{ model: db.Vitabox }] }).then(\r\n            board => board.Vitabox.hasUser(current_user).then(\r\n                success => {\r\n                    if (success)\r\n                        db.Record.find().where('board_id').equals(board_id).select(\"-_id\").exec((error, doc) => {\r\n                            if (error) reject({ code: 500, msg:error.message });\r\n                            else resolve(doc)\r\n                        });\r\n                    else reject({ code: 401, msg: \"Unauthorized\" });\r\n                },\r\n                error => reject({ code: 500, msg:error.message })),\r\n            error => reject({ code: 500, msg:error.message }));\r\n    });\r\n}\r\n\r\nexports.listBySensor = function (current_user, sensor_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Record.find().where('sensor_id').equals(sensor_id).select(\"-_id\").exec((error, doc) => {\r\n            if (error) reject({ code: 500, msg:error.message });\r\n            else resolve(doc);\r\n        });\r\n    });\r\n}","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (/[A-Z][a-zA-Z\\'][^#&<>\\\"~;$^%{}?!*+_\\-»«@£§€ªº,0-9]{1,20}$/.test(attributes.name))\r\n            utils.encrypt([attributes.name]).then(\r\n                encrypted_name => db.Patient.create({\r\n                    name: encrypted_name[0],\r\n                    birthdate: attributes.birthdate,\r\n                    gender: attributes.gender\r\n                }).then(\r\n                    patient => resolve(patient),\r\n                    error => reject(error)\r\n                ), error => reject(error)\r\n            );\r\n        else reject({ code: 500, msg: \"invalid name\" });\r\n    });\r\n}","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (attributes.mac_addr) {\r\n            let password = utils.generatePassword();\r\n            utils.encrypt([password]).then(\r\n                encrypted =>\r\n                    db.Board.create({\r\n                        mac_addr: attributes.mac_addr.toLowerCase(),\r\n                        boardmodel_id: attributes.model,\r\n                        password: encrypted[0]\r\n                    }).then(\r\n                        board => resolve({\r\n                            id: board.id,\r\n                            mac_addr: board.mac_addr,\r\n                            password: password\r\n                        }),\r\n                        error => reject({ code: 500, msg: error.message })),\r\n                error => reject({ code: 500, msg: error.message }));\r\n        } else reject({ code: 500, msg: \"MAC address is required\" });\r\n    });\r\n}\r\n\r\nexports.findByMAC = (mac_addr) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Board.findOne({ where: { mac_addr: mac_addr } }).then(\r\n            board => {\r\n                if (board) resolve(board);\r\n                else reject({ code: 500, msg: \"board not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.setLocation = (board, location) => {\r\n    return new Promise((resolve, reject) => {\r\n        board.update({ location: location, active: true }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.authenticate = (mac_addr, password) => {\r\n    return new Promise((resolve, reject) => {\r\n        utils.encrypt([password]).then(\r\n            encrypted => db.Board.findOne({ where: { mac_addr: mac_addr, password: encrypted[0] } }).then(\r\n                board => {\r\n                    if (board) if (!board.active) resolve(board);\r\n                    else reject({ code: 500, msg: \"board already in use\" });\r\n                    else reject({ code: 500, msg: \"MAC address and password don't match\" });\r\n                }, error => reject({ code: 500, msg: error.message })),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.remove = (board_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Board.findById(board_id).then(\r\n            board => board.destroy().then(\r\n                () => resolve(),\r\n                error => reject({ code: 500, msg: error.message })),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.create({ type: attributes.type, name: attributes.name }).then(\r\n            model => resolve(model),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.list = () => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findAll({ attributes: ['id', 'type', 'name'] }).then(\r\n            models => resolve(models),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.update = (board_model_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.update({ type: attributes.type, name: attributes.name }).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.remove = (board_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.destroy().then(\r\n                    () => resolve(),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.setSensor = (board_model_id, sensor_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.hasSensor(sensor_id).then(\r\n                    success => {\r\n                        if (!success) model.addSensor(sensor_id).then(\r\n                            () => resolve(),\r\n                            error => reject({ code: 500, msg: error.message }));\r\n                        else reject({ code: 500, msg: \"sensor is already associated\" });\r\n                    }, error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.getSensors = (board_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.getSensors({ attributes: { exclude: ['created_at', 'updated_at'] } }).then(\r\n                    sensors => {\r\n                        sensors.forEach(element => delete element.dataValues.BoardSensor);\r\n                        resolve(sensors)\r\n                    },\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.removeSensor = (board_model_id, sensor_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.removeSensors(sensor_id).then(\r\n                    () => resolve(),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /boardmodel 01) Create Model\r\n * @apiGroup Board\r\n * @apiName createBoardModel\r\n * @apiDescription create a new board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} name board model name\r\n * @apiParam {string} type board type, must be 'environmental', 'wearable' or 'non-wearable'\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"Zolertia RE-Mote\",\r\n *          \"type\": \"environmental\"\r\n *     }\r\n * @apiSuccess {string} id created board model id\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.create(req.body).then(\r\n            model => res.status(200).json({ id: model.id }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\" );\r\n    }\r\n}\r\n\r\n/**\r\n* @api {get} /boardmodel 02) List Models\r\n* @apiGroup Board\r\n* @apiName listsBoardsModel\r\n* @apiDescription list all board models. \r\n* @apiVersion 1.0.0\r\n* @apiUse box\r\n*\r\n* @apiPermission admin\r\n* @apiSuccess {array} models list of board models\r\n* @apiSuccess {string} id id of each board model\r\n* @apiSuccess {string} type type of the model (must be 'environmental', 'wearable' or 'non-wearable')\r\n* @apiSuccess {string} name name of the model\r\n* @apiSuccessExample {json} Response example:\r\n* {\r\n*  \"models\": [\r\n*      {\r\n*          \"id\": \"5d93585b-f511-4fa8-b69e-692c2474d5e8\",\r\n*          \"type\": \"non-wearable\",\r\n*          \"name\": \"MySignals\"\r\n*      },\r\n*      {\r\n*          \"id\": \"d4710130-4c8c-4ade-96c7-0d5c00738eda\",\r\n*          \"type\": \"environmental\",\r\n*          \"name\": \"Zolertia RE-Mote\"\r\n*      }\r\n*  ]\r\n* }\r\n*/\r\nexports.list = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.list().then(\r\n            models => res.status(200).json({ models: models }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /boardmodel/:id 03) Update Model\r\n * @apiGroup Board\r\n * @apiName updateBoardModel\r\n * @apiDescription update a board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model id to update\r\n * @apiParam {string} name board model name\r\n * @apiParam {string} type board type, must be 'environmental', 'wearable' or 'non-wearable'\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"Zolertia RE-Mote\",\r\n *          \"type\": \"environmental\"\r\n *     }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.update(req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /boardmodel/:id 04) Delete Model\r\n * @apiGroup Board\r\n * @apiName deleteBoardModel\r\n * @apiDescription remove a board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model id to delete\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.remove(req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /boardmodel/:id/sensor 05) Add Sensor\r\n * @apiGroup Board\r\n * @apiName setSensors\r\n * @apiDescription add sensors to a board model\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {array} sensor_id sensors unique ID\r\n * @apiParamExample {json} Request example:\r\n * {\r\n *  \"sensor_id\": \"75a60f5f-ef3d-4556-9cdd-981894c8f1dc\"\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.setSensor = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.setSensor(req.params.id, req.body.sensor_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} boardmodel/:id/sensor 06) Get Sensors\r\n * @apiGroup Board\r\n * @apiName getSensors\r\n * @apiDescription list sensors of a board model\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model unique ID\r\n * @apiSuccess {array} models list of sensors\r\n * @apiSuccess {string} transducer transducer name\r\n * @apiSuccess {string} measure transducer measure\r\n * @apiSuccess {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiSuccess {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiSuccess {decimal} min_possible minimum possible value to sensor\r\n * @apiSuccess {decimal} max_possible maximum possible value to sensor\r\n * @apiSuccessExample {json} Request example:\r\n * {\r\n *  \"sensors\": [\r\n *      {\r\n *           \"id\": \"e783b552-567f-499b-b480-9d373fe62a17\"\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getSensors = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.getSensors(req.params.id).then(\r\n            sensors => res.status(200).json({ sensors: sensors }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} boardmodel/:id/sensor 07) Remove Sensor\r\n * @apiGroup Board\r\n * @apiName removeSensor\r\n * @apiDescription remove sensor from a board model \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model unique ID\r\n * @apiParam {string} sensor_id sensor to remove ID\r\n * @apiParamExample {json} Response example:\r\n * {\r\n *  \"sensor_id\": \"00397579-0a11-42ee-b522-b25e11630eda\"\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeSensor = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.removeSensor(req.params.id, req.body.sensor_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.message));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","module.exports.v1_0_0 = {\r\n    'board_model': require('./v1.0.0/board_model'),\r\n    'board': require('./v1.0.0/board'),\r\n    'manage':require('./v1.0.0/manage'),\r\n    'record': require('./v1.0.0/record'),\r\n    'sensor':require('./v1.0.0/sensor'),\r\n    'user': require('./v1.0.0/user'),\r\n    'vitabox': require('./v1.0.0/vitabox'),\r\n}","// ROUTES FOR OUR API\r\n// =============================================================================\r\nmodule.exports = (app) => {\r\n\r\n    var controllers = require('./controllers/index'),\r\n        versioning = require('express-routes-versioning')();\r\n\r\n\r\n    app\r\n        /*________________________________________________check\r\n        *_____________________USERS_______________________\r\n        *_________________________________________________*/\r\n        .post('/register', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.register,\r\n            \"2.0.0\": (req, res) => res.json({ error: 'invalid version' })\r\n        }))\r\n        .post('/login', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.login,\r\n        }))\r\n        .post('/chpass', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.changePassword,\r\n        }))\r\n        /*________________________________________________check\r\n        *____________________ VITABOX_____________________\r\n        *_________________________________________________*/\r\n        .post('/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.create\r\n        }))\r\n        .get('/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.list\r\n        }))\r\n        .get('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.find\r\n        }))\r\n        .get('/settings/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getSettings\r\n        }))\r\n        .put('/settings/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.setSettings\r\n        }))\r\n        .put('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.update\r\n        }))\r\n        .delete('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.delete\r\n        }))\r\n        .post('/vitabox/:id/register', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.register\r\n        }))\r\n        .post('/vitabox/:id/connect', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.connect\r\n        }))\r\n        .get('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getUsers\r\n        }))\r\n        .post('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addUser\r\n        }))\r\n        .delete('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removeUser\r\n        }))\r\n        .post('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addPatient\r\n        }))\r\n        .get('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getPatients\r\n        }))\r\n        .delete('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removePatient\r\n        }))\r\n        .post('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addBoard\r\n        }))\r\n        .get('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getBoards\r\n        }))\r\n        .delete('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removeBoard\r\n        }))\r\n        /*________________________________________________check\r\n        *__________________ BOARD MODEL___________________\r\n        *_________________________________________________*/\r\n        .post('/boardmodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.create\r\n        }))\r\n        .get('/boardmodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.list\r\n        }))\r\n        .put('/boardmodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.update\r\n        }))\r\n        .delete('/boardmodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.delete\r\n        }))\r\n        .post('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.setSensor\r\n        }))\r\n        .get('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.getSensors\r\n        }))\r\n        .delete('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.removeSensor\r\n        }))\r\n        .post('/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board.create\r\n        }))\r\n        /*________________________________________________check\r\n        *_____________________SENSOR______________________\r\n        *_________________________________________________*/\r\n        .post('/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.create\r\n        }))\r\n        .get('/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.list\r\n        }))\r\n        .put('/sensor/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.update\r\n        }))\r\n        .delete('/sensor/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.delete\r\n        }))\r\n        /*________________________________________________\r\n        *____________________RECORDS______________________\r\n        *_________________________________________________*/\r\n        .post('/record', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.create\r\n        }))\r\n        .get('/record/patient/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listByPatient\r\n        }))\r\n        .get('/record/board/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listByBoard\r\n        }))\r\n        .get('/record/sensor/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listBySensor\r\n        }))\r\n        /*________________________________________________\r\n        *_____________________TRASH_______________________\r\n        *_________________________________________________*/\r\n        .get('/destroy', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.destroyAll\r\n        }))\r\n        .get('/testdb', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.testDb\r\n        }))\r\n\r\n\r\n    app.all('*', (req, res) => {\r\n        res.status(404).json({ 'message': 'Route could not be found' });\r\n    });\r\n};","module.exports = require(\"path\");","module.exports = require(\"express\");","module.exports = require(\"os\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"fs\");","module.exports = require(\"crypto\");","var mongoose = require('mongoose');\r\nvar schema = new mongoose.Schema({\r\n    value: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    datetime: {\r\n        type: Date,\r\n        default: Date.now()\r\n    },\r\n    patient_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    board_id: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    sensor_id: {\r\n        type: String,\r\n        required: true\r\n    },\r\n}, { versionKey: false });\r\n\r\nmodule.exports = mongoose.model('Record', schema);","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Vitabox = sequelize.define('Vitabox', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    latitude: {\r\n      type: DataTypes.DECIMAL(10, 7),\r\n      allowNull: true,\r\n      defaultValue: null,\r\n      validate: {\r\n        min: {\r\n          args: -90,\r\n          msg: \"latitude minimum acceptable value is -90\"\r\n        },\r\n        max: {\r\n          args: 90,\r\n          msg: \"latitude maximum acceptable value is 90\"\r\n        }\r\n      }\r\n    },\r\n    longitude: {\r\n      type: DataTypes.DECIMAL(10, 7),\r\n      allowNull: true,\r\n      defaultValue: null,\r\n      validate: {\r\n        min: {\r\n          args: -180,\r\n          msg: \"longitude minimum acceptable value is -180\"\r\n        },\r\n        max: {\r\n          args: 180,\r\n          msg: \"longitude maximum acceptable value is 180\"\r\n        }\r\n      }\r\n    },\r\n    settings: {\r\n      type: DataTypes.JSON,\r\n      allowNull: true,\r\n      defaultValue: null,\r\n    },\r\n    address: {\r\n      type: DataTypes.STRING,\r\n      defaultValue: null,\r\n      validate: {\r\n        notEmpty: {\r\n          args:true,\r\n          msg: \"address must be defined\"\r\n        }\r\n      }\r\n    },\r\n    registered: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    active: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    }\r\n  }, { underscored: true });\r\n\r\n  Vitabox.associate = function (models) {\r\n    models.Vitabox.belongsToMany(models.User, { through: models.UserVitabox });\r\n    models.Vitabox.hasMany(models.Patient);\r\n    models.Vitabox.hasMany(models.Board);\r\n  };\r\n\r\n  return Vitabox;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var User = sequelize.define('User', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        email: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            unique:{\r\n                args: true,\r\n                msg: 'email already registered'\r\n            },\r\n        },\r\n        password: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false\r\n        },\r\n        admin: {\r\n            type: DataTypes.BOOLEAN,\r\n            defaultValue: false\r\n        }\r\n    }, {\r\n            scopes: {\r\n                profile: { attributes: { exclude: ['password'] } }\r\n            },\r\n            underscored: true\r\n        });\r\n\r\n    User.associate = function (models) {\r\n        models.User.belongsToMany(models.Vitabox, { through: models.UserVitabox });\r\n    };\r\n\r\n    return User;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var UserVitabox = sequelize.define('UserVitabox', {\r\n    sponsor: {\r\n        type: DataTypes.BOOLEAN,\r\n        defaultValue: false\r\n    }\r\n  }, { underscored: true });\r\n\r\n  return UserVitabox;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Sensor = sequelize.define('Sensor', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        transducer: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"transducer name must be defined\"\r\n                }\r\n            }\r\n        },\r\n        measure: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"transducer measure must be defined\"\r\n                }\r\n            }\r\n        },\r\n        min_acceptable: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            allowNull: false,\r\n            validate: {\r\n                isDecimal: {\r\n                    args: true,\r\n                    msg: \"minimum acceptable value must be defined\"\r\n                }\r\n            }\r\n        },\r\n        max_acceptable: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            allowNull: false,\r\n            validate: {\r\n                isDecimal: {\r\n                    args: true,\r\n                    msg: \"maximum acceptable value must be defined\"\r\n                }\r\n            }\r\n        },\r\n        min_possible: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            allowNull: false,\r\n            validate: {\r\n                isDecimal: {\r\n                    args: true,\r\n                    msg: \"minimum possible value must be defined\"\r\n                }\r\n            }\r\n        },\r\n        max_possible: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            validate: {\r\n                isDecimal: {\r\n                    args: true,\r\n                    msg: \"maximum possible value must be defined\"\r\n                }\r\n            }\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Sensor.associate = function (models) {\r\n        models.Sensor.belongsToMany(models.Boardmodel, { through: \"BoardSensor\" });\r\n    };\r\n\r\n    return Sensor;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Patient = sequelize.define('Patient', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        birthdate: {\r\n            type: DataTypes.DATEONLY,\r\n            allowNull:false\r\n        },\r\n        name: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"patient name must be defined\"\r\n                }\r\n            }\r\n        },\r\n        gender: {\r\n            type: DataTypes.ENUM,\r\n            values: ['undefined', 'male', 'female'],\r\n            defaultValue: 'undefined',\r\n            validate: {\r\n                isIn: {\r\n                    args: ['male', 'female', 'undefined'],\r\n                    msg: \"gender must be 'male', 'female' or 'undefined'\"\r\n                }\r\n            }\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Patient.associate = function (models) {\r\n        models.Patient.belongsTo(models.Vitabox);\r\n    };\r\n\r\n    return Patient;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Board = sequelize.define('Board', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        password: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false\r\n        },\r\n        location: {\r\n            type: DataTypes.STRING,\r\n            allowNull: true,\r\n            defaultValue: null\r\n        },\r\n        mac_addr: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            unique: {\r\n                args: true,\r\n                msg: 'MAC address already in use'\r\n            },\r\n            validate: {\r\n                is: {\r\n                    args: /^([0-9a-f]{2}[:]){7}([0-9a-f]{2})$/,\r\n                    msg: \"MAC addres must be valid\"\r\n                }\r\n            }\r\n        },\r\n        active: {\r\n            type: DataTypes.BOOLEAN,\r\n            defaultValue: false\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Board.associate = function (models) {\r\n        models.Board.belongsTo(models.Vitabox);\r\n        models.Board.belongsTo(models.Boardmodel);\r\n    };\r\n\r\n    return Board;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Boardmodel = sequelize.define('Boardmodel', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        type: {\r\n            type: DataTypes.ENUM,\r\n            values: [\"environmental\", \"wearable\", \"non-wearable\"],\r\n            validate: {\r\n                isIn: {\r\n                    args: [[\"environmental\", \"wearable\", \"non-wearable\"]],\r\n                    msg: \"board type must be environmental, wearable or non-wearable\"\r\n                }\r\n            }\r\n        },\r\n        name: {\r\n            type: DataTypes.STRING,\r\n            unique: {\r\n                args: true,\r\n                msg: 'board model already registered'\r\n            },\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"board model must be defined\"\r\n                }\r\n            }\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Boardmodel.associate = function (models) {\r\n        models.Boardmodel.hasMany(models.Board);\r\n        models.Boardmodel.belongsToMany(models.Sensor, { through: \"BoardSensor\" });\r\n    };\r\n\r\n    return Boardmodel;\r\n};","module.exports = require(\"sequelize\");","module.exports = require(\"dotenv\");","module.exports = require(\"cluster\");","// apidoc -i app/ -f .js -o docs/\r\n\r\n// server.js\r\n\r\n// BASE SETUP\r\n// =============================================================================\r\nvar cluster = require('cluster');\r\n// Get the env variables from .env\r\nrequire('dotenv').config();\r\n\r\nif (cluster.isMaster) {\r\n    var db = require('./app/models/index');\r\n    db.sequelize.sync().then(\r\n        () => {\r\n            require('./app/models/seed').seed(db).then(\r\n                () => {\r\n                    console.log('\\x1b[32m%s\\x1b[0m.', '(PLAIN) Connection established with MongoDB and MySQL');\r\n\r\n                    var cpus = require('os').cpus().length\r\n                    console.log('Master cluster setting up ' + cpus + ' workers...');\r\n\r\n                    for (var i = 0; i < cpus; i++) {\r\n                        cluster.fork();\r\n                    }\r\n\r\n                    cluster.on('exit', function (worker, code, signal) {\r\n                        console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal + '-> Starting a new worker');\r\n                        cluster.fork();\r\n                    });\r\n                },\r\n                error => {\r\n                    console.log('Unable to seed Databases.');\r\n                    console.log(error.message);\r\n                    process.exit(1);\r\n                }\r\n            )\r\n        },\r\n        error => {\r\n            console.log('Unable to connect to Databases.');\r\n            console.log(error);\r\n            process.exit(1);\r\n        });\r\n} else {\r\n    // call the packages we need\r\n    var express = require('express'),           // call express\r\n        // https = require('https'),\r\n        // fs = require(\"fs\"),\r\n        path = require('path'),\r\n        router = require('./app/router'),\r\n        bodyParser = require('body-parser'),\r\n        utils = require('./app/business/index').v1_0_0.utils;\r\n\r\n    // START THE SERVER\r\n    // =============================================================================\r\n    // define our app using express\r\n    var app = express();\r\n\r\n    // middleware to use for all requests\r\n    app.use(bodyParser.urlencoded({ extended: true }));\r\n    app.use(bodyParser.json());\r\n    app.use((req, res, next) => {\r\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n        res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization, Accept-Version\");\r\n        res.header(\"Access-Control-Allow-Methods\", \"POST, GET, PUT, DELETE, OPTIONS\");\r\n        res.header('Access-Control-Allow-Credentials', true);\r\n        if (process.env.NODE_ENV === \"development\") console.log(\"\\x1b[36m\" + req.method, req.url + \"\\x1b[0m\");\r\n       \r\n        if (req.method === \"OPTIONS\") {\r\n            return res.send(200);\r\n        } \r\n        if (req.headers && req.headers.authorization) {\r\n            utils.validateToken(req.headers.authorization, req.connection.remoteAddress).then(\r\n                client => {\r\n                    if (client) {\r\n                        req.client = client;\r\n                        next();\r\n                    } else res.status(500).send(\"Client not registered\");\r\n                },\r\n                error => res.status(500).send(error.message));\r\n        } else {\r\n            req.user = undefined;\r\n            next(); // make sure that proceeds to the next routes and don't stop here\r\n        }\r\n    });\r\n\r\n    // Present SPA\r\n    app.use('/', express.static(path.resolve(__dirname, 'public')));\r\n    // Present Documentation\r\n    app.use('/docs', express.static(path.resolve(__dirname, 'docs')));\r\n    // REGISTER ROUTES -------------------------------\r\n    router(app);\r\n\r\n    // Define the listenning port\r\n    var port = process.env.PORT || 8080;\r\n    // start http server\r\n    app.listen(port, () => {\r\n        // https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\r\n        console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server http listening on port', port);\r\n    });\r\n\r\n    // //set options to https\r\n    // const options = {\r\n    //     key: fs.readFileSync(__dirname + \"/app/keys/https_key.pem\"),\r\n    //     cert: fs.readFileSync(__dirname + \"/app/keys/https_cert.pem\"),\r\n    //     ca: fs.readFileSync(__dirname + \"/app/keys/https_ca.pem\"),\r\n    //     dhparam: fs.readFileSync(__dirname + \"/app/keys/https_dhparam.pem\")\r\n    // };\r\n    // // start https server\r\n    // https.createServer(options, app).listen(8080, () => {\r\n    //     console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server https listening on port', port);\r\n    // });\r\n}"],"sourceRoot":""}