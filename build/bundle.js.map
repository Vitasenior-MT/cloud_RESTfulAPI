{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/models/index.js","webpack:///./app/business/index.js","webpack:///./app/business/v1.0.0/utils.js","webpack:///./app/models/seed.js","webpack:///external \"mongoose\"","webpack:///external \"body-parser\"","webpack:///external \"express-routes-versioning\"","webpack:///./app/controllers/v1.0.0/vitabox.js","webpack:///./app/controllers/v1.0.0/user.js","webpack:///./app/controllers/v1.0.0/sensor.js","webpack:///./app/controllers/v1.0.0/record.js","webpack:///./app/controllers/v1.0.0/manage.js","webpack:///./app/controllers/v1.0.0/board.js","webpack:///./app/business/v1.0.0/vitabox.js","webpack:///./app/business/v1.0.0/user.js","webpack:///./app/business/v1.0.0/sensor.js","webpack:///./app/business/v1.0.0/record.js","webpack:///./app/business/v1.0.0/patient.js","webpack:///./app/business/v1.0.0/board.js","webpack:///./app/business/v1.0.0/board_model.js","webpack:///./app/controllers/v1.0.0/board_model.js","webpack:///./app/controllers/index.js","webpack:///./app/router.js","webpack:///external \"express\"","webpack:///external \"os\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"fs\"","webpack:///external \"crypto\"","webpack:///./app/models/mongodb/record.js","webpack:///./app/models/mysql/vitabox.js","webpack:///./app/models/mysql/user.js","webpack:///./app/models/mysql/user_vitabox.js","webpack:///./app/models/mysql/sensor.js","webpack:///./app/models/mysql/patient.js","webpack:///./app/models/mysql/board.js","webpack:///./app/models/mysql/board_model.js","webpack:///external \"sequelize\"","webpack:///external \"dotenv\"","webpack:///external \"cluster\"","webpack:///./server.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","mongoose","Sequelize","mongo_uri","mysql_uri","operatorsAliases","$eq","Op","eq","$ne","ne","$gte","gte","$gt","gt","$lte","lte","$lt","lt","$not","not","$in","in","$notIn","notIn","$is","is","$like","like","$notLike","notLike","$iLike","iLike","$notILike","notILike","$regexp","regexp","$notRegexp","notRegexp","$iRegexp","iRegexp","$notIRegexp","notIRegexp","$between","between","$notBetween","notBetween","$overlap","overlap","$contains","contains","$contained","contained","$adjacent","adjacent","$strictLeft","strictLeft","$strictRight","strictRight","$noExtendRight","noExtendRight","$noExtendLeft","noExtendLeft","$and","and","$or","or","$any","any","$all","all","$values","values","$col","col","connect","sequelize","logging","db","Boardmodel","Board","Patient","Sensor","UserVitabox","User","Vitabox","Record","keys","forEach","modelName","associate","connection","v1_0_0","boardmodel","board","patient","record","sensor","user","utils","vitabox","__dirname","crypto","fs","jwt","encrypt","to_encrypt","Promise","resolve","reject","element","index","cipher","createCipher","process","env","ALGORITHM","KEY","update","Buffer","from","final","decrypt","to_decrypt","decipher","createDecipher","createToken","obj","client_address","private_key","readFileSync","toString","undefined","Error","payload","id","role","constructor","options","expiresIn","algorithm","subject","sign","err","token","validateToken","public_key","algorithms","verify","findById","then","error","message","generatePassword","sk","Math","floor","random","deleteAll","raw","query","truncate","remove","testSeed","seed","count","where","admin","encrypted","bulkCreate","email","password","users","create","latitude","longitude","address","registered","active","addUsers","type","board_models","vitabox_id","boardmodel_id","location","transducer","measure","min_acceptable","max_acceptable","min_possible","max_possible","sensors","addSensors","require","business","req","res","client","data","status","json","register","findByEmail","body","params","addUser","result","remoteAddress","list","vitaboxes","find","settings","delete","flag","sponsor","getUsers","removeUser","user_id","addPatient","getPatients","patients","removePatient","patient_id","addBoard","getBoards","boards","removeBoard","board_id","login","changePassword","old_password","new_password","console","log","listByPatient","records","listByBoard","listBySensor","destroyAll","success","msg","testDb","attributes","findOne","current_user","findAll","exclude","getVitaboxes","dataValues","length","_isSponsor","destroy","is_sponsor","through","is_user","since","created_at","_isUser","createdAt","VitaboxId","include","model","Sensors","BoardSensor","hasUser","test","new_user","sensor_id","to_insert","push","datetime","insertMany","doc","equals","select","exec","listBySesnor","encrypted_name","birthdate","gender","mac_address","getBoardmodel","models","board_model_id","setSensors","getSensors","removeSensor","removeSensors","board_model","manage","app","controllers","versioning","post","1.0.0","2.0.0","put","schema","Schema","Number","required","Date","default","now","String","versionKey","DataTypes","define","UUID","defaultValue","UUIDV4","primaryKey","STRING","allowNull","DECIMAL","validate","min","args","max","JSON","BOOLEAN","underscored","belongsToMany","hasMany","unique","scopes","profile","notEmpty","isDecimal","DATEONLY","ENUM","isIn","belongsTo","cluster","config","isMaster","sync","cpus","fork","on","worker","code","signal","pid","exit","express","router","bodyParser","use","urlencoded","extended","next","header","headers","authorization","static","port","PORT","listen"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssmbly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","var mongoose = require('mongoose'),\r\n    Sequelize = require('sequelize');\r\n\r\nvar mongo_uri = \"\", mysql_uri = \"\";\r\n\r\nif (process.env.NODE_ENV===\"production\") {\r\n    mongo_uri = 'mongodb://localhost:27017/myproject';\r\n    mysql_uri = 'mysql://api:123qwe@localhost:3306/node';\r\n}else{\r\n    mongo_uri = 'mongodb://localhost:27017/test';\r\n    mysql_uri = 'mysql://api:123qwe@localhost:3306/test';\r\n}\r\n\r\nconst operatorsAliases = {\r\n    $eq: Sequelize.Op.eq,\r\n    $ne: Sequelize.Op.ne,\r\n    $gte: Sequelize.Op.gte,\r\n    $gt: Sequelize.Op.gt,\r\n    $lte: Sequelize.Op.lte,\r\n    $lt: Sequelize.Op.lt,\r\n    $not: Sequelize.Op.not,\r\n    $in: Sequelize.Op.in,\r\n    $notIn: Sequelize.Op.notIn,\r\n    $is: Sequelize.Op.is,\r\n    $like: Sequelize.Op.like,\r\n    $notLike: Sequelize.Op.notLike,\r\n    $iLike: Sequelize.Op.iLike,\r\n    $notILike: Sequelize.Op.notILike,\r\n    $regexp: Sequelize.Op.regexp,\r\n    $notRegexp: Sequelize.Op.notRegexp,\r\n    $iRegexp: Sequelize.Op.iRegexp,\r\n    $notIRegexp: Sequelize.Op.notIRegexp,\r\n    $between: Sequelize.Op.between,\r\n    $notBetween: Sequelize.Op.notBetween,\r\n    $overlap: Sequelize.Op.overlap,\r\n    $contains: Sequelize.Op.contains,\r\n    $contained: Sequelize.Op.contained,\r\n    $adjacent: Sequelize.Op.adjacent,\r\n    $strictLeft: Sequelize.Op.strictLeft,\r\n    $strictRight: Sequelize.Op.strictRight,\r\n    $noExtendRight: Sequelize.Op.noExtendRight,\r\n    $noExtendLeft: Sequelize.Op.noExtendLeft,\r\n    $and: Sequelize.Op.and,\r\n    $or: Sequelize.Op.or,\r\n    $any: Sequelize.Op.any,\r\n    $all: Sequelize.Op.all,\r\n    $values: Sequelize.Op.values,\r\n    $col: Sequelize.Op.col\r\n};\r\n\r\n// Create a new conntection to MongoDB server\r\nmongoose.connect(mongo_uri);\r\n// Create a new connection to MySQL server\r\nvar sequelize = new Sequelize(mysql_uri, { operatorsAliases: operatorsAliases, logging: false });\r\n\r\nconst db = {\r\n    'Boardmodel': require('./mysql/board_model')(sequelize, Sequelize),\r\n    'Board': require('./mysql/board')(sequelize, Sequelize),\r\n    'Patient': require('./mysql/patient')(sequelize, Sequelize),\r\n    'Sensor': require('./mysql/sensor')(sequelize, Sequelize),\r\n    'UserVitabox': require('./mysql/user_vitabox')(sequelize, Sequelize),\r\n    'User': require('./mysql/user')(sequelize, Sequelize),\r\n    'Vitabox': require('./mysql/vitabox')(sequelize, Sequelize),\r\n\r\n    'Record': require('./mongodb/record')\r\n}\r\n\r\nObject.keys(db).forEach(modelName => {\r\n    if (db[modelName].associate) db[modelName].associate(db);\r\n});\r\n\r\ndb.sequelize = sequelize;\r\ndb.mongoose = mongoose.connection;\r\n\r\nmodule.exports = db;","module.exports.v1_0_0 = {\r\n    'boardmodel':require('./v1.0.0/board_model'),\r\n    'board': require('./v1.0.0/board'),\r\n    'patient':require('./v1.0.0/patient'),\r\n    'record': require('./v1.0.0/record'),\r\n    'sensor':require('./v1.0.0/sensor'),\r\n    'user': require('./v1.0.0/user'),\r\n    'utils': require('./v1.0.0/utils'),\r\n    'vitabox': require('./v1.0.0/vitabox'),\r\n};","var crypto = require(\"crypto\"),\r\n    fs = require(\"fs\"),\r\n    jwt = require('jsonwebtoken'),\r\n    db = require('../../models/index');\r\n\r\nexports.encrypt = function (to_encrypt) {\r\n    return new Promise((resolve, reject) => {\r\n        to_encrypt.forEach((element, index) => {\r\n            let cipher = crypto.createCipher(process.env.ALGORITHM, process.env.KEY);\r\n            return to_encrypt[index] = cipher.update(Buffer.from(element), 'utf8', 'hex') + cipher.final('hex');\r\n        });\r\n        resolve(to_encrypt);\r\n    });\r\n}\r\n\r\nexports.decrypt = function (to_decrypt) {\r\n    let decipher = crypto.createDecipher(process.env.ALGORITHM, process.env.KEY);\r\n    return decipher.update(to_decrypt, 'hex', 'utf8') + decipher.final('utf8');\r\n}\r\n\r\nexports.createToken = function (obj, client_address) {\r\n    return new Promise((resolve, reject) => {\r\n        let private_key = fs.readFileSync(__dirname + '/../../keys/key.pem').toString();\r\n        if (private_key === undefined) reject(new Error(\"error on load private key\"));\r\n\r\n        let payload = {\r\n            id: obj.id,\r\n            role: obj.constructor.name\r\n        };\r\n        let options = {\r\n            expiresIn: \"8h\",\r\n            algorithm: \"RS256\",\r\n            subject: client_address\r\n        };\r\n\r\n        jwt.sign(payload, private_key, options, function (err, token) {\r\n            if (err) reject(err);\r\n            resolve(token);\r\n        });\r\n    });\r\n}\r\n\r\nexports.validateToken = function (token, client_address) {\r\n    return new Promise((resolve, reject) => {\r\n        let public_key = fs.readFileSync(__dirname + '/../../keys/cert.pem').toString();\r\n        if (public_key === undefined) reject(\"error on load public key\");\r\n\r\n        let options = {\r\n            algorithms: [\"RS256\"],\r\n            subject: client_address\r\n        };\r\n\r\n        jwt.verify(token, public_key, options, function (err, payload) {\r\n            if (err) reject(err);\r\n            db[payload.role].findById(payload.id).then(\r\n                obj => resolve(obj),\r\n                error => reject(error.message)\r\n            );\r\n        });\r\n    });\r\n}\r\n\r\nexports.generatePassword = () => {\r\n    let sk = \"\", i, j, base = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n    for (i = 0; i < 10; i++) {\r\n        sk += base[Math.floor(Math.random() * 61)];\r\n    }\r\n    return sk;\r\n}\r\n\r\n\r\n// JUST TO DEVELOPMENT\r\nexports.deleteAll = function () {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var options = { raw: true };\r\n\r\n        db.sequelize.query('SET FOREIGN_KEY_CHECKS = 0', options).then(() => {\r\n            db.UserVitabox.truncate().then(() => {\r\n                db.User.truncate().then(() => {\r\n                    db.Vitabox.truncate().then(() => {\r\n                        db.Boardmodel.truncate().then(() => {\r\n                            db.Board.truncate().then(() => {\r\n                                db.Patient.truncate().then(() => {\r\n                                    db.Record.remove({}, () => {\r\n                                        db.sequelize.query('SET FOREIGN_KEY_CHECKS = 1', options).then(\r\n                                            () => resolve(),\r\n                                            error => reject(error));\r\n                                    });\r\n                                }, error => reject(error));\r\n                            }, error => reject(error));\r\n                        }, error => reject(error));\r\n                    }, error => reject(error));\r\n                }, error => reject(error));\r\n            }, error => reject(error));\r\n        }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.testSeed = function () {\r\n    return new Promise((resolve, reject) => {\r\n        require('../../models/seed').testSeed(db).then(\r\n            () => resolve(),\r\n            error => reject(error));\r\n    });\r\n}","var utils = require('../business/v1.0.0/utils');\r\n\r\nmodule.exports.seed = (db) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n\r\n        db.User.count({ where: { admin: true } }).then(\r\n            count => {\r\n                if (count < 1) {\r\n                    utils.encrypt([\"admin@a.aa\", \"user1@a.aa\", \"user2@a.aa\", \"123qweASD\", \"passvita\"])\r\n                        .then(\r\n                            encrypted => {\r\n\r\n                                db.User.bulkCreate([\r\n                                    { \"email\": encrypted[0], \"admin\": true, \"password\": encrypted[3] },\r\n                                    { \"email\": encrypted[1], \"password\": encrypted[3] },\r\n                                    { \"email\": encrypted[2], \"password\": encrypted[3] }\r\n                                ]).then(\r\n                                    users => db.Vitabox.create({ \"latitude\": \"39.6003075\", \"longitude\": \"-8.3906627\", \"address\": \"Av. Dr. Aurélio Ribeiro 3, Tomar, Portugal\", \"registered\": true, \"active\": true, \"password\": encrypted[4] }).then(\r\n                                        vitabox => vitabox.addUsers([users[1].id, users[2].id]).then(\r\n                                            () => db.Boardmodel.bulkCreate([\r\n                                                { \"name\": \"Zolertia RE-Mote\", \"type\": \"environmental\" },\r\n                                                { \"name\": \"Xiaomi MI Band\", \"type\": \"wearable\" },\r\n                                                { \"name\": \"MySignals\", \"type\": \"non-wearable\" }\r\n                                            ]).then(\r\n                                                board_models => db.Board.bulkCreate([\r\n                                                    { \"vitabox_id\": vitabox.id, \"boardmodel_id\": board_models[0].id, \"location\": \"kitchen\" },\r\n                                                    { \"vitabox_id\": vitabox.id, \"boardmodel_id\": board_models[1].id },\r\n                                                    { \"vitabox_id\": vitabox.id, \"boardmodel_id\": board_models[2].id, \"location\": \"bedroom\" }\r\n                                                ]).then(\r\n                                                    () => db.Sensor.bulkCreate([\r\n                                                        { \"transducer\": \"dht22\", \"measure\": \"temperature\", \"min_acceptable\": \"10\", \"max_acceptable\": \"25\", \"min_possible\": \"-20\", \"max_possible\": \"50\" },\r\n                                                        { \"transducer\": \"dht22\", \"measure\": \"humidity\", \"min_acceptable\": \"30\", \"max_acceptable\": \"50\", \"min_possible\": \"20\", \"max_possible\": \"60\" },\r\n                                                        { \"transducer\": \"mq-7\", \"measure\": \"carbon_monoxide\", \"min_acceptable\": \"2\", \"max_acceptable\": \"10\", \"min_possible\": \"10\", \"max_possible\": \"500\" }\r\n                                                    ]).then(\r\n                                                        sensors => board_models[0].addSensors([sensors[0].id, sensors[1].id]).then(\r\n                                                            () => resolve(),\r\n                                                            error => reject(error)),\r\n                                                        error => reject(error)),\r\n                                                    error => reject(error)),\r\n                                                error => reject(error)),\r\n                                            error => reject(error)),\r\n                                        error => reject(error)),\r\n                                    error => reject(error));\r\n                            }, error => reject(error));\r\n                } else resolve();\r\n            }, error => reject(error));\r\n    });\r\n\r\n}\r\n\r\nmodule.exports.testSeed = (db) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        utils.encrypt([\"admin@a.aa\", \"123qweASD\"])\r\n            .then(\r\n                encrypted => {\r\n\r\n                    db.User.create({ \"email\": encrypted[0], \"admin\": true, \"password\": encrypted[1] }).then(\r\n                        () => resolve(),\r\n                        error => reject(error));\r\n                }, error => reject(error));\r\n    });\r\n}","module.exports = require(\"mongoose\");","module.exports = require(\"body-parser\");","module.exports = require(\"express-routes-versioning\");","var business = require('../../business/index').v1_0_0;\r\n/**\r\n * @apiDefine box\r\n * \r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiError {string} error error description\r\n */\r\n\r\n/**\r\n * @api {post} /vitabox 01) Create\r\n * @apiGroup Vitabox\r\n * @apiName create\r\n * @apiDescription create a new vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiSuccess {string} id created box id\r\n * @apiSuccess {string} password created box serial key\r\n */\r\nexports.create = function (req, res) {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.vitabox.create().then(\r\n            data => res.status(200).json(data),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/register 02) Register\r\n * @apiGroup Vitabox\r\n * @apiName vitaboxRegister\r\n * @apiDescription register vitabox, the user must be authenticated as \"admin\" and will define the \"sponsor\" account to the vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id vitabox id\r\n * @apiParam {decimal} latitude min: -90, max: 90 (based on google maps coordinates)\r\n * @apiParam {decimal} longitude min: -180, max: 180 (based on google maps coordinates)\r\n * @apiParam {string} address full address with postal code\r\n * @apiParam {string} email sponsor's email\r\n * @apiParamExample {json} Request example to admin:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"email\": \"sponsor@example.com\"\r\n *     }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly registered\r\n */\r\nexports.register = function (req, res) {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.user.findByEmail(req.body.email).then(\r\n            user => {\r\n                business.vitabox.register(req.params.id, req.body).then(\r\n                    vitabox => {\r\n                        business.vitabox.addUser(req.client, vitabox.id, user.id, true).then(\r\n                            () => res.status(200).json({ result: true }),\r\n                            error => res.status(500).json({ error: error.message }));\r\n                    },\r\n                    error => res.status(500).json({ error: error.message }));\r\n            },\r\n            error => res.status(500).json({ error: error.message }));\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/connect 03) Request Token\r\n * @apiGroup Vitabox\r\n * @apiName vitaboxLogin\r\n * @apiDescription request for a token to the vitabox\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiParam {string} :id vitabox id\r\n * @apiParam {string} password password defined by sponsor on registration\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.connect = function (req, res) {\r\n    business.vitabox.connect(req.params.id, req.body.password).then(\r\n        data => {\r\n            business.utils.createToken(data, req.connection.remoteAddress).then(\r\n                token => res.status(200).json({ token: token }),\r\n                error => res.status(500).json({ error: error.message }));\r\n        },\r\n        error => res.status(500).json({ error: error.message })\r\n    );\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox 04) List\r\n * @apiGroup Vitabox\r\n * @apiName list\r\n * @apiDescription list all vitaboxes related to the user. \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission any user\r\n * @apiSuccess {array} vitaboxes list of vitaboxes\r\n * @apiSuccess {string} id id of each vitabox\r\n * @apiSuccess {decimal} latitude latitude of each vitabox, min: -90, max: 90 (based on google maps coordinates)\r\n * @apiSuccess {decimal} longitude longitude of each vitabox, min: -180, max: 180 (based on google maps coordinates)\r\n * @apiSuccess {string} address full address of each vitabox\r\n * @apiSuccess {boolean} sponsor flag indicating if the requester is sponsor of that vitabox (only if NOT admin)\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox (only if admin)\r\n * @apiSuccess {boolean} registered flag indicating if the vitabox was already registered (only if admin)\r\n * @apiSuccess {boolean} active flag indicating if the vitabox was already activated (only if admin)\r\n * @apiSuccess {datetime} created_at date of production (only if admin)\r\n * @apiSuccess {datetime} updated_at date of last update (only if admin)\r\n * @apiSuccessExample {json} Response example to common user:\r\n * {\r\n *  \"vitaboxes\": [\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"sponsor\": true\r\n *      },\r\n *      {\r\n *          \"id\": \"a6abfa76-68f0-4325-b3ab-6c540a800284\",\r\n *          \"latitude\": \"51.5058372\",\r\n *          \"longitude\": \"-0.1899126\",\r\n *          \"address\": \"Kensington Gardens, London W8 4PX, Reino Unido\",\r\n *          \"sponsor\": false\r\n *      }\r\n *  ]\r\n * }\r\n * @apiSuccessExample {json} Response example to admin:\r\n * {\r\n *  \"vitaboxes\": [\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          },\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"registered\": false,\r\n *          \"active\": false,\r\n *          \"created_at\": \"2018-02-22T11:57:53.000Z\",\r\n *          \"updated_at\": \"2018-02-22T11:57:53.000Z\"\r\n *      }\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"51.5058372\",\r\n *          \"longitude\": \"-0.1899126\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          },\r\n *          \"address\": \"Kensington Gardens, London W8 4PX, Reino Unido\",\r\n *          \"registered\": false,\r\n *          \"active\": false,\r\n *          \"created_at\": \"2018-02-22T11:57:53.000Z\",\r\n *          \"updated_at\": \"2018-02-22T11:57:53.000Z\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.list = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.list(req.client).then(\r\n            data => res.status(200).json({ vitaboxes: data }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id 05) Find\r\n * @apiGroup Vitabox\r\n * @apiName find\r\n * @apiDescription find a specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {string} id vitabox unique ID\r\n * @apiSuccess {decimal} latitude vitabox latitude, min: -90, max: 90 (based on google maps coordinates)\r\n * @apiSuccess {decimal} longitude vitabox longitude, min: -180, max: 180 (based on google maps coordinates)\r\n * @apiSuccess {string} address vitabox full address \r\n * @apiSuccess {boolean} sponsor flag indicating if the requester is sponsor of that vitabox (only if NOT admin)\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox (only if admin)\r\n * @apiSuccess {boolean} registered flag indicating if the vitabox was already registered (only if admin)\r\n * @apiSuccess {boolean} active flag indicating if the vitabox was already activated (only if admin)\r\n * @apiSuccess {datetime} created_at date of production (only if admin)\r\n * @apiSuccess {datetime} updated_at date of last update (only if admin)\r\n * @apiSuccessExample {json} Response example to common user:\r\n * {\r\n *  \"vitabox\": {\r\n *      \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *      \"latitude\": \"38.8976763\",\r\n *      \"longitude\": \"-77.0387185\",\r\n *      \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *      \"sponsor\": false\r\n *  }\r\n * }\r\n * @apiSuccessExample {json} Response example to admin:\r\n * {\r\n *  \"vitabox\": {\r\n *      \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *      \"latitude\": \"38.8976763\",\r\n *      \"longitude\": \"-77.0387185\",\r\n *      \"settings\":{\r\n *          \"cnfg1\": \"true\",\r\n *          \"cnfg2\": \"12345\",\r\n *          \"cnfg3\": \"some other config\"\r\n *      },\r\n *      \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *      \"created_at\": \"2018-02-19T11:38:32.000Z\",\r\n *      \"updated_at\": \"2018-02-23T16:12:47.000Z\"\r\n *  }\r\n * }\r\n */\r\nexports.find = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.find(req.client, req.params.id).then(\r\n            data => res.status(200).json({ vitabox: data }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/settings 06) Settings\r\n * @apiGroup Vitabox\r\n * @apiName settings\r\n * @apiDescription returns the vitabox settings\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox (only if admin)\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *      \"settings\":{\r\n *          \"cnfg1\": \"true\",\r\n *          \"cnfg2\": \"12345\",\r\n *          \"cnfg3\": \"some other config\"\r\n *      },\r\n * }\r\n */\r\nexports.settings = function (req, res) {\r\n    if (req.client.constructor.name === \"Vitabox\" && req.client.id === req.params.id) {\r\n        res.status(200).json({ settings: req.client.settings })\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id 07) Update\r\n * @apiGroup Vitabox\r\n * @apiName update\r\n * @apiDescription update a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {decimal} latitude min: -90, max: 90 (based on google maps coordinates)\r\n * @apiParam {decimal} longitude min: -180, max: 180 (based on google maps coordinates)\r\n * @apiParam {string} address full address with postal code\r\n * @apiParam {json} settings configuration's structure (only if admin)\r\n * @apiParamExample {json} Request example to common user:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\"\r\n *     }\r\n * @apiParamExample {json} Request example to admin:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          }\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.update = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.update(req.client, req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id 08) Delete\r\n * @apiGroup Vitabox\r\n * @apiName delete\r\n * @apiDescription list all users related with the vitabox if the requester is related too.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.delete = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.delete(req.client, req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/user 09) Add User\r\n * @apiGroup Vitabox\r\n * @apiName addUser\r\n * @apiDescription add user to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} email email of the user to add\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"email\": \"user-example@some.thing\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.addUser = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        let flag = req.body.sponsor ? true : false;\r\n        business.user.findByEmail(req.body.email).then(\r\n            user => business.vitabox.addUser(req.client, req.params.id, user.id, flag).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(500).json({ error: error.message })),\r\n            error => res.status(500).json({ error: error.message }));\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/user 10) Get Users\r\n * @apiGroup Vitabox\r\n * @apiName getUsers\r\n * @apiDescription get users of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} users vitabox users list\r\n * @apiSuccess {string} id id of each user\r\n * @apiSuccess {string} email email of each user\r\n * @apiSuccess {datetime} since relationship date with the vitabox\r\n * @apiSuccess {boolean} sponsor flag indicating if the user is sponsor of the vitabox\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"users\": [\r\n *      {\r\n *          \"id\": \"585402ef-68dd-44a4-a44b-04152e659d11\",\r\n *          \"email\": \"donaldtrump@usa.com\",\r\n *          \"since\": \"2018-02-19T14:41:13.000Z\",\r\n *          \"sponsor\": false\r\n *      },\r\n *      {\r\n *          \"id\": \"78007a69-baa2-4b24-b936-234883811b6a\",\r\n *          \"email\": \"queenelizabeth@majesty.uk\",\r\n *          \"since\": \"2018-02-19T14:40:14.000Z\",\r\n *          \"sponsor\": true\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getUsers = function (req, res) {\r\n    business.vitabox.getUsers(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n        data => res.status(200).json({ users: data }),\r\n        error => res.status(500).json({ error: error.message })\r\n    );\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/user 11) Remove User\r\n * @apiGroup Vitabox\r\n * @apiName removeUser\r\n * @apiDescription remove user from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} user_id user unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"user_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeUser = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.removeUser(req.client, req.params.id, req.body.user_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/patient 12) Add Patient\r\n * @apiGroup Vitabox\r\n * @apiName addPatient\r\n * @apiDescription add patient to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} name patient name\r\n * @apiParam {date} birthdate patient birthdate (date only)\r\n * @apiParam {string} gender patient gender (must be 'male', 'female' or 'undefined')\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"José António\",\r\n *          \"birthdate\": \"1987-02-28\",\r\n *          \"gender\": \"male\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.addPatient = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.patient.create(req.body).then(\r\n            patient => business.vitabox.addPatient(req.client, req.params.id, patient.id).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(500).json({ error: error.message })),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/patients 13) Get Patients\r\n * @apiGroup Vitabox\r\n * @apiName getPatients\r\n * @apiDescription get patients of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} patients vitabox patients list\r\n * @apiSuccess {string} id id of each patient\r\n * @apiSuccess {date} birthdate patient birthdate (date only)\r\n * @apiSuccess {string} name name of each patient\r\n * @apiSuccess {string} gender patient gender (must be 'male', 'female' or 'undefined')\r\n * @apiSuccess {datetime} since relationship date with the vitabox \r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"patients\": [\r\n *      {\r\n *          \"id\": \"a77ea0fe-5e34-4189-9702-95cb69b4cd1d\",\r\n *          \"birthdate\": \"1987-02-28\",\r\n *          \"name\": \"José António\",\r\n *          \"gender\": \"male\",\r\n *          \"since\": \"2018-02-19T14:55:59.000Z\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getPatients = function (req, res) {\r\n    business.vitabox.getPatients(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n        data => res.status(200).json({ patients: data }),\r\n        error => res.status(500).json({ error: error.message })\r\n    );\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/patient 14) Remove Patient\r\n * @apiGroup Vitabox\r\n * @apiName removePatient\r\n * @apiDescription remove patient from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} patient_id patient unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"patient_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removePatient = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.removePatient(req.client, req.params.id, req.body.patient_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/board 15) Add Board\r\n * @apiGroup Vitabox\r\n * @apiName addBoard\r\n * @apiDescription add board to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} location place where the board is located, if wearable is null\r\n * @apiParam {string} model model id of the board\r\n * @apiParam {string} mac_address board MAC address\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"location\": \"kitchen\",\r\n *          \"model\":\"5d93585b-f511-4fa8-b69e-692c2474d5e8\",\r\n *          \"mac_address\": \"00:19:B9:FB:E2:58\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.addBoard = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.board.create(req.body).then(\r\n            board => business.vitabox.addBoard(req.client, req.params.id, board.id).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(500).json({ error: error.message })),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/board 16) Get Boards\r\n * @apiGroup Vitabox\r\n * @apiName getBoards\r\n * @apiDescription get boards of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} boards vitabox boards list\r\n * @apiSuccess {string} id id of each board\r\n * @apiSuccess {string} location place where the board is located (house division)\r\n * @apiSuccess {string} mac_address board MAC address\r\n * @apiSuccess {datetime} created_at register day to the vitabox\r\n * @apiSuccess {json} BoardModel model of each board, contains an id, type and name\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"boards\": [\r\n *      {\r\n *          \"id\": \"983227e9-e1dc-410e-829d-1636627397ba\",\r\n *          \"location\": \"kitchen\",\r\n *          \"mac_address\": \"00:19:B9:FB:E2:58\",\r\n *          \"created_at\": \"2018-02-22T15:25:50.000Z\",\r\n *          \"BoardModel\": {\r\n *              \"id\": \"1920ed05-0a24-4611-b822-5da7a58ba8bb\",\r\n *              \"type\": \"environmental\",\r\n *              \"name\": \"Zolertia RE-Mote\",\r\n *              \"Sensors\": [\r\n *                  {\r\n *                      \"id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *                      \"transducer\": \"dht22\",\r\n *                      \"measure\": \"temperature\",\r\n *                      \"min_acceptable\": \"10.00000\",\r\n *                      \"max_acceptable\": \"25.00000\",\r\n *                      \"min_possible\": \"-20.00000\",\r\n *                      \"max_possible\": \"50.00000\"\r\n *                  }\r\n *              ]\r\n *          }\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getBoards = function (req, res) {\r\n    business.vitabox.getBoards(req.client.constructor.name === \"User\", req.client, req.params.id).then(\r\n        data => res.status(200).json({ boards: data }),\r\n        error => res.status(500).json({ error: error.message })\r\n    );\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/patient 17) Remove Board\r\n * @apiGroup Vitabox\r\n * @apiName removeBoard\r\n * @apiDescription remove board from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} board_id board unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"board_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeBoard = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.vitabox.removeBoard(req.client, req.params.id, req.body.board_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n/**\r\n * @apiDefine auth\r\n * \r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiError {string} error error description\r\n */\r\n\r\n/**\r\n * @api {post} /register 01) Register user\r\n * @apiGroup Authentication\r\n * @apiName userRegister\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.register = function (req, res) {\r\n    business.user.register(req.body.email, req.body.password).then(\r\n        user => {\r\n            business.utils.createToken(user, req.connection.remoteAddress).then(\r\n                token => res.status(200).json({ token: token, user: user.id }),\r\n                error => res.status(500).json({ error: error.message })\r\n            );\r\n        },\r\n        error => res.status(500).json({ error: error.message })\r\n    );\r\n}\r\n\r\n/**\r\n * @api {post} /login 02) Login user\r\n * @apiGroup Authentication\r\n * @apiName userLogin\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.login = function (req, res) {\r\n    business.user.login(req.body.email, req.body.password).then(\r\n        user => {\r\n            business.utils.createToken(user, req.connection.remoteAddress).then(\r\n                token => res.status(200).json({ token: token, user: user.id }),\r\n                error => res.status(500).json({ error: error.message })\r\n            );\r\n        },\r\n        error => res.status(500).json({ error: error.message }));\r\n}\r\n\r\n/**\r\n * @api {post} /chpass 03) Change password\r\n * @apiGroup Authentication\r\n * @apiName changePassword\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiParam {string} old_password old password\r\n * @apiParam {string} new_password new password\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.changePassword = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.user.changePassword(req.client.id, req.body.old_password, req.body.new_password).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message }));\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /sensor 01) Create\r\n * @apiGroup Sensor\r\n * @apiName createSensor\r\n * @apiDescription create a new sensor.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} transducer transducer name\r\n * @apiParam {string} measure transducer measure\r\n * @apiParam {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiParam {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiParam {decimal} min_possible minimum possible value to sensor\r\n * @apiParam {decimal} max_possible maximum possible value to sensor\r\n * @apiParamExample {json} Request example:\r\n *      {\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n * @apiSuccess {string} id created sensor id\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.create(req.body).then(\r\n            sensor => res.status(200).json({ id: sensor.id }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /sensor 02) List\r\n * @apiGroup Sensor\r\n * @apiName listSensors\r\n * @apiDescription list all sensors. \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n *\r\n * @apiPermission admin\r\n * @apiSuccess {array} models list of sensors\r\n * @apiSuccess {string} transducer transducer name\r\n * @apiSuccess {string} measure transducer measure\r\n * @apiSuccess {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiSuccess {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiSuccess {decimal} min_possible minimum possible value to sensor\r\n * @apiSuccess {decimal} max_possible maximum possible value to sensor\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"sensors\": [\r\n *      {\r\n *          \"transducer\": \"dht22\",\r\n *          \"measure\":\"temperature\",\r\n *          \"min_acceptable\": \"10\",\r\n *          \"max_acceptable\": \"25\",\r\n *          \"min_possible\": \"-20\",\r\n *          \"max_possible\": \"50\"\r\n *      },\r\n *      {\r\n *          \"transducer\": \"mq-7\",\r\n *          \"measure\":\"carbon_monoxide\",\r\n *          \"min_acceptable\": \"2\",\r\n *          \"max_acceptable\": \"10\",\r\n *          \"min_possible\": \"10\",\r\n *          \"max_possible\": \"500\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.list = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.list().then(\r\n            sensors => res.status(200).json({ sensors: sensors }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /sensor/:id 03) Update\r\n * @apiGroup Sensor\r\n * @apiName updateSensor\r\n * @apiDescription update a sensor.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor id to update\r\n * @apiParam {string} transducer transducer name\r\n * @apiParam {string} measure transducer measure\r\n * @apiParam {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiParam {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiParam {decimal} min_possible minimum possible value to sensor\r\n * @apiParam {decimal} max_possible maximum possible value to sensor\r\n * @apiParamExample {json} Request example:\r\n *      {\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        console.log(req.client.admin);\r\n        business.sensor.update(req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /sensor/:id 04) Delete\r\n * @apiGroup Sensor\r\n * @apiName deleteSensor\r\n * @apiDescription remove a sensor\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor ID to delete\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensor.remove(req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /record 1) Receive\r\n * @apiGroup Record\r\n * @apiName createRecord\r\n * @apiDescription receive data from vitabox about it sensors\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox\r\n * @apiParam {decimal} value value catched\r\n * @apiParam {datetime} datetime moment when the value was catched\r\n * @apiParam {string} patient_id patient unique ID related to the value, may be null or omitted\r\n * @apiParam {string} board_id board unique ID related to the value\r\n * @apiParam {string} sensor_id sensor unique ID related to the value\r\n * @apiParamExample {json} Response example:\r\n * {\r\n *  \"records\":[\r\n *      {\r\n *          \"value\": 10,\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"value\": 13,\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n}\r\n */\r\nexports.create = function (req, res) {\r\n    // if (req.client.constructor.name === \"Vitabox\") {\r\n    //     business.record.create(req.body.records).then(\r\n    //         data => res.status(201).json({ result: true }),\r\n    //         error => res.status(500).json({ result: false, error: error.message }));\r\n    // } else {\r\n    //     res.status(500).json({ error: \"Unauthorized\" });\r\n    // }\r\n}\r\n\r\n/**\r\n * @api {post} /record/patient/:id 2) List by Patient\r\n * @apiGroup Record\r\n * @apiName listRecordsByPatient\r\n * @apiDescription list all records by patient\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :id patient unique ID\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {string} patient_id patient unique ID related to the value\r\n * @apiSuccess {string} board_id board unique ID related to the value\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listByPatient = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.record.listByPatient(req.client, req.params.id).then(\r\n            data => res.status(201).json({ records: data }),\r\n            error => res.status(500).json({ error: error.message }));\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /record/board/:id 3) List by Board\r\n * @apiGroup Record\r\n * @apiName listRecordsByBoard\r\n * @apiDescription list all records by board\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :id board unique ID\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {string} patient_id patient unique ID related to the value\r\n * @apiSuccess {string} board_id board unique ID related to the value\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listByBoard = function (req, res) {\r\n    if (req.client.constructor.name === \"User\") {\r\n        business.record.listByBoard(req.client, req.params.id).then(\r\n            data => res.status(201).json({ records: data }),\r\n            error => res.status(500).json({ error: error.message }));\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /record/sensor/:id 4) List by Sensor\r\n * @apiGroup Record\r\n * @apiName listRecordsBySensor\r\n * @apiDescription list all records by sensor\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor unique ID\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {string} patient_id patient unique ID related to the value\r\n * @apiSuccess {string} board_id board unique ID related to the value\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"patient_id\": \"7d9db945-d3f4-471a-a0f4-37f69c171dea\",\r\n *          \"board_id\": \"f2340471-23e2-4891-bb89-14888abcc29e\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listBySensor = function (req, res) {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.record.listBySensor(req.client, req.params.id).then(\r\n            data => res.status(201).json({ records: data }),\r\n            error => res.status(500).json({ error: error.message }));\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\nexports.destroyAll = function (req, res) {\r\n    business.utils.deleteAll().then(\r\n        () => res.status(200).json({ success: true }),\r\n        error => res.status(500).json({ msg: error.message })\r\n    );\r\n}\r\n\r\nexports.testDb = function (req, res) {\r\n    business.utils.deleteAll().then(\r\n        () => business.utils.testSeed().then(\r\n            res.status(200).json({ success: true }),\r\n            error => res.status(500).json({ msg: error.message })),\r\n        error => res.status(500).json({ msg: error.message }));\r\n}","var business = require('../../business/index').v1_0_0;\r\n","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.create = function () {\r\n    return new Promise((resolve, reject) => {\r\n        let password = utils.generatePassword();\r\n        utils.encrypt([password]).then(\r\n            encrypted => {\r\n                db.Vitabox.create({ password: encrypted[0] }).then(\r\n                    vitabox => resolve({\r\n                        id: vitabox.id,\r\n                        password: password\r\n                    }),\r\n                    error => reject(error));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.register = function (vitabox_id, attributes) {\r\n    return new Promise((resolve, reject) => {\r\n        if (attributes.address) {\r\n            db.Vitabox.findOne({ where: { id: vitabox_id, registered: false } }).then(vitabox => {\r\n                if (vitabox) {\r\n                    vitabox.update({ registered: true, address: attributes.address, longitude: attributes.longitude, latitude: attributes.latitude }).then(\r\n                        () => resolve(vitabox),\r\n                        error => reject(error));\r\n                } else reject(new Error(\"Vitabox already registered or doesn´t exist\"));\r\n            }, error => reject(error));\r\n        } else reject(new Error(\"Vitabox address must be defined\"));\r\n    });\r\n}\r\n\r\nexports.connect = function (vitabox_id, password) {\r\n    return new Promise((resolve, reject) => {\r\n        utils.encrypt([password]).then(\r\n            encrypted => {\r\n                db.Vitabox.findOne({ where: { password: encrypted[0], id: vitabox_id, registered: true } }).then(\r\n                    vitabox => {\r\n                        if (vitabox) {\r\n                            vitabox.update({ active: true }).then(\r\n                                () => resolve(vitabox),\r\n                                error => reject(error));\r\n                        } else reject(new Error(\"vitabox not found, verify if was already created and registered\"));\r\n                    }, error => reject(error));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.list = function (current_user) {\r\n    return new Promise((resolve, reject) => {\r\n        if (current_user.admin) {\r\n            db.Vitabox.findAll({ attributes: { exclude: ['password'] } }).then(\r\n                list => resolve(list),\r\n                error => reject(error));\r\n        } else {\r\n            current_user.getVitaboxes({ attributes: ['id', 'latitude', 'longitude', 'address'], where: { active: true } }).then(\r\n                list => {\r\n                    list.forEach(element => {\r\n                        element.dataValues.sponsor = element.dataValues.UserVitabox.dataValues.sponsor;\r\n                        delete element.dataValues.UserVitabox;\r\n                    })\r\n                    resolve(list);\r\n                }, error => reject(error));\r\n        }\r\n    });\r\n}\r\n\r\nexports.find = function (current_user, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (current_user.admin) {\r\n            db.Vitabox.findById(vitabox_id, { attributes: { exclude: ['password'] } }).then(\r\n                vitabox => {\r\n                    if (vitabox) resolve(vitabox);\r\n                    else reject(new Error(\"Vitabox not found\"));\r\n                }, error => reject(error));\r\n        }\r\n        else {\r\n            current_user.getVitaboxes({\r\n                attributes: ['id', 'latitude', 'longitude', 'address'],\r\n                where: { id: vitabox_id, active: true }\r\n            }).then(vitabox => {\r\n                if (vitabox.length > 0) {\r\n                    vitabox[0].dataValues.sponsor = vitabox[0].dataValues.UserVitabox.dataValues.sponsor;\r\n                    delete vitabox[0].dataValues.UserVitabox;\r\n                    resolve(vitabox[0]);\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error));\r\n        }\r\n    });\r\n}\r\n\r\nexports.update = function (current_user, vitabox_id, attributes) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.update({ latitude: attributes.latitude, longitude: attributes.longitude, address: attributes.address, settings: attributes.settings }).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.update({ latitude: attributes.latitude, longitude: attributes.longitude, address: attributes.address }).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.delete = function (current_user, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.destroy().then(\r\n                            () => resolve(),\r\n                            error => reject(error.message));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.destroy().then(\r\n                                () => resolve(),\r\n                                error => reject(error.message));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.addUser = function (current_user, vitabox_id, user_id, is_sponsor) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.addUser(user_id, { through: { sponsor: is_sponsor } }).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.addUser(user_id, { through: { sponsor: is_sponsor } }).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.getUsers = function (is_user, client, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (is_user) {\r\n            db.Vitabox.findById(vitabox_id).then(\r\n                vitabox => {\r\n                    if (vitabox) {\r\n                        if (client.admin)\r\n                            vitabox.getUsers({ attributes: ['id', 'email'] }).then(\r\n                                users => {\r\n                                    users.forEach(user => {\r\n                                        user.email = utils.decrypt(user.email);\r\n                                        user.dataValues.since = user.dataValues.UserVitabox.dataValues.created_at;\r\n                                        user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n                                        delete user.dataValues.UserVitabox;\r\n                                    });\r\n                                    resolve(users);\r\n                                },\r\n                                error => reject(error));\r\n                        else _isUser(vitabox, client).then(\r\n                            () => {\r\n                                vitabox.getUsers({ attributes: ['id', 'email'] }).then(\r\n                                    users => {\r\n                                        users.forEach(user => {\r\n                                            user.email = utils.decrypt(user.email);\r\n                                            user.dataValues.since = user.dataValues.UserVitabox.dataValues.created_at;\r\n                                            user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n                                            delete user.dataValues.UserVitabox;\r\n                                        });\r\n                                        resolve(users);\r\n                                    },\r\n                                    error => reject(error));\r\n                            }, error => reject(error)\r\n                        );\r\n                    } else reject(new Error(\"Vitabox not found\"));\r\n                }, error => reject(error)\r\n            );\r\n        } else {\r\n            client.getUsers({ attributes: ['id', 'email'] }).then(\r\n                users => {\r\n                    users.forEach(user => {\r\n                        user.email = utils.decrypt(user.email);\r\n                        user.dataValues.since = user.dataValues.UserVitabox.dataValues.createdAt;\r\n                        user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n                        delete user.dataValues.UserVitabox;\r\n                    });\r\n                    resolve(users);\r\n                },\r\n                error => reject(error));\r\n        }\r\n    });\r\n}\r\n\r\nexports.removeUser = function (current_user, vitabox_id, user_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.removeUser(user_id).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.removeUser(user_id).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error));\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.addPatient = function (current_user, vitabox_id, patient_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.addPatient(patient_id).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.addPatient(patient_id).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.getPatients = function (is_user, client, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (is_user) {\r\n            if (client.admin)\r\n                db.Patient.findAll({ where: { vitabox_id: vitabox_id }, attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since']] }).then(\r\n                    patients => {\r\n                        patients.forEach(patient => patient.name = utils.decrypt(patient.name));\r\n                        resolve(patients);\r\n                    },\r\n                    error => reject(error));\r\n            else _isUser(vitabox, client).then(\r\n                () => {\r\n                    db.Patient.findAll({ where: { vitabox_id: vitabox_id }, attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since']] }).then(\r\n                        patients => {\r\n                            patients.forEach(patient => patient.name = utils.decrypt(patient.name));\r\n                            resolve(patients);\r\n                        },\r\n                        error => reject(error));\r\n                }, error => reject(error));\r\n        } else {\r\n            client.getPatients({ attributes: ['id', 'birthdate', 'name', 'gender', ['createdAt', 'since']] }).then(\r\n                patients => {\r\n                    patients.forEach(patient => {\r\n                        patient.name = utils.decrypt(patient.name);\r\n                        delete patient.dataValues.VitaboxId;\r\n                    });\r\n                    resolve(patients);\r\n                },\r\n                error => reject(error));\r\n        }\r\n    });\r\n}\r\n\r\nexports.removePatient = function (current_user, vitabox_id, patient_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.removePatient(patient_id).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.removePatient(patient_id).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.addBoard = function (current_user, vitabox_id, board_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.addBoard(board_id).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.addBoard(board_id).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\nexports.getBoards = function (is_user, client, vitabox_id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (is_user) {\r\n            if (client.admin)\r\n                db.Board.findAll({\r\n                    where: { vitabox_id: vitabox_id },\r\n                    attributes: ['id', 'location', 'mac_address', 'created_at'],\r\n                    include: [{\r\n                        model: db.Boardmodel,\r\n                        attributes: ['id', 'type', 'name'],\r\n                        include: [{\r\n                            model: db.Sensor,\r\n                            attributes: { exclude: ['created_at', 'updated_at'] }\r\n                        }]\r\n                    }]\r\n                }).then(\r\n                    boards => {\r\n                        boards.forEach(board => board.Boardmodel.Sensors.forEach(sensor => delete sensor.dataValues.BoardSensor));\r\n                        resolve(boards);\r\n                    },\r\n                    error => reject(error));\r\n            else _isUser(vitabox, client).then(\r\n                () => {\r\n                    db.Board.findAll({\r\n                        where: { vitabox_id: vitabox_id },\r\n                        attributes: ['id', 'location', 'mac_address', 'created_at'],\r\n                        include: [{\r\n                            model: db.Boardmodel,\r\n                            attributes: ['id', 'type', 'name'],\r\n                            include: [{\r\n                                model: db.Sensor,\r\n                                attributes: { exclude: ['created_at', 'updated_at'] }\r\n                            }]\r\n                        }]\r\n                    }).then(\r\n                        boards => {\r\n                            boards.forEach(board => board.Boardmodel.Sensors.forEach(sensor => delete sensor.dataValues.BoardSensor));\r\n                            resolve(boards);\r\n                        },\r\n                        error => reject(error));\r\n                }, error => reject(error));\r\n        } else {\r\n            client.getBoards({\r\n                attributes: ['id', 'location','mac_address',  'created_at'],\r\n                include: [{\r\n                    model: db.Boardmodel,\r\n                    attributes: ['id', 'type', 'name'],\r\n                    include: [{\r\n                        model: db.Sensor,\r\n                        attributes: { exclude: ['created_at', 'updated_at'] }\r\n                    }]\r\n                }],\r\n            }).then(\r\n                boards => {\r\n                    boards.forEach(board => board.Boardmodel.Sensors.forEach(sensor => delete sensor.dataValues.BoardSensor));\r\n                    resolve(boards);\r\n                },\r\n                error => reject(error));\r\n        }\r\n    });\r\n}\r\n\r\nexports.removeBoard = function (current_user, vitabox_id, board_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Vitabox.findById(vitabox_id).then(\r\n            vitabox => {\r\n                if (vitabox) {\r\n                    if (current_user.admin)\r\n                        vitabox.removeBoard(board_id).then(\r\n                            () => resolve(),\r\n                            error => reject(error));\r\n                    else _isSponsor(vitabox, current_user).then(\r\n                        () => {\r\n                            vitabox.removeBoard(board_id).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                        }, error => reject(error)\r\n                    );\r\n                } else reject(new Error(\"Vitabox not found\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\n// ________________________________________________________________________\r\n// Private\r\n// ________________________________________________________________________\r\n_isSponsor = (vitabox, user) => {\r\n    return new Promise((resolve, reject) => {\r\n        vitabox.getUsers({ where: { id: user.id } }).then(\r\n            users => {\r\n                if (users.length > 0 && users[0].UserVitabox.sponsor) resolve();\r\n                else reject(new Error(\"Unauthorized\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}\r\n\r\n_isUser = (vitabox, user) => {\r\n    return new Promise((resolve, reject) => {\r\n        vitabox.hasUser(user).then(\r\n            success => {\r\n                if (success) resolve();\r\n                else reject(new Error(\"Unauthorized\"));\r\n            }, error => reject(error)\r\n        );\r\n    });\r\n}","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.register = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        if (/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d$@$!%*#?&-.]{8,}$/.test(password)) {\r\n            if (/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/.test(email)) {\r\n\r\n                utils.encrypt([email, password]).then(\r\n                    encrypted => {\r\n                        db.User.create({ email: encrypted[0], password: encrypted[1] }).then(\r\n                            new_user => resolve(new_user),\r\n                            err => reject(err));\r\n                    },\r\n                    error => reject(error));\r\n            } else reject(new Error(\"invalid email\"));\r\n        } else reject(new Error(\"invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\"));\r\n    });\r\n}\r\n\r\nexports.login = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        utils.encrypt([email, password]).then(\r\n            encrypted => {\r\n                db.User.findOne({ where: { email: encrypted[0], password: encrypted[1] } }).then(\r\n                    user => {\r\n                        if (user) resolve(user);\r\n                        else reject(new Error(\"email and password don't match\"));\r\n                    }, error => reject(error));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.changePassword = function (user_id, old_password, new_password) {\r\n    return new Promise((resolve, reject) => {\r\n        if (/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d$@$!%*#?&-.]{8,}$/.test(new_password)) {\r\n            utils.encrypt([old_password, new_password]).then(\r\n                encrypted => {\r\n                    db.User.findOne({ where: { id: user_id, password: encrypted[0] } }).then(\r\n                        user => {\r\n                            if (user) user.update({ password: encrypted[1] }).then(\r\n                                () => resolve(),\r\n                                error => reject(error));\r\n                            else reject(new Error(\"old password don't match\"));\r\n                        },\r\n                        error => reject(error));\r\n                }, error => reject(error));\r\n        } else reject(new Error(\"invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\"));\r\n    });\r\n}\r\n\r\nexports.findByEmail = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        utils.encrypt([email]).then(\r\n            encrypted => {\r\n                db.User.findOne({ where: { email: encrypted[0] } }).then(\r\n                    user => {\r\n                        if (user) resolve(user);\r\n                        else reject(new Error(\"user not registered\"));\r\n                    }, error => reject(error));\r\n            }, error => reject(error));\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.create({ transducer: attributes.transducer, measure: attributes.measure, min_acceptable: attributes.min_acceptable, max_acceptable: attributes.max_acceptable, min_possible: attributes.min_possible, max_possible: attributes.max_possible }).then(\r\n            sensor => resolve(sensor),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.list = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.findAll({ attributes: { exclude: ['created_at', 'updated_at'] } }).then(\r\n            sensors => resolve(sensors),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.update = (sensor_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.findById(sensor_id).then(\r\n            sensor => {\r\n                if (sensor) sensor.update({ transducer: attributes.transducer, measure: attributes.measure, min_acceptable: attributes.min_acceptable, max_acceptable: attributes.max_acceptable, min_possible: attributes.min_possible, max_possible: attributes.max_possible }).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"sensor not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.remove = (sensor_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Sensor.findById(sensor_id).then(\r\n            sensor => {\r\n                if (sensor) sensor.destroy().then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"sensor not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = function (body) {\r\n    return new Promise((resolve, reject) => {\r\n        var to_insert = [];\r\n        body.forEach(element => {\r\n            to_insert.push({\r\n                value: element.value,\r\n                datetime: element.datetime,\r\n                patient_id: element.patient_id ? element.patient_id : null,\r\n                board_id: element.board_id,\r\n                sensor_id: element.sensor_id\r\n            });\r\n        });\r\n        db.Record.insertMany(to_insert, (error, doc) => {\r\n            if (error) reject(error);\r\n            else resolve(doc);\r\n        });\r\n    });\r\n}\r\n\r\nexports.listByPatient = function (current_user, patient_id) {\r\n    return new Promise((resolve, reject) => {\r\n        console.log(\"patient id: \" + patient_id);\r\n        if (current_user.admin) db.Record.find().where('patient_id').equals(patient_id).select(\"-_id\").exec((error, doc) => {\r\n            if (error) reject(error);\r\n            else resolve(doc);\r\n        });\r\n        else db.Patient.findById(patient_id, { include: [{ model: db.Boardmodel }] }).then(\r\n            patient => patient.Vitabox.hasUser(current_user).then(\r\n                success => db.Record.find().where('patient_id').equals(patient_id).select(\"-_id\").exec((error, doc) => {\r\n                    if (error) reject(error);\r\n                    else resolve(doc);\r\n                }),\r\n                error => reject(error)),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.listByBoard = function (current_user, board_id) {\r\n    return new Promise((resolve, reject) => {\r\n        console.log(\"board id: \" + board_id);\r\n        if (current_user.admin) db.Record.find().where('board_id').equals(board_id).select(\"-_id\").exec((error, doc) => {\r\n            if (error) reject(error);\r\n            else resolve(doc);\r\n        });\r\n        else db.Board.findById(board_id, { include: [{ model: db.Boardmodel }] }).then(\r\n            board => board.Vitabox.hasUser(current_user).then(\r\n                success => db.Record.find().where('board_id').equals(board_id).select(\"-_id\").exec((error, doc) => {\r\n                    if (error) reject(error);\r\n                    else resolve(doc);\r\n                }),\r\n                error => reject(error)),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.listBySesnor = function (current_user, sensor_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Record.find().where('sensor_id').equals(sensor_id).select(\"-_id\").exec((error, doc) => {\r\n            if (error) reject(error);\r\n            else resolve(doc);\r\n        });\r\n    });\r\n}","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        utils.encrypt([attributes.name]).then(\r\n            encrypted_name => db.Patient.create({\r\n                name: encrypted_name[0],\r\n                birthdate: attributes.birthdate,\r\n                gender: attributes.gender\r\n            }).then(\r\n                patient => resolve(patient),\r\n                error => reject(error)\r\n            ), error => reject(error)\r\n        );\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Board.create({ location: attributes.location, mac_address: attributes.mac_address, boardmodel_id: attributes.model }).then(\r\n            board => resolve(board),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.find = (board_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Board.findById(board_id).then(\r\n            board => {\r\n                board.getBoardmodel().then(\r\n                    model => resolve(model),\r\n                    error => reject(error))\r\n            },\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.remove = (board_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Board.findById(board_id).then(\r\n            board => board.destroy().then(\r\n                () => resolve(),\r\n                error => reject(error)),\r\n            error => reject(error));\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.create({ type: attributes.type, name: attributes.name }).then(\r\n            model => resolve(model),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.list = () => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findAll({ attributes: ['id', 'type', 'name'] }).then(\r\n            models => resolve(models),\r\n            error => reject(error));\r\n    });\r\n}\r\n\r\nexports.update = (board_model_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.update({ type: attributes.type, name: attributes.name }).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"board model not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.remove = (board_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.destroy().then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"board model not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.setSensors = (board_model_id, sensors) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.addSensors(sensors).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"board model not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.getSensors = (board_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.getSensors({ attributes: { exclude: ['created_at', 'updated_at'] } }).then(\r\n                    sensors => {\r\n                        sensors.forEach(element => delete element.dataValues.BoardSensor);\r\n                        resolve(sensors)\r\n                    },\r\n                    error => reject(error));\r\n                else reject(new Error(\"board model not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}\r\n\r\nexports.removeSensor = (board_model_id, sensor_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.removeSensors(sensor_id).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject(new Error(\"board model not found\"));\r\n            }, error => reject(error));\r\n    });\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /boardmodel 01) Create Model\r\n * @apiGroup Board\r\n * @apiName createBoardModel\r\n * @apiDescription create a new board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} name board model name\r\n * @apiParam {string} type board type, must be 'environmental', 'wearable' or 'non-wearable'\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"Zolertia RE-Mote\",\r\n *          \"type\": \"environmental\"\r\n *     }\r\n * @apiSuccess {string} id created board model id\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.create(req.body).then(\r\n            model => res.status(200).json({ id: model.id }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n* @api {get} /boardmodel 02) List Models\r\n* @apiGroup Board\r\n* @apiName listsBoardsModel\r\n* @apiDescription list all board models. \r\n* @apiVersion 1.0.0\r\n* @apiUse box\r\n*\r\n* @apiPermission admin\r\n* @apiSuccess {array} models list of board models\r\n* @apiSuccess {string} id id of each board model\r\n* @apiSuccess {string} type type of the model (must be 'environmental', 'wearable' or 'non-wearable')\r\n* @apiSuccess {string} name name of the model\r\n* @apiSuccessExample {json} Response example:\r\n* {\r\n*  \"models\": [\r\n*      {\r\n*          \"id\": \"5d93585b-f511-4fa8-b69e-692c2474d5e8\",\r\n*          \"type\": \"non-wearable\",\r\n*          \"name\": \"MySignals\"\r\n*      },\r\n*      {\r\n*          \"id\": \"d4710130-4c8c-4ade-96c7-0d5c00738eda\",\r\n*          \"type\": \"environmental\",\r\n*          \"name\": \"Zolertia RE-Mote\"\r\n*      }\r\n*  ]\r\n* }\r\n*/\r\nexports.list = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.list().then(\r\n            models => res.status(200).json({ models: models }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /boardmodel/:id 03) Update Model\r\n * @apiGroup Board\r\n * @apiName updateBoardModel\r\n * @apiDescription update a board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model id to update\r\n * @apiParam {string} name board model name\r\n * @apiParam {string} type board type, must be 'environmental', 'wearable' or 'non-wearable'\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"Zolertia RE-Mote\",\r\n *          \"type\": \"environmental\"\r\n *     }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.update(req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /boardmodel/:id 04) Delete Model\r\n * @apiGroup Board\r\n * @apiName deleteBoardModel\r\n * @apiDescription remove a board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model id to delete\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.remove(req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /boardmodel/:id/sensor 05) Add Sensors\r\n * @apiGroup Board\r\n * @apiName setSensors\r\n * @apiDescription add sensors to a board model\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {array} sensors list of sensors IDs\r\n * @apiParamExample {json} Request example:\r\n * {\r\n *  \"sensors\": [\r\n *      \"75a60f5f-ef3d-4556-9cdd-981894c8f1dc\",\r\n *      \"c704c803-d1fc-4eed-831e-0aba3cd75a60\",\r\n *      \"00397579-0a11-42ee-b522-b25e11630eda\"\r\n *  ]\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.setSensors = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.setSensors(req.params.id, req.body.sensors).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} boardmodel/:id/sensor 06) Get Sensors\r\n * @apiGroup Board\r\n * @apiName getSensors\r\n * @apiDescription list sensors of a board model\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model unique ID\r\n * @apiSuccess {array} models list of sensors\r\n * @apiSuccess {string} transducer transducer name\r\n * @apiSuccess {string} measure transducer measure\r\n * @apiSuccess {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiSuccess {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiSuccess {decimal} min_possible minimum possible value to sensor\r\n * @apiSuccess {decimal} max_possible maximum possible value to sensor\r\n * @apiSuccessExample {json} Request example:\r\n * {\r\n *  \"sensors\": [\r\n *      {\r\n *           \"id\": \"e783b552-567f-499b-b480-9d373fe62a17\"\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getSensors = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.getSensors(req.params.id).then(\r\n            sensors => res.status(200).json({ sensors: sensors }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} boardmodel/:id/sensor 07) Remove Sensor\r\n * @apiGroup Board\r\n * @apiName removeSensor\r\n * @apiDescription remove sensor from a board model \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model unique ID\r\n * @apiParam {string} sensor_id sensor to remove ID\r\n * @apiParamExample {json} Response example:\r\n * {\r\n *  \"sensor_id\": \"00397579-0a11-42ee-b522-b25e11630eda\"\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeSensor = (req, res) => {\r\n    if (req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.removeSensor(req.params.id, req.body.sensor_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(500).json({ error: error.message })\r\n        );\r\n    } else {\r\n        res.status(500).json({ error: \"Unauthorized\" });\r\n    }\r\n}","module.exports.v1_0_0 = {\r\n    'board_model': require('./v1.0.0/board_model'),\r\n    'board': require('./v1.0.0/board'),\r\n    'manage':require('./v1.0.0/manage'),\r\n    'record': require('./v1.0.0/record'),\r\n    'sensor':require('./v1.0.0/sensor'),\r\n    'user': require('./v1.0.0/user'),\r\n    'vitabox': require('./v1.0.0/vitabox'),\r\n}","// ROUTES FOR OUR API\r\n// =============================================================================\r\nmodule.exports = (app) => {\r\n\r\n    var controllers = require('./controllers/index'),\r\n        versioning = require('express-routes-versioning')();\r\n\r\n\r\n    app\r\n        /*________________________________________________check\r\n        *_____________________USERS_______________________\r\n        *_________________________________________________*/\r\n        .post('/register', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.register,\r\n            \"2.0.0\": (req, res) => res.json({ error: 'invalid version' })\r\n        }))\r\n        .post('/login', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.login,\r\n        }))\r\n        .post('/chpass', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.changePassword,\r\n        }))\r\n        /*________________________________________________check\r\n        *____________________ VITABOX_____________________\r\n        *_________________________________________________*/\r\n        .post('/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.create\r\n        }))\r\n        .get('/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.list\r\n        }))\r\n        .get('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.find\r\n        }))\r\n        .get('/vitabox/:id/settings', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.settings\r\n        }))\r\n        .put('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.update\r\n        }))\r\n        .delete('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.delete\r\n        }))\r\n        .post('/vitabox/:id/register', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.register\r\n        }))\r\n        .post('/vitabox/:id/connect', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.connect\r\n        }))\r\n        .get('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getUsers\r\n        }))\r\n        .post('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addUser\r\n        }))\r\n        .delete('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removeUser\r\n        }))\r\n        .post('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addPatient\r\n        }))\r\n        .get('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getPatients\r\n        }))\r\n        .delete('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removePatient\r\n        }))\r\n        .post('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addBoard\r\n        }))\r\n        .get('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getBoards\r\n        }))\r\n        .delete('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removeBoard\r\n        }))\r\n        /*________________________________________________check\r\n        *__________________ BOARD MODEL___________________\r\n        *_________________________________________________*/\r\n        .post('/boardmodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.create\r\n        }))\r\n        .get('/boardmodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.list\r\n        }))\r\n        .put('/boardmodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.update\r\n        }))\r\n        .delete('/boardmodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.delete\r\n        }))\r\n        .post('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.setSensors\r\n        }))\r\n        .get('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.getSensors\r\n        }))\r\n        .delete('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.removeSensor\r\n        }))\r\n        /*________________________________________________check\r\n        *_____________________SENSOR______________________\r\n        *_________________________________________________*/\r\n        .post('/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.create\r\n        }))\r\n        .get('/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.list\r\n        }))\r\n        .put('/sensor/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.update\r\n        }))\r\n        .delete('/sensor/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor.delete\r\n        }))\r\n        /*________________________________________________\r\n        *____________________RECORDS______________________\r\n        *_________________________________________________*/\r\n        .post('/record', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.create\r\n        }))\r\n        .get('/record/patient/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listByPatient\r\n        }))\r\n        .get('/record/board/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listByBoard\r\n        }))\r\n        .get('/record/sensor/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listBySensor\r\n        }))\r\n        /*________________________________________________\r\n        *_____________________TRASH_______________________\r\n        *_________________________________________________*/\r\n        .get('/destroy', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.destroyAll\r\n        }))\r\n        .get('/testdb', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.testDb\r\n        }))\r\n\r\n\r\n    app.all('*', (req, res) => {\r\n        res.status(404).json({ 'message': 'Route could not be found' });\r\n    });\r\n};","module.exports = require(\"express\");","module.exports = require(\"os\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"fs\");","module.exports = require(\"crypto\");","var mongoose = require('mongoose');\r\nvar schema = new mongoose.Schema({\r\n    value: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    datetime: {\r\n        type: Date,\r\n        default: Date.now()\r\n    },\r\n    patient_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    board_id: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    sensor_id: {\r\n        type: String,\r\n        required: true\r\n    },\r\n}, { versionKey: false });\r\n\r\nmodule.exports = mongoose.model('Record', schema);","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Vitabox = sequelize.define('Vitabox', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    latitude: {\r\n      type: DataTypes.DECIMAL(10, 7),\r\n      allowNull: true,\r\n      defaultValue: null,\r\n      validate: {\r\n        min: {\r\n          args: -90,\r\n          msg: \"latitude minimum acceptable value is -90\"\r\n        },\r\n        max: {\r\n          args: 90,\r\n          msg: \"latitude maximum acceptable value is 90\"\r\n        }\r\n      }\r\n    },\r\n    longitude: {\r\n      type: DataTypes.DECIMAL(10, 7),\r\n      allowNull: true,\r\n      defaultValue: null,\r\n      validate: {\r\n        min: {\r\n          args: -180,\r\n          msg: \"longitude minimum acceptable value is -180\"\r\n        },\r\n        max: {\r\n          args: 180,\r\n          msg: \"longitude maximum acceptable value is 180\"\r\n        }\r\n      }\r\n    },\r\n    settings: {\r\n      type: DataTypes.JSON,\r\n      allowNull: true,\r\n      defaultValue: null,\r\n    },\r\n    address: {\r\n      type: DataTypes.STRING,\r\n      defaultValue: null\r\n    },\r\n    registered: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    active: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    }\r\n  }, { underscored: true });\r\n\r\n  Vitabox.associate = function (models) {\r\n    models.Vitabox.belongsToMany(models.User, { through: models.UserVitabox });\r\n    models.Vitabox.hasMany(models.Patient);\r\n    models.Vitabox.hasMany(models.Board);\r\n  };\r\n\r\n  return Vitabox;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var User = sequelize.define('User', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        email: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            unique:{\r\n                args: true,\r\n                msg: 'email already registered'\r\n            },\r\n        },\r\n        password: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false\r\n        },\r\n        admin: {\r\n            type: DataTypes.BOOLEAN,\r\n            defaultValue: false\r\n        }\r\n    }, {\r\n            scopes: {\r\n                profile: { attributes: { exclude: ['password'] } }\r\n            },\r\n            underscored: true\r\n        });\r\n\r\n    User.associate = function (models) {\r\n        models.User.belongsToMany(models.Vitabox, { through: models.UserVitabox });\r\n    };\r\n\r\n    return User;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var UserVitabox = sequelize.define('UserVitabox', {\r\n    sponsor: {\r\n        type: DataTypes.BOOLEAN,\r\n        defaultValue: false\r\n    }\r\n  }, { underscored: true });\r\n\r\n  return UserVitabox;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Sensor = sequelize.define('Sensor', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        transducer: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"transducer name must be defined\"\r\n                }\r\n            }\r\n        },\r\n        measure: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"transducer measure must be defined\"\r\n                }\r\n            }\r\n        },\r\n        min_acceptable: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            allowNull: false,\r\n            validate: {\r\n                isDecimal: {\r\n                    args: true,\r\n                    msg: \"minimum acceptable value must be defined\"\r\n                }\r\n            }\r\n        },\r\n        max_acceptable: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            allowNull: false,\r\n            validate: {\r\n                isDecimal: {\r\n                    args: true,\r\n                    msg: \"maximum acceptable value must be defined\"\r\n                }\r\n            }\r\n        },\r\n        min_possible: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            allowNull: false,\r\n            validate: {\r\n                isDecimal: {\r\n                    args: true,\r\n                    msg: \"minimum possible value must be defined\"\r\n                }\r\n            }\r\n        },\r\n        max_possible: {\r\n            type: DataTypes.DECIMAL(10, 5),\r\n            validate: {\r\n                isDecimal: {\r\n                    args: true,\r\n                    msg: \"maximum possible value must be defined\"\r\n                }\r\n            }\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Sensor.associate = function (models) {\r\n        models.Sensor.belongsToMany(models.Boardmodel, { through: \"BoardSensor\" });\r\n    };\r\n\r\n    return Sensor;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Patient = sequelize.define('Patient', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        birthdate: {\r\n            type: DataTypes.DATEONLY,\r\n            allowNull:false\r\n        },\r\n        name: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"patient name must be defined\"\r\n                }\r\n            }\r\n        },\r\n        gender: {\r\n            type: DataTypes.ENUM,\r\n            values: ['undefined', 'male', 'female'],\r\n            defaultValue: 'undefined',\r\n            validate: {\r\n                isIn: {\r\n                    args: ['male', 'female', 'undefined'],\r\n                    msg: \"gender must be 'male', 'female' or 'undefined'\"\r\n                }\r\n            }\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Patient.associate = function (models) {\r\n        models.Patient.belongsTo(models.Vitabox);\r\n    };\r\n\r\n    return Patient;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Board = sequelize.define('Board', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        location: {\r\n            type: DataTypes.STRING,\r\n            allowNull: true,\r\n            defaultValue: null\r\n        },\r\n        mac_address:{\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"MAC address must be defined\"\r\n                }\r\n            }\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Board.associate = function (models) {\r\n        models.Board.belongsTo(models.Vitabox);\r\n        models.Board.belongsTo(models.Boardmodel);\r\n    };\r\n\r\n    return Board;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Boardmodel = sequelize.define('Boardmodel', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        type: {\r\n            type: DataTypes.ENUM,\r\n            values: [\"environmental\", \"wearable\", \"non-wearable\"],\r\n            validate: {\r\n                isIn: {\r\n                    args: [[\"environmental\", \"wearable\", \"non-wearable\"]],\r\n                    msg: \"board type must be environmental, wearable or non-wearable\"\r\n                }\r\n            }\r\n        },\r\n        name: {\r\n            type: DataTypes.STRING,\r\n            unique: {\r\n                args: true,\r\n                msg: 'board model already registered'\r\n            },\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"board model must be defined\"\r\n                }\r\n            }\r\n        }\r\n    }, { underscored: true });\r\n\r\n    Boardmodel.associate = function (models) {\r\n        models.Boardmodel.hasMany(models.Board);\r\n        models.Boardmodel.belongsToMany(models.Sensor, { through: \"BoardSensor\" });\r\n    };\r\n\r\n    return Boardmodel;\r\n};","module.exports = require(\"sequelize\");","module.exports = require(\"dotenv\");","module.exports = require(\"cluster\");","// apidoc -i docs/ -f .js -o docs/\r\n\r\n// server.js\r\n\r\n// BASE SETUP\r\n// =============================================================================\r\nvar cluster = require('cluster');\r\n// Get the env variables from .env\r\nrequire('dotenv').config();\r\n\r\nif (cluster.isMaster) {\r\n    var db = require('./app/models/index');\r\n    db.sequelize.sync().then(\r\n        () => {\r\n            require('./app/models/seed').seed(db).then(\r\n                () => {\r\n                    console.log('\\x1b[32m%s\\x1b[0m.', '(PLAIN) Connection established with MongoDB and MySQL');\r\n\r\n                    var cpus = require('os').cpus().length\r\n                    console.log('Master cluster setting up ' + cpus + ' workers...');\r\n\r\n                    for (var i = 0; i < cpus; i++) {\r\n                        cluster.fork();\r\n                    }\r\n\r\n                    cluster.on('exit', function (worker, code, signal) {\r\n                        console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal + '-> Starting a new worker');\r\n                        cluster.fork();\r\n                    });\r\n                },\r\n                error => {\r\n                    console.log('Unable to seed Databases.');\r\n                    console.log(error.message);\r\n                    process.exit(1);\r\n                }\r\n            )\r\n        },\r\n        error => {\r\n            console.log('Unable to connect to Databases.');\r\n            console.log(error);\r\n            process.exit(1);\r\n        });\r\n} else {\r\n    // call the packages we need\r\n    var express = require('express'),           // call express\r\n        // https = require('https'),\r\n        // fs = require(\"fs\"),\r\n        router = require('./app/router'),\r\n        bodyParser = require('body-parser'),\r\n        utils = require('./app/business/index').v1_0_0.utils;\r\n\r\n    // START THE SERVER\r\n    // =============================================================================\r\n    // define our app using express\r\n    var app = express();\r\n\r\n    // middleware to use for all requests\r\n    app.use(bodyParser.urlencoded({ extended: true }));\r\n    app.use(bodyParser.json());\r\n    app.use((req, res, next) => {\r\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n        res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\r\n        res.header(\"Access-Control-Allow-Methods\", \"POST, GET, PUT, DELETE, OPTIONS\");\r\n        res.header('Access-Control-Allow-Credentials', true);\r\n        if (process.env.NODE_ENV === \"development\") console.log(\"\\x1b[36m\" + req.method, req.url + \"\\x1b[0m\");\r\n        if (req.headers && req.headers.authorization) {\r\n            utils.validateToken(req.headers.authorization, req.connection.remoteAddress).then(\r\n                client => {\r\n                    if (client) {\r\n                        req.client = client;\r\n                        next();\r\n                    } else res.status(500).json({ msg: \"Client not registered\" })\r\n                },\r\n                error => res.status(500).json({ msg: error.message })\r\n            )\r\n        } else {\r\n            req.user = undefined;\r\n            next(); // make sure that proceeds to the next routes and don't stop here\r\n        }\r\n    });\r\n\r\n    // Present SPA\r\n    app.use('/', express.static(__dirname + '/public'));\r\n    // Present Documentation\r\n    app.use('/docs', express.static(__dirname + '/docs'));\r\n    // REGISTER ROUTES -------------------------------\r\n    router(app);\r\n\r\n    // Define the listenning port\r\n    var port = process.env.PORT || 8080;\r\n    // start http server\r\n    app.listen(port, () => {\r\n        // https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\r\n        console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server http listening on port', port);\r\n    });\r\n\r\n    // //set options to https\r\n    // const options = {\r\n    //     key: fs.readFileSync(__dirname + \"/app/keys/https_key.pem\"),\r\n    //     cert: fs.readFileSync(__dirname + \"/app/keys/https_cert.pem\"),\r\n    //     ca: fs.readFileSync(__dirname + \"/app/keys/https_ca.pem\"),\r\n    //     dhparam: fs.readFileSync(__dirname + \"/app/keys/https_dhparam.pem\")\r\n    // };\r\n    // // start https server\r\n    // https.createServer(options, app).listen(8080, () => {\r\n    //     console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server https listening on port', port);\r\n    // });\r\n}"],"sourceRoot":""}