{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/models/index.js","webpack:///./src/business/index.js","webpack:///external \"util\"","webpack:///./src/business/v1.0.0/utils.js","webpack:///external \"mongoose\"","webpack:///./src/workers/index.js","webpack:///./node_modules/amqplib/lib/format.js","webpack:///./node_modules/readable-stream/lib/_stream_duplex.js","webpack:///./node_modules/amqplib/lib/error.js","webpack:///external \"events\"","webpack:///external \"inherits\"","webpack:///external \"core-util-is\"","webpack:///external \"safe-buffer\"","webpack:///./node_modules/amqplib/lib/defs.js","webpack:///external \"stream\"","webpack:///external \"buffer\"","webpack:///./src/workers/broker.js","webpack:///external \"path\"","webpack:///./src/business/v1.0.0/vitabox.js","webpack:///./src/business/v1.0.0/board_model.js","webpack:///./node_modules/amqplib/lib/channel.js","webpack:///./node_modules/amqplib/lib/credentials.js","webpack:///./node_modules/string_decoder/index.js","webpack:///external \"assert\"","webpack:///./node_modules/amqplib/lib/frame.js","webpack:///external \"buffer-more-ints\"","webpack:///external \"url\"","webpack:///external \"crypto\"","webpack:///./src/models/seed.js","webpack:///external \"http\"","webpack:///external \"express-routes-versioning\"","webpack:///./src/controllers/v1.0.0/warning.js","webpack:///./src/controllers/v1.0.0/vitabox.js","webpack:///./src/controllers/v1.0.0/user.js","webpack:///./src/controllers/v1.0.0/sensor_model.js","webpack:///./src/controllers/v1.0.0/record.js","webpack:///./src/controllers/v1.0.0/profile_model.js","webpack:///./src/controllers/v1.0.0/patient.js","webpack:///./src/controllers/v1.0.0/manage.js","webpack:///./src/controllers/v1.0.0/error.js","webpack:///./src/controllers/v1.0.0/board.js","webpack:///./src/workers/notification.js","webpack:///./src/workers/record.js","webpack:///./src/controllers/v1.0.0/board_model.js","webpack:///./src/controllers/index.js","webpack:///./src/router.js","webpack:///./src/business/v1.0.0/doctor.js","webpack:///./src/business/v1.0.0/warning.js","webpack:///external \"nodemailer\"","webpack:///./src/business/v1.0.0/user.js","webpack:///./src/business/v1.0.0/sensor.js","webpack:///./src/business/v1.0.0/sensor_model.js","webpack:///./src/business/v1.0.0/record.js","webpack:///./src/business/v1.0.0/profile.js","webpack:///./src/business/v1.0.0/profile_model.js","webpack:///./src/business/v1.0.0/patient.js","webpack:///./src/business/v1.0.0/log.js","webpack:///./src/business/v1.0.0/error.js","webpack:///./src/business/v1.0.0/board.js","webpack:///external \"i18n\"","webpack:///external \"body-parser\"","webpack:///./src/middleware.js","webpack:///external \"express\"","webpack:///./node_modules/amqplib/lib/api_args.js","webpack:///external \"bluebird\"","webpack:///./node_modules/amqplib/lib/callback_model.js","webpack:///external \"tls\"","webpack:///external \"net\"","webpack:///./node_modules/readable-stream/lib/_stream_transform.js","webpack:///./node_modules/readable-stream/lib/_stream_passthrough.js","webpack:///./node_modules/readable-stream/passthrough.js","webpack:///./node_modules/amqplib/lib/bitset.js","webpack:///./node_modules/amqplib/lib/heartbeat.js","webpack:///./node_modules/readable-stream/lib/_stream_writable.js","webpack:///external \"isarray\"","webpack:///./node_modules/readable-stream/lib/_stream_readable.js","webpack:///./node_modules/readable-stream/duplex.js","webpack:///./node_modules/amqplib/lib/mux.js","webpack:///external \"bitsyntax\"","webpack:///./node_modules/amqplib/lib/codec.js","webpack:///./node_modules/amqplib/lib/connection.js","webpack:///external \"querystring\"","webpack:///./node_modules/amqplib/lib/connect.js","webpack:///./node_modules/amqplib/callback_api.js","webpack:///external \"os\"","webpack:///./node_modules/uuid/lib/bytesToUuid.js","webpack:///./node_modules/uuid/lib/rng.js","webpack:///./node_modules/uuid/v4.js","webpack:///external \"multer\"","webpack:///external \"mime-types\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"fs\"","webpack:///./src/models/mongodb/warning_doctor.js","webpack:///./src/models/mongodb/warning_user.js","webpack:///./src/models/mongodb/warning.js","webpack:///./src/models/mongodb/record.js","webpack:///./src/models/mongodb/profile_model.js","webpack:///./src/models/mongodb/profile_measure.js","webpack:///./src/models/mongodb/log.js","webpack:///./src/models/mongodb/error.js","webpack:///./src/models/mysql/vitabox.js","webpack:///./src/models/mysql/user.js","webpack:///./src/models/mysql/user_vitabox.js","webpack:///./src/models/mysql/sensor.js","webpack:///./src/models/mysql/sensor_model.js","webpack:///./src/models/mysql/profile.js","webpack:///./src/models/mysql/patient.js","webpack:///./src/models/mysql/patient_board.js","webpack:///./src/models/mysql/doctor_patient.js","webpack:///./src/models/mysql/board.js","webpack:///./src/models/mysql/board_model.js","webpack:///external \"sequelize\"","webpack:///external \"dotenv\"","webpack:///external \"cluster\"","webpack:///./server.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","mongoose","Sequelize","mongo_uri","mysql_uri","operatorsAliases","$eq","Op","eq","$ne","ne","$gte","gte","$gt","gt","$lte","lte","$lt","lt","$not","not","$in","in","$notIn","notIn","$is","is","$like","like","$notLike","notLike","$iLike","iLike","$notILike","notILike","$regexp","regexp","$notRegexp","notRegexp","$iRegexp","iRegexp","$notIRegexp","notIRegexp","$between","between","$notBetween","notBetween","$overlap","overlap","$contains","contains","$contained","contained","$adjacent","adjacent","$strictLeft","strictLeft","$strictRight","strictRight","$noExtendRight","noExtendRight","$noExtendLeft","noExtendLeft","$and","and","$or","or","$any","any","$all","all","$values","values","$col","col","connect","sequelize","logging","db","Boardmodel","Board","DoctorPatient","PatientBoard","Patient","Profile","Sensormodel","Sensor","UserVitabox","User","Vitabox","Error","Log","Profilemeasure","Profilemodel","Record","Warning","WarningUser","WarningDoctor","keys","forEach","modelName","associate","connection","v1_0_0","boardmodel","board","error","log","patient","profilemodel","profile","record","sensormodel","sensor","user","utils","vitabox","warning","doctor","require","__dirname","crypto","fs","jwt","path","mime","multer","uuidv4","encrypt","to_encrypt","map","element","cipher","createCipher","process","env","ALGORITHM","KEY","update","Buffer","from","final","decrypt","to_decrypt","decipher","createDecipher","createToken","obj","Promise","resolve","reject","private_key","readFileSync","toString","undefined","code","msg","payload","id","role","constructor","sign","expiresIn","algorithm","token","message","validateToken","public_key","verify","algorithms","findById","then","generatePassword","n_char","sk","Math","floor","random","upload","html_name","storage","diskStorage","destination","filename","req","file","cb","extension","mimetype","fileFilter","originalname","match","single","err","download","header","Content-Type","lookup","deleteAll","options","raw","query","truncate","RecordTemp","remove","RecordOld","RecordCheck","testSeed","seed","notification","defs","format","HEARTBEAT","inherits","closeMessage","close","fields","replyCode","constant_strs","replyText","methodName","info","inspect","frame","showFields","channel","JSON","stringify","size","Duplex","objectKeys","push","util","Readable","Writable","this","readable","writable","allowHalfOpen","once","onend","_writableState","ended","nextTick","end","xs","f","length","method","trimStack","stack","num","split","slice","join","IllegalOperationError","tmp","stackAtStateChange","stackCapture","reason","codec","ints","encodeTable","decodeFields","SCRATCH","alloc","freeze","constants","FRAME_METHOD","FRAME_HEADER","FRAME_BODY","FRAME_HEARTBEAT","FRAME_MIN_SIZE","FRAME_END","REPLY_SUCCESS","CONTENT_TOO_LARGE","NO_ROUTE","NO_CONSUMERS","ACCESS_REFUSED","NOT_FOUND","RESOURCE_LOCKED","PRECONDITION_FAILED","CONNECTION_FORCED","INVALID_PATH","FRAME_ERROR","SYNTAX_ERROR","COMMAND_INVALID","CHANNEL_ERROR","UNEXPECTED_FRAME","RESOURCE_ERROR","NOT_ALLOWED","NOT_IMPLEMENTED","INTERNAL_ERROR","1","2","3","8","200","206","311","312","313","320","402","403","404","405","406","501","502","503","504","505","506","530","540","541","4096","FRAME_OVERHEAD","decode","buf","versionMajor","versionMinor","serverProperties","mechanisms","locales","val","buffer","offset","len","readUInt32BE","clientProperties","mechanism","response","locale","readUInt8","decodeConnectionStartOk","challenge","decodeConnectionSecure","decodeConnectionSecureOk","channelMax","frameMax","heartbeat","readUInt16BE","decodeConnectionTuneOk","virtualHost","capabilities","insist","decodeConnectionOpen","knownHosts","decodeConnectionOpenOk","classId","methodId","decodeConnectionClose","decodeConnectionBlocked","outOfBand","decodeChannelOpen","channelId","decodeChannelOpenOk","active","decodeChannelFlowOk","decodeChannelClose","realm","exclusive","passive","write","read","decodeAccessRequest","ticket","decodeAccessRequestOk","exchange","type","durable","autoDelete","internal","nowait","arguments","decodeExchangeDeclare","ifUnused","decodeExchangeDelete","source","routingKey","decodeExchangeBind","decodeExchangeUnbind","queue","decodeQueueDeclare","messageCount","consumerCount","decodeQueueDeclareOk","decodeQueueBind","decodeQueuePurge","decodeQueuePurgeOk","ifEmpty","decodeQueueDelete","decodeQueueDeleteOk","decodeQueueUnbind","prefetchSize","prefetchCount","global","decodeBasicQos","consumerTag","noLocal","noAck","decodeBasicConsume","decodeBasicConsumeOk","decodeBasicCancel","decodeBasicCancelOk","mandatory","immediate","decodeBasicPublish","decodeBasicReturn","deliveryTag","redelivered","readUInt64BE","decodeBasicDeliver","decodeBasicGet","decodeBasicGetOk","clusterId","decodeBasicGetEmpty","multiple","decodeBasicAck","requeue","decodeBasicReject","decodeBasicRecover","decodeBasicNack","decodeConfirmSelect","flags","contentType","contentEncoding","headers","deliveryMode","priority","correlationId","replyTo","expiration","messageId","timestamp","userId","appId","decodeBasicProperties","encodeMethod","varyingSize","scratchOffset","TypeError","serverProperties_encoded","isBuffer","writeUInt16BE","writeUInt32BE","isNaN","writeUInt8","copy","encodeConnectionStart","clientProperties_encoded","byteLength","mechanism_len","locale_len","encodeConnectionStartOk","encodeConnectionSecure","encodeConnectionSecureOk","encodeConnectionTune","encodeConnectionTuneOk","bits","virtualHost_len","capabilities_len","encodeConnectionOpen","knownHosts_len","encodeConnectionOpenOk","replyText_len","encodeConnectionClose","encodeConnectionCloseOk","reason_len","encodeConnectionBlocked","encodeConnectionUnblocked","outOfBand_len","encodeChannelOpen","encodeChannelOpenOk","encodeChannelFlow","encodeChannelFlowOk","encodeChannelClose","encodeChannelCloseOk","realm_len","encodeAccessRequest","encodeAccessRequestOk","exchange_len","type_len","arguments_encoded","encodeExchangeDeclare","encodeExchangeDeclareOk","encodeExchangeDelete","encodeExchangeDeleteOk","destination_len","source_len","routingKey_len","encodeExchangeBind","encodeExchangeBindOk","encodeExchangeUnbind","encodeExchangeUnbindOk","queue_len","encodeQueueDeclare","encodeQueueDeclareOk","encodeQueueBind","encodeQueueBindOk","encodeQueuePurge","encodeQueuePurgeOk","encodeQueueDelete","encodeQueueDeleteOk","encodeQueueUnbind","encodeQueueUnbindOk","encodeBasicQos","encodeBasicQosOk","consumerTag_len","encodeBasicConsume","encodeBasicConsumeOk","encodeBasicCancel","encodeBasicCancelOk","encodeBasicPublish","encodeBasicReturn","writeUInt64BE","encodeBasicDeliver","encodeBasicGet","encodeBasicGetOk","clusterId_len","encodeBasicGetEmpty","encodeBasicAck","encodeBasicReject","encodeBasicRecoverAsync","encodeBasicRecover","encodeBasicRecoverOk","encodeBasicNack","encodeTxSelect","encodeTxSelectOk","encodeTxCommit","encodeTxCommitOk","encodeTxRollback","encodeTxRollbackOk","encodeConfirmSelect","encodeConfirmSelectOk","encodeProperties","contentType_len","contentEncoding_len","headers_encoded","correlationId_len","replyTo_len","expiration_len","messageId_len","userId_len","appId_len","encodeBasicProperties","methodInfoConnectionStart","methodInfoConnectionStartOk","methodInfoConnectionSecure","methodInfoConnectionSecureOk","methodInfoConnectionTune","methodInfoConnectionTuneOk","methodInfoConnectionOpen","methodInfoConnectionOpenOk","methodInfoConnectionClose","methodInfoConnectionCloseOk","methodInfoConnectionBlocked","methodInfoConnectionUnblocked","methodInfoChannelOpen","methodInfoChannelOpenOk","methodInfoChannelFlow","methodInfoChannelFlowOk","methodInfoChannelClose","methodInfoChannelCloseOk","methodInfoAccessRequest","methodInfoAccessRequestOk","methodInfoExchangeDeclare","methodInfoExchangeDeclareOk","methodInfoExchangeDelete","methodInfoExchangeDeleteOk","methodInfoExchangeBind","methodInfoExchangeBindOk","methodInfoExchangeUnbind","methodInfoExchangeUnbindOk","methodInfoQueueDeclare","methodInfoQueueDeclareOk","methodInfoQueueBind","methodInfoQueueBindOk","methodInfoQueuePurge","methodInfoQueuePurgeOk","methodInfoQueueDelete","methodInfoQueueDeleteOk","methodInfoQueueUnbind","methodInfoQueueUnbindOk","methodInfoBasicQos","methodInfoBasicQosOk","methodInfoBasicConsume","methodInfoBasicConsumeOk","methodInfoBasicCancel","methodInfoBasicCancelOk","methodInfoBasicPublish","methodInfoBasicReturn","methodInfoBasicDeliver","methodInfoBasicGet","methodInfoBasicGetOk","methodInfoBasicGetEmpty","methodInfoBasicAck","methodInfoBasicReject","methodInfoBasicRecoverAsync","methodInfoBasicRecover","methodInfoBasicRecoverOk","methodInfoBasicNack","methodInfoTxSelect","methodInfoTxSelectOk","methodInfoTxCommit","methodInfoTxCommitOk","methodInfoTxRollback","methodInfoTxRollbackOk","methodInfoConfirmSelect","methodInfoConfirmSelectOk","propertiesInfoBasicProperties","ConnectionStart","args","default","ConnectionStartOk","ConnectionSecure","ConnectionSecureOk","ConnectionTune","ConnectionTuneOk","ConnectionOpen","ConnectionOpenOk","ConnectionClose","ConnectionCloseOk","ConnectionBlocked","ConnectionUnblocked","ChannelOpen","ChannelOpenOk","ChannelFlow","ChannelFlowOk","ChannelClose","ChannelCloseOk","AccessRequest","AccessRequestOk","ExchangeDeclare","ExchangeDeclareOk","ExchangeDelete","ExchangeDeleteOk","ExchangeBind","ExchangeBindOk","ExchangeUnbind","ExchangeUnbindOk","QueueDeclare","QueueDeclareOk","QueueBind","QueueBindOk","QueuePurge","QueuePurgeOk","QueueDelete","QueueDeleteOk","QueueUnbind","QueueUnbindOk","BasicQos","BasicQosOk","BasicConsume","BasicConsumeOk","BasicCancel","BasicCancelOk","BasicPublish","BasicReturn","BasicDeliver","BasicGet","BasicGetOk","BasicGetEmpty","BasicAck","BasicReject","BasicRecoverAsync","BasicRecover","BasicRecoverOk","BasicNack","TxSelect","TxSelectOk","TxCommit","TxCommitOk","TxRollback","TxRollbackOk","ConfirmSelect","ConfirmSelectOk","BasicProperties","amqp","url","uri","parsedURI","parse","queues","servername","hostname","conn","createChannel","ch","assertQueue","_connectToExchanges","getChannel","disconnect","findAll","list","vitaboxes","x","_subscribeToVitabox","assertExchange","q","bindQueue","password","encrypted","register","vitabox_id","attributes","sponsor","is_admin","address","findOne","where","registered","district","locality","longitude","latitude","addUser","through","requestToken","current_user","own","admin","exclude","getVitaboxes","dataValues","find","settings","_isSponsor","delete","destroy","user_id","is_sponsor","getUsers","users","email","since","created_at","removeUser","getPatients","where_condiction","include","model","as","patients","cc","nif","Boards","frequency","last_commit","Doctors","accepted","addBoard","board_id","getBoards","boards","verifySponsor","verifyUser","_isUser","hasUser","success","tag","models","board_model_id","setSensor","sensor_model_id","Sensormodels","filter","addSensormodel","sensormodel_id","getSensors","getSensormodels","BoardmodelSensor","removeSensor","removeSensormodel","ids","closeMsg","assert","EventEmitter","fmt","Channel","reply","pending","lwm","unconfirmed","on","handleConfirm","handleMessage","acceptDeliveryOrReturn","acceptMessage","C","invalidOp","invalidateSend","sendImmediately","sendOrEnqueue","sendMessage","event","self","emit","continuation","totalSize","remaining","buffers","properties","content","concat","BaseChannel","consumers","allocate","freshChannel","sendMethod","_rpc","expect","expectedName","e","closeWithError","closeReason","toClosed","capturedStack","_rejectPending","accept","releaseChannel","toClosing","k","send","rej","discard","shift","closeBecause","acceptMessageFrame","handle","confirmed","splice","pushConfirmCallback","emsg","BasicFlow","onBufferDrain","registerConsumer","callback","unregisterConsumer","dispatchMessage","consumer","handleDelivery","handleCancel","plain","passwd","String","fromCharCode","username","external","isBufferEncoding","isEncoding","encoding","toLowerCase","StringDecoder","replace","assertEncoding","surrogateSize","detectIncompleteChar","utf16DetectIncompleteChar","base64DetectIncompleteChar","passThroughWrite","charBuffer","charReceived","charLength","charStr","available","charCode","charCodeAt","substring","res","cr","enc","Bits","PROTOCOL_HEADER","bodyCons","builder","makeBodyFrame","frameHeaderPattern","matcher","parseFrame","bin","max","fh","rest","headerPattern","methodPattern","decodeFrame","idAndArgs","parts","flagsAndfields","HEARTBEAT_BUF","count","console","bulkCreate","board_models","transducer","measure","to_read","unit","min_acceptable","max_acceptable","min_possible","max_possible","deviation_range","last_values","sensor_models","addSensormodels","boardmodel_id","description","mac_addr","node_id","sensors","birthdate","gender","height","weight","addPatients","addDoctor","business","getWarnings","client","getFromVitabox","data","status","json","warnings","_id","datetime","what","who","sensor_id","patient_id","seen_vitabox","getFromDoctor","params","page","getFromUser","checkWarnings","body","warning_id","checkWarningByVitabox","result","checkWarningByUser","broker","findByEmail","getSettings","setSettings","flag","setWarningCount","removeWarningCount","addPatient","createIfNotExists","disablePatient","disable","enablePatient","enable","removePatient","removeByPatient","es","authenticate","setDescription","disableBoard","enableBoard","removeBoard","removeDescription","removeByBoard","remoteAddress","is_doctor","photo","login","getWarningCount","countUnseen","errors","changePassword","forgotPassword","createRecoverToken","sendRecoverEmail","resetPassword","verifyRecoverToken","setPhoto","updatePhoto","getLogs","getByUser","logs","toJSON","getRequestsCount","countDoctorRequests","getRequests","listDoctorRequests","requests","worker","records","insert","listFromPage","listFromPageByPatient","sid","Patients","pid","verifyDoctor","listBetweenDates","sdate","edate","listBetweenDatesByPatient","profiles","AddMeasure","addMeasure","removeMeasure","mid","updateBiometric","setBiometricData","updateProfile","paid","prid","min","setWarningDoctor","setHasDoctor","Date","acceptAsDoctor","removeDoctor","doctor_id","removeWarningDoctor","getBoardsFromPatient","updateExamFrequency","updateFrequency","fileDownload","writeHead","destroyAll","ampqSend","testDb","getFromPage","title","check","setCheck","switchMac","getById","addPatientToBoard","Sensors","removePatientFromBoard","removeByBoardPatient","getSensorsFromBoard","sendToQueue","persistent","publish","removeBySensors","sensor_ids","sids","board_model","manage","profile_model","sensor_model","app","controllers","versioning","post","1.0.0","2.0.0","getPhoto","put","fileUpload","promises","request","relation","sort","skip","limit","exec","_getSensorWarningInfo","_getPatientWarningInfo","_getPatientWarningInfoToDoctor","seen_date","promise1","select","reduce","a","v","promise2","test","new_user","resetPasswordToken","resetPasswordExpires","now","transporter","createTransport","host","port","secure","auth","pass","mailOptions","to","subject","html","sendMail","_createSingleSensor","model_id","_getRecordsWhere","docs","startDate","endDate","_getAllRecordsWhere","profile_id","populate","findOneAndUpdate","measures","deleteOne","some","save","measure_id","includes","toUpperCase","_isDoctor","getDoctors","to_send","seen_user","error_id","substr","lastIndexOf","findByMAC","hasPatient","bodyParser","i18n","configure","defaultLocale","directory","api","__","__n","use","init","urlencoded","extended","next","authorization","setIfDefined","prop","EMPTY_OPTIONS","Args","argt","expires","messageTtl","deadLetterExchange","deadLetterRoutingKey","maxLength","maxPriority","checkQueue","deleteQueue","purgeQueue","pattern","unbindQueue","alternateExchange","checkExchange","deleteExchange","bindExchange","dest","unbindExchange","convertCC","Array","isArray","CC","BCC","consume","cancel","ack","allUpTo","nack","prefetch","recover","CallbackModel","ev","callbackWrapper","ok","ConfirmChannel","open","rpc","cb0","ex","_","fieldsAndProps","ackAll","nackAll","createConfirmChannel","_ok","waitForConfirms","awaiting","index","Transform","TransformState","stream","afterTransform","er","ts","_transformState","transforming","writecb","writechunk","isNullOrUndefined","rs","_readableState","reading","needReadable","highWaterMark","_read","needTransform","sync","isFunction","_flush","done","ws","chunk","_transform","_write","writeencoding","isNull","PassThrough","BitSet","numWords","ceil","words","wordsInUse","P","wordIndex","bitIndex","trailingZeros","y","ensureSize","wordsPresent","set","w","bit","clear","mask","nextSetBit","fromIndex","word","nextClearBit","Heart","interval","checkSend","checkRecv","intervalMs","UNITS_TO_MS","beat","timeout","sendTimer","setInterval","runHeartbeat","recvMissed","recvTimer","clearInterval","fail","WritableState","Stream","hwm","defaultHwm","objectMode","writableObjectMode","needDrain","ending","finished","noDecode","decodeStrings","defaultEncoding","writing","corked","bufferProcessing","onwrite","state","writelen","onwriteStateUpdate","pendingcb","errorEmitted","onwriteError","needFinish","clearBuffer","afterWrite","prefinished","doWrite","writev","_writev","onwriteDrain","finishMaybe","cbs","entry","prefinish","need","pipe","ret","writeAfterEnd","valid","isString","validChunk","decodeChunk","writeOrBuffer","cork","uncork","endWritable","ReadableState","EE","listenerCount","emitter","listeners","debug","pipes","pipesCount","flowing","endEmitted","emittedReadable","readableListening","readableObjectMode","ranOut","awaitDrain","readingMore","decoder","readableAddChunk","addToFront","chunkInvalid","emitReadable","onEofChunk","unshift","maybeReadMore_","maybeReadMore","needMoreData","debuglog","setEncoding","MAX_HWM","howMuchToRead","roundUpToNextPowerOf2","emitReadable_","flow","fromList","stringMode","cpy","endReadable","nOrig","isNumber","doRead","pipeOpts","src","endFn","stdout","stderr","cleanup","onunpipe","ondrain","pipeOnDrain","removeListener","onclose","onfinish","onerror","ondata","pause","unpipe","_events","resume","dests","indexOf","fn","addListener","resumeScheduled","resume_","wrap","paused","isUndefined","apply","_fromList","schedule","setImmediate","Mux","downstream","newStreams","oldStreams","blocked","scheduledRead","out","_readIncoming","accepting","roundrobin","equal","streams","_scheduleRead","pipeFrom","enqueue","cleanupIfMe","unpipeFrom","start","encodeFieldValue","abs","encodeArray","writeDoubleBE","writeInt8","writeInt16BE","writeInt32BE","writeInt64BE","writeFloatBE","places","digits","decodeFieldValue","readInt8","readInt32BE","!","until","vals","decodeArray","readDoubleBE","readFloatBE","readInt64BE","readInt16BE","Connection","underlying","wrapStream","muxer","sentSinceLastCheck","recvSinceLastCheck","expectSocketClose","freeChannels","channels","isFatalError","mainAccept","rec","sendContent","sendProtocolHeader","sendBytes","allFields","openCallback0","openCallback","tunedOptions","wait","step","bail","Method","negotiate","server","desired","afterStartOk","onOpenOk","openOk","heartbeater","startHeartbeater","endWhileOpening","onSocketError","acceptLoop","closeCallback","_closeChannels","maybeErr","hb","hberr","sendHeartbeat","writeBuffer","go","recvFrame","recv","bytes","Properties","props","mframe","pframe","methodHeaderLen","bodyLen","allLen","both","writeResult","maxBody","bodyFrame","incoming","URL","QS","credentials","copyInto","target","CLIENT_PROPERTIES","product","version","platform","information","publisher_confirms","exchange_exchange_bindings","basic.nack","consumer_cancel_notify","connection.blocked","authentication_failure_close","openFrames","vhost","extraClientProperties","unescape","intOrDefault","def","parseInt","credentialsFromUrl","colon","socketOptions","sockopts","protocol","noDelay","keepAlive","keepAliveDelay","config","pathname","sock","sockok","onConnect","setNoDelay","setKeepAlive","setTimeout","raw_connect","byteToHex","bth","randomBytes","rng","bytesToUuid","rnds","ii","schema","Schema","Number","required","last_seen","versionKey","transform","doc","Types","ObjectId","ref","DataTypes","define","UUID","defaultValue","UUIDV4","primaryKey","STRING","allowNull","DECIMAL","validate","notEmpty","BOOLEAN","connected","DATE","underscored","belongsToMany","hasMany","unique","scopes","last_error","belongsTo","isDecimal","DATEONLY","FLOAT","INTEGER","UNSIGNED","ENUM","isIn","cluster","isMaster","workers","cpus","fork","signal","exit","express","static","createServer","PORT","listen"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 115);\n","var mongoose = require('mongoose'),\r\n    Sequelize = require('sequelize');\r\n\r\nvar mongo_uri = \"\", mysql_uri = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    mongo_uri = 'mongodb://admin:OABPWCJILHHRWDOD@portal-ssl387-13.bmix-lon-yp-9fc7de39-23ac-4645-b616-3b156a5ac50e.359159694.composedb.com:29530,portal-ssl392-14.bmix-lon-yp-9fc7de39-23ac-4645-b616-3b156a5ac50e.359159694.composedb.com:29530/compose?authSource=admin&ssl=true';\r\n    mysql_uri = 'mysql://admin:EPSGVJCYZKHPKWGE@sl-eu-lon-2-portal.13.dblayer.com:29531/compose';\r\n} else {\r\n    mongo_uri = 'mongodb://192.168.161.53:27017/test';\r\n    mysql_uri = 'mysql://api:123qwe@192.168.161.53:3306/test';\r\n}\r\n\r\nconst operatorsAliases = {\r\n    $eq: Sequelize.Op.eq,\r\n    $ne: Sequelize.Op.ne,\r\n    $gte: Sequelize.Op.gte,\r\n    $gt: Sequelize.Op.gt,\r\n    $lte: Sequelize.Op.lte,\r\n    $lt: Sequelize.Op.lt,\r\n    $not: Sequelize.Op.not,\r\n    $in: Sequelize.Op.in,\r\n    $notIn: Sequelize.Op.notIn,\r\n    $is: Sequelize.Op.is,\r\n    $like: Sequelize.Op.like,\r\n    $notLike: Sequelize.Op.notLike,\r\n    $iLike: Sequelize.Op.iLike,\r\n    $notILike: Sequelize.Op.notILike,\r\n    $regexp: Sequelize.Op.regexp,\r\n    $notRegexp: Sequelize.Op.notRegexp,\r\n    $iRegexp: Sequelize.Op.iRegexp,\r\n    $notIRegexp: Sequelize.Op.notIRegexp,\r\n    $between: Sequelize.Op.between,\r\n    $notBetween: Sequelize.Op.notBetween,\r\n    $overlap: Sequelize.Op.overlap,\r\n    $contains: Sequelize.Op.contains,\r\n    $contained: Sequelize.Op.contained,\r\n    $adjacent: Sequelize.Op.adjacent,\r\n    $strictLeft: Sequelize.Op.strictLeft,\r\n    $strictRight: Sequelize.Op.strictRight,\r\n    $noExtendRight: Sequelize.Op.noExtendRight,\r\n    $noExtendLeft: Sequelize.Op.noExtendLeft,\r\n    $and: Sequelize.Op.and,\r\n    $or: Sequelize.Op.or,\r\n    $any: Sequelize.Op.any,\r\n    $all: Sequelize.Op.all,\r\n    $values: Sequelize.Op.values,\r\n    $col: Sequelize.Op.col\r\n};\r\n\r\n// Create a new conntection to MongoDB server\r\nmongoose.connect(mongo_uri);\r\n// Create a new connection to MySQL server\r\nvar sequelize = new Sequelize(mysql_uri, { operatorsAliases: operatorsAliases, logging: false });\r\n\r\nconst db = {\r\n    'Boardmodel': require('./mysql/board_model')(sequelize, Sequelize),\r\n    'Board': require('./mysql/board')(sequelize, Sequelize),\r\n    'DoctorPatient': require('./mysql/doctor_patient')(sequelize, Sequelize),\r\n    'PatientBoard': require('./mysql/patient_board')(sequelize, Sequelize),\r\n    'Patient': require('./mysql/patient')(sequelize, Sequelize),\r\n    'Profile': require('./mysql/profile')(sequelize, Sequelize),\r\n    'Sensormodel': require('./mysql/sensor_model')(sequelize, Sequelize),\r\n    'Sensor': require('./mysql/sensor')(sequelize, Sequelize),\r\n    'UserVitabox': require('./mysql/user_vitabox')(sequelize, Sequelize),\r\n    'User': require('./mysql/user')(sequelize, Sequelize),\r\n    'Vitabox': require('./mysql/vitabox')(sequelize, Sequelize),\r\n\r\n    'Error': require('./mongodb/error'),\r\n    'Log': require('./mongodb/log'),\r\n    'Profilemeasure': require('./mongodb/profile_measure'),\r\n    'Profilemodel': require('./mongodb/profile_model'),\r\n    'Record': require('./mongodb/record'),\r\n    'Warning': require('./mongodb/warning'),\r\n    'WarningUser': require('./mongodb/warning_user'),\r\n    'WarningDoctor': require('./mongodb/warning_doctor')\r\n}\r\n\r\nObject.keys(db).forEach(modelName => {\r\n    if (db[modelName].associate) db[modelName].associate(db);\r\n});\r\n\r\ndb.sequelize = sequelize;\r\ndb.mongoose = mongoose.connection;\r\n\r\nmodule.exports = db;","module.exports.v1_0_0 = {\r\n    'boardmodel': require('./v1.0.0/board_model'),\r\n    'board': require('./v1.0.0/board'),\r\n    'error': require('./v1.0.0/error'),\r\n    'log': require('./v1.0.0/log'),\r\n    'patient': require('./v1.0.0/patient'),\r\n    'profilemodel': require('./v1.0.0/profile_model'),\r\n    'profile': require('./v1.0.0/profile'),\r\n    'record': require('./v1.0.0/record'),\r\n    'sensormodel': require('./v1.0.0/sensor_model'),\r\n    'sensor': require('./v1.0.0/sensor'),\r\n    'user': require('./v1.0.0/user'),\r\n    'utils': require('./v1.0.0/utils'),\r\n    'vitabox': require('./v1.0.0/vitabox'),\r\n    'warning': require('./v1.0.0/warning'),\r\n    'doctor': require('./v1.0.0/doctor')\r\n};","module.exports = require(\"util\");","var db = require('../../models/index'),\r\n  crypto = require(\"crypto\"),\r\n  fs = require(\"fs\"),\r\n  jwt = require('jsonwebtoken'),\r\n  path = require(\"path\"),\r\n  mime = require('mime-types'),\r\n  multer = require('multer'),\r\n  uuidv4 = require('uuid/v4');\r\n\r\nexports.encrypt = (to_encrypt) => {\r\n  try {\r\n    return {\r\n      value: to_encrypt.map(element => {\r\n        let cipher = crypto.createCipher(process.env.ALGORITHM, process.env.KEY);\r\n        return element = cipher.update(Buffer.from(element), 'utf8', 'hex') + cipher.final('hex');\r\n      }), error: null\r\n    };\r\n  } catch (error) {\r\n    return { value: null, error: error };\r\n  }\r\n}\r\n\r\nexports.decrypt = (to_decrypt) => {\r\n  let decipher = crypto.createDecipher(process.env.ALGORITHM, process.env.KEY);\r\n  return decipher.update(to_decrypt, 'hex', 'utf8') + decipher.final('utf8');\r\n}\r\n\r\nexports.createToken = (obj) => {\r\n  return new Promise((resolve, reject) => {\r\n    let private_key = fs.readFileSync(__dirname + '/../../keys/key.pem').toString();\r\n    if (private_key === undefined) reject({ code: 500, msg: \"error on load private key\" });\r\n\r\n    let payload = {\r\n      id: obj.id,\r\n      role: obj.constructor.name\r\n    };\r\n    let options = {\r\n      expiresIn: \"8h\",\r\n      algorithm: \"RS256\"\r\n    };\r\n    jwt.sign(payload, private_key, options, (error, token) => {\r\n      if (error) reject({ code: 500, msg: error.message });\r\n      resolve(token);\r\n    });\r\n  });\r\n}\r\n\r\nexports.validateToken = (token) => {\r\n  return new Promise((resolve, reject) => {\r\n    let public_key = fs.readFileSync(__dirname + '/../../keys/cert.pem').toString();\r\n    if (public_key === undefined) reject(\"error on load public key\");\r\n\r\n    let options = {\r\n      algorithms: [\"RS256\"]\r\n    };\r\n\r\n    jwt.verify(token, public_key, options, (error, payload) => {\r\n      if (error) reject({ code: 500, msg: error.message });\r\n      db[payload.role].findById(payload.id).then(\r\n        obj => resolve(obj),\r\n        error => reject({ code: 500, msg: error.message })\r\n      );\r\n    });\r\n  });\r\n}\r\n\r\nexports.generatePassword = (n_char) => {\r\n  let sk = \"\", i, j, base = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n  for (i = 0; i < n_char; i++) sk += base[Math.floor(Math.random() * 61)];\r\n  return sk;\r\n}\r\n\r\nexports.upload = (html_name) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      let obj = multer({\r\n        storage: multer.diskStorage(\r\n          {\r\n            destination: path.resolve(__dirname, '..', '..', '..', 'files'),\r\n            filename: (req, file, cb) => cb(null, uuidv4() + uuidv4() + uuidv4() + '.' + mime.extension(file.mimetype))\r\n          }\r\n        ),\r\n        fileFilter: (req, file, cb) => {\r\n          if (!file.originalname.match(/\\.(jpg|jpeg|png|gif|svg)$/)) return cb(new Error('Only image files are allowed!'), false);\r\n          cb(null, true);\r\n        }\r\n      }).single(html_name);\r\n      resolve(obj);\r\n    } catch (err) { reject({ code: 500, msg: err.message }); }\r\n  });\r\n}\r\n\r\nexports.download = (filename) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      let file = fs.readFileSync(path.resolve(__dirname, '..', '..', '..', 'files', filename));\r\n      let header = { 'Content-Type': mime.lookup(filename) }\r\n      resolve({ file: file, header: header });\r\n    } catch (err) { reject({ code: 500, msg: err.message }); }\r\n  });\r\n}\r\n\r\n\r\n// JUST TO DEVELOPMENT\r\nexports.deleteAll = () => {\r\n  return new Promise((resolve, reject) => {\r\n\r\n    var options = { raw: true };\r\n\r\n    db.sequelize.query('SET FOREIGN_KEY_CHECKS = 0', options).then(() => {\r\n      db.UserVitabox.truncate().then(() => {\r\n        db.User.truncate().then(() => {\r\n          db.Vitabox.truncate().then(() => {\r\n            db.Boardmodel.truncate().then(() => {\r\n              db.Sensormodel.truncate().then(() => {\r\n                db.Sensor.truncate().then(() => {\r\n                  db.Board.truncate().then(() => {\r\n                    db.Patient.truncate().then(() => {\r\n                      db.Profile.truncate().then(() => {\r\n                        db.RecordTemp.remove({}, () => {\r\n                          db.RecordOld.remove({}, () => {\r\n                            db.RecordCheck.remove({}, () => {\r\n                              db.Log.remove({}, () => {\r\n                                db.Warning.remove({}, () => {\r\n                                  db.Profilemeasure.remove({}, () => {\r\n                                    db.Profilemodel.remove({}, () => {\r\n                                      db.sequelize.query('SET FOREIGN_KEY_CHECKS = 1', options).then(\r\n                                        () => resolve(),\r\n                                        error => reject(error));\r\n                                    });\r\n                                  }, error => reject(error));\r\n                                }, error => reject(error));\r\n                              }, error => reject(error));\r\n                            }, error => reject(error));\r\n                          }, error => reject(error));\r\n                        }, error => reject(error));\r\n                      }, error => reject(error));\r\n                    }, error => reject(error));\r\n                  }, error => reject(error));\r\n                }, error => reject(error));\r\n              }, error => reject(error));\r\n            }, error => reject(error));\r\n          }, error => reject(error));\r\n        }, error => reject(error));\r\n      }, error => reject(error));\r\n    }, error => reject(error));\r\n  });\r\n}\r\n\r\nexports.testSeed = () => {\r\n  return new Promise((resolve, reject) => {\r\n    require('../../models/seed').seed(db).then(\r\n      () => resolve(),\r\n      error => reject(error));\r\n  });\r\n}","module.exports = require(\"mongoose\");","module.exports = {\r\n  'record': require('./record'),\r\n  'notification': require('./notification')\r\n};","//\n//\n//\n\n// Stringifying various things\n\n'use strict';\n\nvar defs = require('./defs');\nvar format = require('util').format;\nvar inherits = require('util').inherits;\nvar HEARTBEAT = require('./frame').HEARTBEAT;\n\nmodule.exports.closeMessage = function(close) {\n  var code = close.fields.replyCode;\n  return format('%d (%s) with message \"%s\"',\n                code, defs.constant_strs[code],\n                close.fields.replyText);\n}\n\nmodule.exports.methodName = function(id) {\n  return defs.info(id).name;\n};\n\nmodule.exports.inspect = function(frame, showFields) {\n  if (frame === HEARTBEAT) {\n    return '<Heartbeat>';\n  }\n  else if (!frame.id) {\n    return format('<Content channel:%d size:%d>',\n                  frame.channel, frame.size);\n  }\n  else {\n    var info = defs.info(frame.id);\n    return format('<%s channel:%d%s>', info.name, frame.channel,\n                  (showFields)\n                  ? ' ' + JSON.stringify(frame.fields, undefined, 2)\n                  : '');\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nforEach(objectKeys(Writable.prototype), function(method) {\n  if (!Duplex.prototype[method])\n    Duplex.prototype[method] = Writable.prototype[method];\n});\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex))\n    return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false)\n    this.readable = false;\n\n  if (options && options.writable === false)\n    this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false)\n    this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended)\n    return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  process.nextTick(this.end.bind(this));\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n","var inherits = require('util').inherits;\n\nfunction trimStack(stack, num) {\n  return stack && stack.split('\\n').slice(num).join('\\n');\n}\n\nfunction IllegalOperationError(msg, stack) {\n  var tmp = new Error();\n  this.message = msg;\n  this.stack = this.toString() + '\\n' + trimStack(tmp.stack, 2);\n  this.stackAtStateChange = stack;\n}\ninherits(IllegalOperationError, Error);\n\nIllegalOperationError.prototype.name = 'IllegalOperationError';\n\nfunction stackCapture(reason) {\n  var e = new Error();\n  return 'Stack capture: ' + reason + '\\n' +\n    trimStack(e.stack, 2);\n}\n\nmodule.exports.IllegalOperationError = IllegalOperationError;\nmodule.exports.stackCapture = stackCapture;\n","module.exports = require(\"events\");","module.exports = require(\"inherits\");","module.exports = require(\"core-util-is\");","module.exports = require(\"safe-buffer\");","/** @preserve This file is generated by the script\n * ../bin/generate-defs.js, which is not in general included in a\n * distribution, but is available in the source repository e.g. at\n * https://github.com/squaremo/amqp.node/\n */\n\"use strict\";\n\nfunction decodeConnectionStart(buffer) {\n  var val, len, offset = 0, fields = {\n    versionMajor: void 0,\n    versionMinor: void 0,\n    serverProperties: void 0,\n    mechanisms: void 0,\n    locales: void 0\n  };\n  val = buffer[offset];\n  offset++;\n  fields.versionMajor = val;\n  val = buffer[offset];\n  offset++;\n  fields.versionMinor = val;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.slice(offset, offset + len));\n  offset += len;\n  fields.serverProperties = val;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.slice(offset, offset + len);\n  offset += len;\n  fields.mechanisms = val;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.slice(offset, offset + len);\n  offset += len;\n  fields.locales = val;\n  return fields;\n}\n\nfunction encodeConnectionStart(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0, scratchOffset = 0;\n  val = fields.serverProperties;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'serverProperties'\");\n  if (\"object\" != typeof val) throw new TypeError(\"Field 'serverProperties' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var serverProperties_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += serverProperties_encoded.length;\n  val = fields.mechanisms;\n  if (void 0 === val) val = Buffer.from(\"PLAIN\"); else if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'mechanisms' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  val = fields.locales;\n  if (void 0 === val) val = Buffer.from(\"en_US\"); else if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'locales' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  var buffer = Buffer.alloc(22 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655370, 7);\n  offset = 11;\n  val = fields.versionMajor;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'versionMajor' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt8(val, offset);\n  offset++;\n  val = fields.versionMinor;\n  if (void 0 === val) val = 9; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'versionMinor' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt8(val, offset);\n  offset++;\n  offset += serverProperties_encoded.copy(buffer, offset);\n  val = fields.mechanisms;\n  void 0 === val && (val = Buffer.from(\"PLAIN\"));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  val = fields.locales;\n  void 0 === val && (val = Buffer.from(\"en_US\"));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionStartOk(buffer) {\n  var val, len, offset = 0, fields = {\n    clientProperties: void 0,\n    mechanism: void 0,\n    response: void 0,\n    locale: void 0\n  };\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.slice(offset, offset + len));\n  offset += len;\n  fields.clientProperties = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.mechanism = val;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.slice(offset, offset + len);\n  offset += len;\n  fields.response = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.locale = val;\n  return fields;\n}\n\nfunction encodeConnectionStartOk(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0, scratchOffset = 0;\n  val = fields.clientProperties;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'clientProperties'\");\n  if (\"object\" != typeof val) throw new TypeError(\"Field 'clientProperties' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var clientProperties_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += clientProperties_encoded.length;\n  val = fields.mechanism;\n  if (void 0 === val) val = \"PLAIN\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'mechanism' is the wrong type; must be a string (up to 255 chars)\");\n  var mechanism_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += mechanism_len;\n  val = fields.response;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'response'\");\n  if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'response' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  val = fields.locale;\n  if (void 0 === val) val = \"en_US\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'locale' is the wrong type; must be a string (up to 255 chars)\");\n  var locale_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += locale_len;\n  var buffer = Buffer.alloc(18 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655371, 7);\n  offset = 11;\n  offset += clientProperties_encoded.copy(buffer, offset);\n  val = fields.mechanism;\n  void 0 === val && (val = \"PLAIN\");\n  buffer[offset] = mechanism_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += mechanism_len;\n  val = fields.response;\n  void 0 === val && (val = Buffer.from(void 0));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  val = fields.locale;\n  void 0 === val && (val = \"en_US\");\n  buffer[offset] = locale_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += locale_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionSecure(buffer) {\n  var val, len, offset = 0, fields = {\n    challenge: void 0\n  };\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.slice(offset, offset + len);\n  offset += len;\n  fields.challenge = val;\n  return fields;\n}\n\nfunction encodeConnectionSecure(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0;\n  val = fields.challenge;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'challenge'\");\n  if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'challenge' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655380, 7);\n  offset = 11;\n  val = fields.challenge;\n  void 0 === val && (val = Buffer.from(void 0));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionSecureOk(buffer) {\n  var val, len, offset = 0, fields = {\n    response: void 0\n  };\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.slice(offset, offset + len);\n  offset += len;\n  fields.response = val;\n  return fields;\n}\n\nfunction encodeConnectionSecureOk(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0;\n  val = fields.response;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'response'\");\n  if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'response' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655381, 7);\n  offset = 11;\n  val = fields.response;\n  void 0 === val && (val = Buffer.from(void 0));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionTune(buffer) {\n  var val, offset = 0, fields = {\n    channelMax: void 0,\n    frameMax: void 0,\n    heartbeat: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.channelMax = val;\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.frameMax = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.heartbeat = val;\n  return fields;\n}\n\nfunction encodeConnectionTune(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0, buffer = Buffer.alloc(20 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655390, 7);\n  offset = 11;\n  val = fields.channelMax;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'channelMax' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.frameMax;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'frameMax' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  val = fields.heartbeat;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'heartbeat' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionTuneOk(buffer) {\n  var val, offset = 0, fields = {\n    channelMax: void 0,\n    frameMax: void 0,\n    heartbeat: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.channelMax = val;\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.frameMax = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.heartbeat = val;\n  return fields;\n}\n\nfunction encodeConnectionTuneOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0, buffer = Buffer.alloc(20 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655391, 7);\n  offset = 11;\n  val = fields.channelMax;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'channelMax' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.frameMax;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'frameMax' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  val = fields.heartbeat;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'heartbeat' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionOpen(buffer) {\n  var val, len, offset = 0, fields = {\n    virtualHost: void 0,\n    capabilities: void 0,\n    insist: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.virtualHost = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.capabilities = val;\n  val = !!(1 & buffer[offset]);\n  fields.insist = val;\n  return fields;\n}\n\nfunction encodeConnectionOpen(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.virtualHost;\n  if (void 0 === val) val = \"/\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'virtualHost' is the wrong type; must be a string (up to 255 chars)\");\n  var virtualHost_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += virtualHost_len;\n  val = fields.capabilities;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'capabilities' is the wrong type; must be a string (up to 255 chars)\");\n  var capabilities_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += capabilities_len;\n  var buffer = Buffer.alloc(15 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655400, 7);\n  offset = 11;\n  val = fields.virtualHost;\n  void 0 === val && (val = \"/\");\n  buffer[offset] = virtualHost_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += virtualHost_len;\n  val = fields.capabilities;\n  void 0 === val && (val = \"\");\n  buffer[offset] = capabilities_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += capabilities_len;\n  val = fields.insist;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionOpenOk(buffer) {\n  var val, len, offset = 0, fields = {\n    knownHosts: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.knownHosts = val;\n  return fields;\n}\n\nfunction encodeConnectionOpenOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.knownHosts;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'knownHosts' is the wrong type; must be a string (up to 255 chars)\");\n  var knownHosts_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += knownHosts_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655401, 7);\n  offset = 11;\n  val = fields.knownHosts;\n  void 0 === val && (val = \"\");\n  buffer[offset] = knownHosts_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += knownHosts_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionClose(buffer) {\n  var val, len, offset = 0, fields = {\n    replyCode: void 0,\n    replyText: void 0,\n    classId: void 0,\n    methodId: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.replyCode = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.replyText = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.classId = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.methodId = val;\n  return fields;\n}\n\nfunction encodeConnectionClose(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.replyText;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'replyText' is the wrong type; must be a string (up to 255 chars)\");\n  var replyText_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += replyText_len;\n  var buffer = Buffer.alloc(19 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655410, 7);\n  offset = 11;\n  val = fields.replyCode;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'replyCode'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'replyCode' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.replyText;\n  void 0 === val && (val = \"\");\n  buffer[offset] = replyText_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += replyText_len;\n  val = fields.classId;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'classId'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'classId' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.methodId;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'methodId'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'methodId' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionCloseOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeConnectionCloseOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655411, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionBlocked(buffer) {\n  var val, len, offset = 0, fields = {\n    reason: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.reason = val;\n  return fields;\n}\n\nfunction encodeConnectionBlocked(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.reason;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'reason' is the wrong type; must be a string (up to 255 chars)\");\n  var reason_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += reason_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655420, 7);\n  offset = 11;\n  val = fields.reason;\n  void 0 === val && (val = \"\");\n  buffer[offset] = reason_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += reason_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionUnblocked(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeConnectionUnblocked(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655421, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelOpen(buffer) {\n  var val, len, offset = 0, fields = {\n    outOfBand: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.outOfBand = val;\n  return fields;\n}\n\nfunction encodeChannelOpen(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.outOfBand;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'outOfBand' is the wrong type; must be a string (up to 255 chars)\");\n  var outOfBand_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += outOfBand_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310730, 7);\n  offset = 11;\n  val = fields.outOfBand;\n  void 0 === val && (val = \"\");\n  buffer[offset] = outOfBand_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += outOfBand_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelOpenOk(buffer) {\n  var val, len, offset = 0, fields = {\n    channelId: void 0\n  };\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.slice(offset, offset + len);\n  offset += len;\n  fields.channelId = val;\n  return fields;\n}\n\nfunction encodeChannelOpenOk(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0;\n  val = fields.channelId;\n  if (void 0 === val) val = Buffer.from(\"\"); else if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'channelId' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310731, 7);\n  offset = 11;\n  val = fields.channelId;\n  void 0 === val && (val = Buffer.from(\"\"));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelFlow(buffer) {\n  var val, offset = 0, fields = {\n    active: void 0\n  };\n  val = !!(1 & buffer[offset]);\n  fields.active = val;\n  return fields;\n}\n\nfunction encodeChannelFlow(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310740, 7);\n  offset = 11;\n  val = fields.active;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'active'\");\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelFlowOk(buffer) {\n  var val, offset = 0, fields = {\n    active: void 0\n  };\n  val = !!(1 & buffer[offset]);\n  fields.active = val;\n  return fields;\n}\n\nfunction encodeChannelFlowOk(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310741, 7);\n  offset = 11;\n  val = fields.active;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'active'\");\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelClose(buffer) {\n  var val, len, offset = 0, fields = {\n    replyCode: void 0,\n    replyText: void 0,\n    classId: void 0,\n    methodId: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.replyCode = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.replyText = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.classId = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.methodId = val;\n  return fields;\n}\n\nfunction encodeChannelClose(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.replyText;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'replyText' is the wrong type; must be a string (up to 255 chars)\");\n  var replyText_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += replyText_len;\n  var buffer = Buffer.alloc(19 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310760, 7);\n  offset = 11;\n  val = fields.replyCode;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'replyCode'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'replyCode' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.replyText;\n  void 0 === val && (val = \"\");\n  buffer[offset] = replyText_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += replyText_len;\n  val = fields.classId;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'classId'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'classId' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.methodId;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'methodId'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'methodId' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelCloseOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeChannelCloseOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310761, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeAccessRequest(buffer) {\n  var val, len, offset = 0, fields = {\n    realm: void 0,\n    exclusive: void 0,\n    passive: void 0,\n    active: void 0,\n    write: void 0,\n    read: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.realm = val;\n  val = !!(1 & buffer[offset]);\n  fields.exclusive = val;\n  val = !!(2 & buffer[offset]);\n  fields.passive = val;\n  val = !!(4 & buffer[offset]);\n  fields.active = val;\n  val = !!(8 & buffer[offset]);\n  fields.write = val;\n  val = !!(16 & buffer[offset]);\n  fields.read = val;\n  return fields;\n}\n\nfunction encodeAccessRequest(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.realm;\n  if (void 0 === val) val = \"/data\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'realm' is the wrong type; must be a string (up to 255 chars)\");\n  var realm_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += realm_len;\n  var buffer = Buffer.alloc(14 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1966090, 7);\n  offset = 11;\n  val = fields.realm;\n  void 0 === val && (val = \"/data\");\n  buffer[offset] = realm_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += realm_len;\n  val = fields.exclusive;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.passive;\n  void 0 === val && (val = !0);\n  val && (bits += 2);\n  val = fields.active;\n  void 0 === val && (val = !0);\n  val && (bits += 4);\n  val = fields.write;\n  void 0 === val && (val = !0);\n  val && (bits += 8);\n  val = fields.read;\n  void 0 === val && (val = !0);\n  val && (bits += 16);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeAccessRequestOk(buffer) {\n  var val, offset = 0, fields = {\n    ticket: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  return fields;\n}\n\nfunction encodeAccessRequestOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0, buffer = Buffer.alloc(14 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1966091, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 1; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeDeclare(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    exchange: void 0,\n    type: void 0,\n    passive: void 0,\n    durable: void 0,\n    autoDelete: void 0,\n    internal: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.type = val;\n  val = !!(1 & buffer[offset]);\n  fields.passive = val;\n  val = !!(2 & buffer[offset]);\n  fields.durable = val;\n  val = !!(4 & buffer[offset]);\n  fields.autoDelete = val;\n  val = !!(8 & buffer[offset]);\n  fields.internal = val;\n  val = !!(16 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.slice(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeExchangeDeclare(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.type;\n  if (void 0 === val) val = \"direct\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'type' is the wrong type; must be a string (up to 255 chars)\");\n  var type_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += type_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(17 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621450, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.type;\n  void 0 === val && (val = \"direct\");\n  buffer[offset] = type_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += type_len;\n  val = fields.passive;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.durable;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  val = fields.autoDelete;\n  void 0 === val && (val = !1);\n  val && (bits += 4);\n  val = fields.internal;\n  void 0 === val && (val = !1);\n  val && (bits += 8);\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 16);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeDeclareOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeExchangeDeclareOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621451, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeDelete(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    exchange: void 0,\n    ifUnused: void 0,\n    nowait: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  val = !!(1 & buffer[offset]);\n  fields.ifUnused = val;\n  val = !!(2 & buffer[offset]);\n  fields.nowait = val;\n  return fields;\n}\n\nfunction encodeExchangeDelete(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621460, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.ifUnused;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeDeleteOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeExchangeDeleteOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621461, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeBind(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    destination: void 0,\n    source: void 0,\n    routingKey: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.destination = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.source = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  val = !!(1 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.slice(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeExchangeBind(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.destination;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'destination'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'destination' is the wrong type; must be a string (up to 255 chars)\");\n  var destination_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += destination_len;\n  val = fields.source;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'source'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'source' is the wrong type; must be a string (up to 255 chars)\");\n  var source_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += source_len;\n  val = fields.routingKey;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(18 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621470, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.destination;\n  void 0 === val && (val = void 0);\n  buffer[offset] = destination_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += destination_len;\n  val = fields.source;\n  void 0 === val && (val = void 0);\n  buffer[offset] = source_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += source_len;\n  val = fields.routingKey;\n  void 0 === val && (val = \"\");\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeBindOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeExchangeBindOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621471, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeUnbind(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    destination: void 0,\n    source: void 0,\n    routingKey: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.destination = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.source = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  val = !!(1 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.slice(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeExchangeUnbind(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.destination;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'destination'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'destination' is the wrong type; must be a string (up to 255 chars)\");\n  var destination_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += destination_len;\n  val = fields.source;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'source'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'source' is the wrong type; must be a string (up to 255 chars)\");\n  var source_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += source_len;\n  val = fields.routingKey;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(18 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621480, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.destination;\n  void 0 === val && (val = void 0);\n  buffer[offset] = destination_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += destination_len;\n  val = fields.source;\n  void 0 === val && (val = void 0);\n  buffer[offset] = source_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += source_len;\n  val = fields.routingKey;\n  void 0 === val && (val = \"\");\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeUnbindOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeExchangeUnbindOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621491, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueDeclare(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    passive: void 0,\n    durable: void 0,\n    exclusive: void 0,\n    autoDelete: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  val = !!(1 & buffer[offset]);\n  fields.passive = val;\n  val = !!(2 & buffer[offset]);\n  fields.durable = val;\n  val = !!(4 & buffer[offset]);\n  fields.exclusive = val;\n  val = !!(8 & buffer[offset]);\n  fields.autoDelete = val;\n  val = !!(16 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.slice(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeQueueDeclare(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276810, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.passive;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.durable;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  val = fields.exclusive;\n  void 0 === val && (val = !1);\n  val && (bits += 4);\n  val = fields.autoDelete;\n  void 0 === val && (val = !1);\n  val && (bits += 8);\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 16);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueDeclareOk(buffer) {\n  var val, len, offset = 0, fields = {\n    queue: void 0,\n    messageCount: void 0,\n    consumerCount: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.messageCount = val;\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.consumerCount = val;\n  return fields;\n}\n\nfunction encodeQueueDeclareOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.queue;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'queue'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  var buffer = Buffer.alloc(21 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276811, 7);\n  offset = 11;\n  val = fields.queue;\n  void 0 === val && (val = void 0);\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.messageCount;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'messageCount'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'messageCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  val = fields.consumerCount;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'consumerCount'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'consumerCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueBind(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    exchange: void 0,\n    routingKey: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  val = !!(1 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.slice(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeQueueBind(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(18 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276820, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = \"\");\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueBindOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeQueueBindOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276821, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueuePurge(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    nowait: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  val = !!(1 & buffer[offset]);\n  fields.nowait = val;\n  return fields;\n}\n\nfunction encodeQueuePurge(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276830, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueuePurgeOk(buffer) {\n  var val, offset = 0, fields = {\n    messageCount: void 0\n  };\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.messageCount = val;\n  return fields;\n}\n\nfunction encodeQueuePurgeOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0, buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276831, 7);\n  offset = 11;\n  val = fields.messageCount;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'messageCount'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'messageCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueDelete(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    ifUnused: void 0,\n    ifEmpty: void 0,\n    nowait: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  val = !!(1 & buffer[offset]);\n  fields.ifUnused = val;\n  val = !!(2 & buffer[offset]);\n  fields.ifEmpty = val;\n  val = !!(4 & buffer[offset]);\n  fields.nowait = val;\n  return fields;\n}\n\nfunction encodeQueueDelete(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276840, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.ifUnused;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.ifEmpty;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 4);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueDeleteOk(buffer) {\n  var val, offset = 0, fields = {\n    messageCount: void 0\n  };\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.messageCount = val;\n  return fields;\n}\n\nfunction encodeQueueDeleteOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0, buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276841, 7);\n  offset = 11;\n  val = fields.messageCount;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'messageCount'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'messageCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueUnbind(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    exchange: void 0,\n    routingKey: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.slice(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeQueueUnbind(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0, scratchOffset = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(17 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276850, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = \"\");\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueUnbindOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeQueueUnbindOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276851, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicQos(buffer) {\n  var val, offset = 0, fields = {\n    prefetchSize: void 0,\n    prefetchCount: void 0,\n    global: void 0\n  };\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.prefetchSize = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.prefetchCount = val;\n  val = !!(1 & buffer[offset]);\n  fields.global = val;\n  return fields;\n}\n\nfunction encodeBasicQos(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = Buffer.alloc(19 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932170, 7);\n  offset = 11;\n  val = fields.prefetchSize;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'prefetchSize' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  val = fields.prefetchCount;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'prefetchCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.global;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicQosOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeBasicQosOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932171, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicConsume(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    consumerTag: void 0,\n    noLocal: void 0,\n    noAck: void 0,\n    exclusive: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.consumerTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.noLocal = val;\n  val = !!(2 & buffer[offset]);\n  fields.noAck = val;\n  val = !!(4 & buffer[offset]);\n  fields.exclusive = val;\n  val = !!(8 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.slice(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeBasicConsume(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  val = fields.consumerTag;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)\");\n  var consumerTag_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += consumerTag_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(17 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932180, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.consumerTag;\n  void 0 === val && (val = \"\");\n  buffer[offset] = consumerTag_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += consumerTag_len;\n  val = fields.noLocal;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.noAck;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  val = fields.exclusive;\n  void 0 === val && (val = !1);\n  val && (bits += 4);\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 8);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicConsumeOk(buffer) {\n  var val, len, offset = 0, fields = {\n    consumerTag: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.consumerTag = val;\n  return fields;\n}\n\nfunction encodeBasicConsumeOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.consumerTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'consumerTag'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)\");\n  var consumerTag_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += consumerTag_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932181, 7);\n  offset = 11;\n  val = fields.consumerTag;\n  void 0 === val && (val = void 0);\n  buffer[offset] = consumerTag_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += consumerTag_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicCancel(buffer) {\n  var val, len, offset = 0, fields = {\n    consumerTag: void 0,\n    nowait: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.consumerTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.nowait = val;\n  return fields;\n}\n\nfunction encodeBasicCancel(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.consumerTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'consumerTag'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)\");\n  var consumerTag_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += consumerTag_len;\n  var buffer = Buffer.alloc(14 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932190, 7);\n  offset = 11;\n  val = fields.consumerTag;\n  void 0 === val && (val = void 0);\n  buffer[offset] = consumerTag_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += consumerTag_len;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicCancelOk(buffer) {\n  var val, len, offset = 0, fields = {\n    consumerTag: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.consumerTag = val;\n  return fields;\n}\n\nfunction encodeBasicCancelOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.consumerTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'consumerTag'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)\");\n  var consumerTag_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += consumerTag_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932191, 7);\n  offset = 11;\n  val = fields.consumerTag;\n  void 0 === val && (val = void 0);\n  buffer[offset] = consumerTag_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += consumerTag_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicPublish(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    exchange: void 0,\n    routingKey: void 0,\n    mandatory: void 0,\n    immediate: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  val = !!(1 & buffer[offset]);\n  fields.mandatory = val;\n  val = !!(2 & buffer[offset]);\n  fields.immediate = val;\n  return fields;\n}\n\nfunction encodeBasicPublish(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.exchange;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  var buffer = Buffer.alloc(17 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932200, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.exchange;\n  void 0 === val && (val = \"\");\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = \"\");\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  val = fields.mandatory;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.immediate;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicReturn(buffer) {\n  var val, len, offset = 0, fields = {\n    replyCode: void 0,\n    replyText: void 0,\n    exchange: void 0,\n    routingKey: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.replyCode = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.replyText = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  return fields;\n}\n\nfunction encodeBasicReturn(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.replyText;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'replyText' is the wrong type; must be a string (up to 255 chars)\");\n  var replyText_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += replyText_len;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'routingKey'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  var buffer = Buffer.alloc(17 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932210, 7);\n  offset = 11;\n  val = fields.replyCode;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'replyCode'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'replyCode' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.replyText;\n  void 0 === val && (val = \"\");\n  buffer[offset] = replyText_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += replyText_len;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = void 0);\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicDeliver(buffer) {\n  var val, len, offset = 0, fields = {\n    consumerTag: void 0,\n    deliveryTag: void 0,\n    redelivered: void 0,\n    exchange: void 0,\n    routingKey: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.consumerTag = val;\n  val = ints.readUInt64BE(buffer, offset);\n  offset += 8;\n  fields.deliveryTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.redelivered = val;\n  offset++;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  return fields;\n}\n\nfunction encodeBasicDeliver(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.consumerTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'consumerTag'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)\");\n  var consumerTag_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += consumerTag_len;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'routingKey'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  var buffer = Buffer.alloc(24 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932220, 7);\n  offset = 11;\n  val = fields.consumerTag;\n  void 0 === val && (val = void 0);\n  buffer[offset] = consumerTag_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += consumerTag_len;\n  val = fields.deliveryTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'deliveryTag'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryTag' is the wrong type; must be a number (but not NaN)\");\n  ints.writeUInt64BE(buffer, val, offset);\n  offset += 8;\n  val = fields.redelivered;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = void 0);\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicGet(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    noAck: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  val = !!(1 & buffer[offset]);\n  fields.noAck = val;\n  return fields;\n}\n\nfunction encodeBasicGet(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932230, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.noAck;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicGetOk(buffer) {\n  var val, len, offset = 0, fields = {\n    deliveryTag: void 0,\n    redelivered: void 0,\n    exchange: void 0,\n    routingKey: void 0,\n    messageCount: void 0\n  };\n  val = ints.readUInt64BE(buffer, offset);\n  offset += 8;\n  fields.deliveryTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.redelivered = val;\n  offset++;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.messageCount = val;\n  return fields;\n}\n\nfunction encodeBasicGetOk(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'routingKey'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  var buffer = Buffer.alloc(27 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932231, 7);\n  offset = 11;\n  val = fields.deliveryTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'deliveryTag'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryTag' is the wrong type; must be a number (but not NaN)\");\n  ints.writeUInt64BE(buffer, val, offset);\n  offset += 8;\n  val = fields.redelivered;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = void 0);\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  val = fields.messageCount;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'messageCount'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'messageCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicGetEmpty(buffer) {\n  var val, len, offset = 0, fields = {\n    clusterId: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.clusterId = val;\n  return fields;\n}\n\nfunction encodeBasicGetEmpty(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.clusterId;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'clusterId' is the wrong type; must be a string (up to 255 chars)\");\n  var clusterId_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += clusterId_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932232, 7);\n  offset = 11;\n  val = fields.clusterId;\n  void 0 === val && (val = \"\");\n  buffer[offset] = clusterId_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += clusterId_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicAck(buffer) {\n  var val, offset = 0, fields = {\n    deliveryTag: void 0,\n    multiple: void 0\n  };\n  val = ints.readUInt64BE(buffer, offset);\n  offset += 8;\n  fields.deliveryTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.multiple = val;\n  return fields;\n}\n\nfunction encodeBasicAck(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = Buffer.alloc(21 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932240, 7);\n  offset = 11;\n  val = fields.deliveryTag;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryTag' is the wrong type; must be a number (but not NaN)\");\n  ints.writeUInt64BE(buffer, val, offset);\n  offset += 8;\n  val = fields.multiple;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicReject(buffer) {\n  var val, offset = 0, fields = {\n    deliveryTag: void 0,\n    requeue: void 0\n  };\n  val = ints.readUInt64BE(buffer, offset);\n  offset += 8;\n  fields.deliveryTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.requeue = val;\n  return fields;\n}\n\nfunction encodeBasicReject(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = Buffer.alloc(21 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932250, 7);\n  offset = 11;\n  val = fields.deliveryTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'deliveryTag'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryTag' is the wrong type; must be a number (but not NaN)\");\n  ints.writeUInt64BE(buffer, val, offset);\n  offset += 8;\n  val = fields.requeue;\n  void 0 === val && (val = !0);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicRecoverAsync(buffer) {\n  var val, offset = 0, fields = {\n    requeue: void 0\n  };\n  val = !!(1 & buffer[offset]);\n  fields.requeue = val;\n  return fields;\n}\n\nfunction encodeBasicRecoverAsync(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932260, 7);\n  offset = 11;\n  val = fields.requeue;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicRecover(buffer) {\n  var val, offset = 0, fields = {\n    requeue: void 0\n  };\n  val = !!(1 & buffer[offset]);\n  fields.requeue = val;\n  return fields;\n}\n\nfunction encodeBasicRecover(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932270, 7);\n  offset = 11;\n  val = fields.requeue;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicRecoverOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeBasicRecoverOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932271, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicNack(buffer) {\n  var val, offset = 0, fields = {\n    deliveryTag: void 0,\n    multiple: void 0,\n    requeue: void 0\n  };\n  val = ints.readUInt64BE(buffer, offset);\n  offset += 8;\n  fields.deliveryTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.multiple = val;\n  val = !!(2 & buffer[offset]);\n  fields.requeue = val;\n  return fields;\n}\n\nfunction encodeBasicNack(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = Buffer.alloc(21 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932280, 7);\n  offset = 11;\n  val = fields.deliveryTag;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryTag' is the wrong type; must be a number (but not NaN)\");\n  ints.writeUInt64BE(buffer, val, offset);\n  offset += 8;\n  val = fields.multiple;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.requeue;\n  void 0 === val && (val = !0);\n  val && (bits += 2);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxSelect(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeTxSelect(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898250, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxSelectOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeTxSelectOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898251, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxCommit(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeTxCommit(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898260, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxCommitOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeTxCommitOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898261, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxRollback(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeTxRollback(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898270, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxRollbackOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeTxRollbackOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898271, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConfirmSelect(buffer) {\n  var val, offset = 0, fields = {\n    nowait: void 0\n  };\n  val = !!(1 & buffer[offset]);\n  fields.nowait = val;\n  return fields;\n}\n\nfunction encodeConfirmSelect(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5570570, 7);\n  offset = 11;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConfirmSelectOk(buffer) {\n  var fields = {};\n  return fields;\n}\n\nfunction encodeConfirmSelectOk(channel, fields) {\n  var offset = 0, varyingSize = 0, buffer = Buffer.alloc(12 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5570571, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction encodeBasicProperties(channel, size, fields) {\n  var val, len, offset = 0, flags = 0, scratchOffset = 0, varyingSize = 0;\n  val = fields.contentType;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'contentType' is the wrong type; must be a string (up to 255 chars)\");\n    var contentType_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += contentType_len;\n  }\n  val = fields.contentEncoding;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'contentEncoding' is the wrong type; must be a string (up to 255 chars)\");\n    var contentEncoding_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += contentEncoding_len;\n  }\n  val = fields.headers;\n  if (void 0 != val) {\n    if (\"object\" != typeof val) throw new TypeError(\"Field 'headers' is the wrong type; must be an object\");\n    len = encodeTable(SCRATCH, val, scratchOffset);\n    var headers_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n    scratchOffset += len;\n    varyingSize += headers_encoded.length;\n  }\n  val = fields.deliveryMode;\n  if (void 0 != val) {\n    if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryMode' is the wrong type; must be a number (but not NaN)\");\n    varyingSize += 1;\n  }\n  val = fields.priority;\n  if (void 0 != val) {\n    if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'priority' is the wrong type; must be a number (but not NaN)\");\n    varyingSize += 1;\n  }\n  val = fields.correlationId;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'correlationId' is the wrong type; must be a string (up to 255 chars)\");\n    var correlationId_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += correlationId_len;\n  }\n  val = fields.replyTo;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'replyTo' is the wrong type; must be a string (up to 255 chars)\");\n    var replyTo_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += replyTo_len;\n  }\n  val = fields.expiration;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'expiration' is the wrong type; must be a string (up to 255 chars)\");\n    var expiration_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += expiration_len;\n  }\n  val = fields.messageId;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'messageId' is the wrong type; must be a string (up to 255 chars)\");\n    var messageId_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += messageId_len;\n  }\n  val = fields.timestamp;\n  if (void 0 != val) {\n    if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'timestamp' is the wrong type; must be a number (but not NaN)\");\n    varyingSize += 8;\n  }\n  val = fields.type;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'type' is the wrong type; must be a string (up to 255 chars)\");\n    var type_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += type_len;\n  }\n  val = fields.userId;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'userId' is the wrong type; must be a string (up to 255 chars)\");\n    var userId_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += userId_len;\n  }\n  val = fields.appId;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'appId' is the wrong type; must be a string (up to 255 chars)\");\n    var appId_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += appId_len;\n  }\n  val = fields.clusterId;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'clusterId' is the wrong type; must be a string (up to 255 chars)\");\n    var clusterId_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += clusterId_len;\n  }\n  var buffer = Buffer.alloc(22 + varyingSize);\n  buffer[0] = 2;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932160, 7);\n  ints.writeUInt64BE(buffer, size, 11);\n  flags = 0;\n  offset = 21;\n  val = fields.contentType;\n  if (void 0 != val) {\n    flags += 32768;\n    buffer[offset] = contentType_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += contentType_len;\n  }\n  val = fields.contentEncoding;\n  if (void 0 != val) {\n    flags += 16384;\n    buffer[offset] = contentEncoding_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += contentEncoding_len;\n  }\n  val = fields.headers;\n  if (void 0 != val) {\n    flags += 8192;\n    offset += headers_encoded.copy(buffer, offset);\n  }\n  val = fields.deliveryMode;\n  if (void 0 != val) {\n    flags += 4096;\n    buffer.writeUInt8(val, offset);\n    offset++;\n  }\n  val = fields.priority;\n  if (void 0 != val) {\n    flags += 2048;\n    buffer.writeUInt8(val, offset);\n    offset++;\n  }\n  val = fields.correlationId;\n  if (void 0 != val) {\n    flags += 1024;\n    buffer[offset] = correlationId_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += correlationId_len;\n  }\n  val = fields.replyTo;\n  if (void 0 != val) {\n    flags += 512;\n    buffer[offset] = replyTo_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += replyTo_len;\n  }\n  val = fields.expiration;\n  if (void 0 != val) {\n    flags += 256;\n    buffer[offset] = expiration_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += expiration_len;\n  }\n  val = fields.messageId;\n  if (void 0 != val) {\n    flags += 128;\n    buffer[offset] = messageId_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += messageId_len;\n  }\n  val = fields.timestamp;\n  if (void 0 != val) {\n    flags += 64;\n    ints.writeUInt64BE(buffer, val, offset);\n    offset += 8;\n  }\n  val = fields.type;\n  if (void 0 != val) {\n    flags += 32;\n    buffer[offset] = type_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += type_len;\n  }\n  val = fields.userId;\n  if (void 0 != val) {\n    flags += 16;\n    buffer[offset] = userId_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += userId_len;\n  }\n  val = fields.appId;\n  if (void 0 != val) {\n    flags += 8;\n    buffer[offset] = appId_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += appId_len;\n  }\n  val = fields.clusterId;\n  if (void 0 != val) {\n    flags += 4;\n    buffer[offset] = clusterId_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += clusterId_len;\n  }\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  buffer.writeUInt16BE(flags, 19);\n  return buffer.slice(0, offset + 1);\n}\n\nfunction decodeBasicProperties(buffer) {\n  var flags, val, len, offset = 2;\n  flags = buffer.readUInt16BE(0);\n  if (0 === flags) return {};\n  var fields = {\n    contentType: void 0,\n    contentEncoding: void 0,\n    headers: void 0,\n    deliveryMode: void 0,\n    priority: void 0,\n    correlationId: void 0,\n    replyTo: void 0,\n    expiration: void 0,\n    messageId: void 0,\n    timestamp: void 0,\n    type: void 0,\n    userId: void 0,\n    appId: void 0,\n    clusterId: void 0\n  };\n  if (32768 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.contentType = val;\n  }\n  if (16384 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.contentEncoding = val;\n  }\n  if (8192 & flags) {\n    len = buffer.readUInt32BE(offset);\n    offset += 4;\n    val = decodeFields(buffer.slice(offset, offset + len));\n    offset += len;\n    fields.headers = val;\n  }\n  if (4096 & flags) {\n    val = buffer[offset];\n    offset++;\n    fields.deliveryMode = val;\n  }\n  if (2048 & flags) {\n    val = buffer[offset];\n    offset++;\n    fields.priority = val;\n  }\n  if (1024 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.correlationId = val;\n  }\n  if (512 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.replyTo = val;\n  }\n  if (256 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.expiration = val;\n  }\n  if (128 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.messageId = val;\n  }\n  if (64 & flags) {\n    val = ints.readUInt64BE(buffer, offset);\n    offset += 8;\n    fields.timestamp = val;\n  }\n  if (32 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.type = val;\n  }\n  if (16 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.userId = val;\n  }\n  if (8 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.appId = val;\n  }\n  if (4 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.clusterId = val;\n  }\n  return fields;\n}\n\nvar Buffer = require(\"safe-buffer\").Buffer, codec = require(\"./codec\"), ints = require(\"buffer-more-ints\"), encodeTable = codec.encodeTable, decodeFields = codec.decodeFields, SCRATCH = Buffer.alloc(16384), EMPTY_OBJECT = Object.freeze({});\n\nmodule.exports.constants = {\n  FRAME_METHOD: 1,\n  FRAME_HEADER: 2,\n  FRAME_BODY: 3,\n  FRAME_HEARTBEAT: 8,\n  FRAME_MIN_SIZE: 4096,\n  FRAME_END: 206,\n  REPLY_SUCCESS: 200,\n  CONTENT_TOO_LARGE: 311,\n  NO_ROUTE: 312,\n  NO_CONSUMERS: 313,\n  ACCESS_REFUSED: 403,\n  NOT_FOUND: 404,\n  RESOURCE_LOCKED: 405,\n  PRECONDITION_FAILED: 406,\n  CONNECTION_FORCED: 320,\n  INVALID_PATH: 402,\n  FRAME_ERROR: 501,\n  SYNTAX_ERROR: 502,\n  COMMAND_INVALID: 503,\n  CHANNEL_ERROR: 504,\n  UNEXPECTED_FRAME: 505,\n  RESOURCE_ERROR: 506,\n  NOT_ALLOWED: 530,\n  NOT_IMPLEMENTED: 540,\n  INTERNAL_ERROR: 541\n};\n\nmodule.exports.constant_strs = {\n  \"1\": \"FRAME-METHOD\",\n  \"2\": \"FRAME-HEADER\",\n  \"3\": \"FRAME-BODY\",\n  \"8\": \"FRAME-HEARTBEAT\",\n  \"200\": \"REPLY-SUCCESS\",\n  \"206\": \"FRAME-END\",\n  \"311\": \"CONTENT-TOO-LARGE\",\n  \"312\": \"NO-ROUTE\",\n  \"313\": \"NO-CONSUMERS\",\n  \"320\": \"CONNECTION-FORCED\",\n  \"402\": \"INVALID-PATH\",\n  \"403\": \"ACCESS-REFUSED\",\n  \"404\": \"NOT-FOUND\",\n  \"405\": \"RESOURCE-LOCKED\",\n  \"406\": \"PRECONDITION-FAILED\",\n  \"501\": \"FRAME-ERROR\",\n  \"502\": \"SYNTAX-ERROR\",\n  \"503\": \"COMMAND-INVALID\",\n  \"504\": \"CHANNEL-ERROR\",\n  \"505\": \"UNEXPECTED-FRAME\",\n  \"506\": \"RESOURCE-ERROR\",\n  \"530\": \"NOT-ALLOWED\",\n  \"540\": \"NOT-IMPLEMENTED\",\n  \"541\": \"INTERNAL-ERROR\",\n  \"4096\": \"FRAME-MIN-SIZE\"\n};\n\nmodule.exports.FRAME_OVERHEAD = 8;\n\nmodule.exports.decode = function(id, buf) {\n  switch (id) {\n   case 655370:\n    return decodeConnectionStart(buf);\n\n   case 655371:\n    return decodeConnectionStartOk(buf);\n\n   case 655380:\n    return decodeConnectionSecure(buf);\n\n   case 655381:\n    return decodeConnectionSecureOk(buf);\n\n   case 655390:\n    return decodeConnectionTune(buf);\n\n   case 655391:\n    return decodeConnectionTuneOk(buf);\n\n   case 655400:\n    return decodeConnectionOpen(buf);\n\n   case 655401:\n    return decodeConnectionOpenOk(buf);\n\n   case 655410:\n    return decodeConnectionClose(buf);\n\n   case 655411:\n    return decodeConnectionCloseOk(buf);\n\n   case 655420:\n    return decodeConnectionBlocked(buf);\n\n   case 655421:\n    return decodeConnectionUnblocked(buf);\n\n   case 1310730:\n    return decodeChannelOpen(buf);\n\n   case 1310731:\n    return decodeChannelOpenOk(buf);\n\n   case 1310740:\n    return decodeChannelFlow(buf);\n\n   case 1310741:\n    return decodeChannelFlowOk(buf);\n\n   case 1310760:\n    return decodeChannelClose(buf);\n\n   case 1310761:\n    return decodeChannelCloseOk(buf);\n\n   case 1966090:\n    return decodeAccessRequest(buf);\n\n   case 1966091:\n    return decodeAccessRequestOk(buf);\n\n   case 2621450:\n    return decodeExchangeDeclare(buf);\n\n   case 2621451:\n    return decodeExchangeDeclareOk(buf);\n\n   case 2621460:\n    return decodeExchangeDelete(buf);\n\n   case 2621461:\n    return decodeExchangeDeleteOk(buf);\n\n   case 2621470:\n    return decodeExchangeBind(buf);\n\n   case 2621471:\n    return decodeExchangeBindOk(buf);\n\n   case 2621480:\n    return decodeExchangeUnbind(buf);\n\n   case 2621491:\n    return decodeExchangeUnbindOk(buf);\n\n   case 3276810:\n    return decodeQueueDeclare(buf);\n\n   case 3276811:\n    return decodeQueueDeclareOk(buf);\n\n   case 3276820:\n    return decodeQueueBind(buf);\n\n   case 3276821:\n    return decodeQueueBindOk(buf);\n\n   case 3276830:\n    return decodeQueuePurge(buf);\n\n   case 3276831:\n    return decodeQueuePurgeOk(buf);\n\n   case 3276840:\n    return decodeQueueDelete(buf);\n\n   case 3276841:\n    return decodeQueueDeleteOk(buf);\n\n   case 3276850:\n    return decodeQueueUnbind(buf);\n\n   case 3276851:\n    return decodeQueueUnbindOk(buf);\n\n   case 3932170:\n    return decodeBasicQos(buf);\n\n   case 3932171:\n    return decodeBasicQosOk(buf);\n\n   case 3932180:\n    return decodeBasicConsume(buf);\n\n   case 3932181:\n    return decodeBasicConsumeOk(buf);\n\n   case 3932190:\n    return decodeBasicCancel(buf);\n\n   case 3932191:\n    return decodeBasicCancelOk(buf);\n\n   case 3932200:\n    return decodeBasicPublish(buf);\n\n   case 3932210:\n    return decodeBasicReturn(buf);\n\n   case 3932220:\n    return decodeBasicDeliver(buf);\n\n   case 3932230:\n    return decodeBasicGet(buf);\n\n   case 3932231:\n    return decodeBasicGetOk(buf);\n\n   case 3932232:\n    return decodeBasicGetEmpty(buf);\n\n   case 3932240:\n    return decodeBasicAck(buf);\n\n   case 3932250:\n    return decodeBasicReject(buf);\n\n   case 3932260:\n    return decodeBasicRecoverAsync(buf);\n\n   case 3932270:\n    return decodeBasicRecover(buf);\n\n   case 3932271:\n    return decodeBasicRecoverOk(buf);\n\n   case 3932280:\n    return decodeBasicNack(buf);\n\n   case 5898250:\n    return decodeTxSelect(buf);\n\n   case 5898251:\n    return decodeTxSelectOk(buf);\n\n   case 5898260:\n    return decodeTxCommit(buf);\n\n   case 5898261:\n    return decodeTxCommitOk(buf);\n\n   case 5898270:\n    return decodeTxRollback(buf);\n\n   case 5898271:\n    return decodeTxRollbackOk(buf);\n\n   case 5570570:\n    return decodeConfirmSelect(buf);\n\n   case 5570571:\n    return decodeConfirmSelectOk(buf);\n\n   case 60:\n    return decodeBasicProperties(buf);\n\n   default:\n    throw new Error(\"Unknown class/method ID\");\n  }\n};\n\nmodule.exports.encodeMethod = function(id, channel, fields) {\n  switch (id) {\n   case 655370:\n    return encodeConnectionStart(channel, fields);\n\n   case 655371:\n    return encodeConnectionStartOk(channel, fields);\n\n   case 655380:\n    return encodeConnectionSecure(channel, fields);\n\n   case 655381:\n    return encodeConnectionSecureOk(channel, fields);\n\n   case 655390:\n    return encodeConnectionTune(channel, fields);\n\n   case 655391:\n    return encodeConnectionTuneOk(channel, fields);\n\n   case 655400:\n    return encodeConnectionOpen(channel, fields);\n\n   case 655401:\n    return encodeConnectionOpenOk(channel, fields);\n\n   case 655410:\n    return encodeConnectionClose(channel, fields);\n\n   case 655411:\n    return encodeConnectionCloseOk(channel, fields);\n\n   case 655420:\n    return encodeConnectionBlocked(channel, fields);\n\n   case 655421:\n    return encodeConnectionUnblocked(channel, fields);\n\n   case 1310730:\n    return encodeChannelOpen(channel, fields);\n\n   case 1310731:\n    return encodeChannelOpenOk(channel, fields);\n\n   case 1310740:\n    return encodeChannelFlow(channel, fields);\n\n   case 1310741:\n    return encodeChannelFlowOk(channel, fields);\n\n   case 1310760:\n    return encodeChannelClose(channel, fields);\n\n   case 1310761:\n    return encodeChannelCloseOk(channel, fields);\n\n   case 1966090:\n    return encodeAccessRequest(channel, fields);\n\n   case 1966091:\n    return encodeAccessRequestOk(channel, fields);\n\n   case 2621450:\n    return encodeExchangeDeclare(channel, fields);\n\n   case 2621451:\n    return encodeExchangeDeclareOk(channel, fields);\n\n   case 2621460:\n    return encodeExchangeDelete(channel, fields);\n\n   case 2621461:\n    return encodeExchangeDeleteOk(channel, fields);\n\n   case 2621470:\n    return encodeExchangeBind(channel, fields);\n\n   case 2621471:\n    return encodeExchangeBindOk(channel, fields);\n\n   case 2621480:\n    return encodeExchangeUnbind(channel, fields);\n\n   case 2621491:\n    return encodeExchangeUnbindOk(channel, fields);\n\n   case 3276810:\n    return encodeQueueDeclare(channel, fields);\n\n   case 3276811:\n    return encodeQueueDeclareOk(channel, fields);\n\n   case 3276820:\n    return encodeQueueBind(channel, fields);\n\n   case 3276821:\n    return encodeQueueBindOk(channel, fields);\n\n   case 3276830:\n    return encodeQueuePurge(channel, fields);\n\n   case 3276831:\n    return encodeQueuePurgeOk(channel, fields);\n\n   case 3276840:\n    return encodeQueueDelete(channel, fields);\n\n   case 3276841:\n    return encodeQueueDeleteOk(channel, fields);\n\n   case 3276850:\n    return encodeQueueUnbind(channel, fields);\n\n   case 3276851:\n    return encodeQueueUnbindOk(channel, fields);\n\n   case 3932170:\n    return encodeBasicQos(channel, fields);\n\n   case 3932171:\n    return encodeBasicQosOk(channel, fields);\n\n   case 3932180:\n    return encodeBasicConsume(channel, fields);\n\n   case 3932181:\n    return encodeBasicConsumeOk(channel, fields);\n\n   case 3932190:\n    return encodeBasicCancel(channel, fields);\n\n   case 3932191:\n    return encodeBasicCancelOk(channel, fields);\n\n   case 3932200:\n    return encodeBasicPublish(channel, fields);\n\n   case 3932210:\n    return encodeBasicReturn(channel, fields);\n\n   case 3932220:\n    return encodeBasicDeliver(channel, fields);\n\n   case 3932230:\n    return encodeBasicGet(channel, fields);\n\n   case 3932231:\n    return encodeBasicGetOk(channel, fields);\n\n   case 3932232:\n    return encodeBasicGetEmpty(channel, fields);\n\n   case 3932240:\n    return encodeBasicAck(channel, fields);\n\n   case 3932250:\n    return encodeBasicReject(channel, fields);\n\n   case 3932260:\n    return encodeBasicRecoverAsync(channel, fields);\n\n   case 3932270:\n    return encodeBasicRecover(channel, fields);\n\n   case 3932271:\n    return encodeBasicRecoverOk(channel, fields);\n\n   case 3932280:\n    return encodeBasicNack(channel, fields);\n\n   case 5898250:\n    return encodeTxSelect(channel, fields);\n\n   case 5898251:\n    return encodeTxSelectOk(channel, fields);\n\n   case 5898260:\n    return encodeTxCommit(channel, fields);\n\n   case 5898261:\n    return encodeTxCommitOk(channel, fields);\n\n   case 5898270:\n    return encodeTxRollback(channel, fields);\n\n   case 5898271:\n    return encodeTxRollbackOk(channel, fields);\n\n   case 5570570:\n    return encodeConfirmSelect(channel, fields);\n\n   case 5570571:\n    return encodeConfirmSelectOk(channel, fields);\n\n   default:\n    throw new Error(\"Unknown class/method ID\");\n  }\n};\n\nmodule.exports.encodeProperties = function(id, channel, size, fields) {\n  switch (id) {\n   case 60:\n    return encodeBasicProperties(channel, size, fields);\n\n   default:\n    throw new Error(\"Unknown class/properties ID\");\n  }\n};\n\nmodule.exports.info = function(id) {\n  switch (id) {\n   case 655370:\n    return methodInfoConnectionStart;\n\n   case 655371:\n    return methodInfoConnectionStartOk;\n\n   case 655380:\n    return methodInfoConnectionSecure;\n\n   case 655381:\n    return methodInfoConnectionSecureOk;\n\n   case 655390:\n    return methodInfoConnectionTune;\n\n   case 655391:\n    return methodInfoConnectionTuneOk;\n\n   case 655400:\n    return methodInfoConnectionOpen;\n\n   case 655401:\n    return methodInfoConnectionOpenOk;\n\n   case 655410:\n    return methodInfoConnectionClose;\n\n   case 655411:\n    return methodInfoConnectionCloseOk;\n\n   case 655420:\n    return methodInfoConnectionBlocked;\n\n   case 655421:\n    return methodInfoConnectionUnblocked;\n\n   case 1310730:\n    return methodInfoChannelOpen;\n\n   case 1310731:\n    return methodInfoChannelOpenOk;\n\n   case 1310740:\n    return methodInfoChannelFlow;\n\n   case 1310741:\n    return methodInfoChannelFlowOk;\n\n   case 1310760:\n    return methodInfoChannelClose;\n\n   case 1310761:\n    return methodInfoChannelCloseOk;\n\n   case 1966090:\n    return methodInfoAccessRequest;\n\n   case 1966091:\n    return methodInfoAccessRequestOk;\n\n   case 2621450:\n    return methodInfoExchangeDeclare;\n\n   case 2621451:\n    return methodInfoExchangeDeclareOk;\n\n   case 2621460:\n    return methodInfoExchangeDelete;\n\n   case 2621461:\n    return methodInfoExchangeDeleteOk;\n\n   case 2621470:\n    return methodInfoExchangeBind;\n\n   case 2621471:\n    return methodInfoExchangeBindOk;\n\n   case 2621480:\n    return methodInfoExchangeUnbind;\n\n   case 2621491:\n    return methodInfoExchangeUnbindOk;\n\n   case 3276810:\n    return methodInfoQueueDeclare;\n\n   case 3276811:\n    return methodInfoQueueDeclareOk;\n\n   case 3276820:\n    return methodInfoQueueBind;\n\n   case 3276821:\n    return methodInfoQueueBindOk;\n\n   case 3276830:\n    return methodInfoQueuePurge;\n\n   case 3276831:\n    return methodInfoQueuePurgeOk;\n\n   case 3276840:\n    return methodInfoQueueDelete;\n\n   case 3276841:\n    return methodInfoQueueDeleteOk;\n\n   case 3276850:\n    return methodInfoQueueUnbind;\n\n   case 3276851:\n    return methodInfoQueueUnbindOk;\n\n   case 3932170:\n    return methodInfoBasicQos;\n\n   case 3932171:\n    return methodInfoBasicQosOk;\n\n   case 3932180:\n    return methodInfoBasicConsume;\n\n   case 3932181:\n    return methodInfoBasicConsumeOk;\n\n   case 3932190:\n    return methodInfoBasicCancel;\n\n   case 3932191:\n    return methodInfoBasicCancelOk;\n\n   case 3932200:\n    return methodInfoBasicPublish;\n\n   case 3932210:\n    return methodInfoBasicReturn;\n\n   case 3932220:\n    return methodInfoBasicDeliver;\n\n   case 3932230:\n    return methodInfoBasicGet;\n\n   case 3932231:\n    return methodInfoBasicGetOk;\n\n   case 3932232:\n    return methodInfoBasicGetEmpty;\n\n   case 3932240:\n    return methodInfoBasicAck;\n\n   case 3932250:\n    return methodInfoBasicReject;\n\n   case 3932260:\n    return methodInfoBasicRecoverAsync;\n\n   case 3932270:\n    return methodInfoBasicRecover;\n\n   case 3932271:\n    return methodInfoBasicRecoverOk;\n\n   case 3932280:\n    return methodInfoBasicNack;\n\n   case 5898250:\n    return methodInfoTxSelect;\n\n   case 5898251:\n    return methodInfoTxSelectOk;\n\n   case 5898260:\n    return methodInfoTxCommit;\n\n   case 5898261:\n    return methodInfoTxCommitOk;\n\n   case 5898270:\n    return methodInfoTxRollback;\n\n   case 5898271:\n    return methodInfoTxRollbackOk;\n\n   case 5570570:\n    return methodInfoConfirmSelect;\n\n   case 5570571:\n    return methodInfoConfirmSelectOk;\n\n   case 60:\n    return propertiesInfoBasicProperties;\n\n   default:\n    throw new Error(\"Unknown class/method ID\");\n  }\n};\n\nmodule.exports.ConnectionStart = 655370;\n\nvar methodInfoConnectionStart = module.exports.methodInfoConnectionStart = {\n  id: 655370,\n  name: \"ConnectionStart\",\n  args: [ {\n    type: \"octet\",\n    name: \"versionMajor\",\n    \"default\": 0\n  }, {\n    type: \"octet\",\n    name: \"versionMinor\",\n    \"default\": 9\n  }, {\n    type: \"table\",\n    name: \"serverProperties\"\n  }, {\n    type: \"longstr\",\n    name: \"mechanisms\",\n    \"default\": \"PLAIN\"\n  }, {\n    type: \"longstr\",\n    name: \"locales\",\n    \"default\": \"en_US\"\n  } ]\n};\n\nmodule.exports.ConnectionStartOk = 655371;\n\nvar methodInfoConnectionStartOk = module.exports.methodInfoConnectionStartOk = {\n  id: 655371,\n  name: \"ConnectionStartOk\",\n  args: [ {\n    type: \"table\",\n    name: \"clientProperties\"\n  }, {\n    type: \"shortstr\",\n    name: \"mechanism\",\n    \"default\": \"PLAIN\"\n  }, {\n    type: \"longstr\",\n    name: \"response\"\n  }, {\n    type: \"shortstr\",\n    name: \"locale\",\n    \"default\": \"en_US\"\n  } ]\n};\n\nmodule.exports.ConnectionSecure = 655380;\n\nvar methodInfoConnectionSecure = module.exports.methodInfoConnectionSecure = {\n  id: 655380,\n  name: \"ConnectionSecure\",\n  args: [ {\n    type: \"longstr\",\n    name: \"challenge\"\n  } ]\n};\n\nmodule.exports.ConnectionSecureOk = 655381;\n\nvar methodInfoConnectionSecureOk = module.exports.methodInfoConnectionSecureOk = {\n  id: 655381,\n  name: \"ConnectionSecureOk\",\n  args: [ {\n    type: \"longstr\",\n    name: \"response\"\n  } ]\n};\n\nmodule.exports.ConnectionTune = 655390;\n\nvar methodInfoConnectionTune = module.exports.methodInfoConnectionTune = {\n  id: 655390,\n  name: \"ConnectionTune\",\n  args: [ {\n    type: \"short\",\n    name: \"channelMax\",\n    \"default\": 0\n  }, {\n    type: \"long\",\n    name: \"frameMax\",\n    \"default\": 0\n  }, {\n    type: \"short\",\n    name: \"heartbeat\",\n    \"default\": 0\n  } ]\n};\n\nmodule.exports.ConnectionTuneOk = 655391;\n\nvar methodInfoConnectionTuneOk = module.exports.methodInfoConnectionTuneOk = {\n  id: 655391,\n  name: \"ConnectionTuneOk\",\n  args: [ {\n    type: \"short\",\n    name: \"channelMax\",\n    \"default\": 0\n  }, {\n    type: \"long\",\n    name: \"frameMax\",\n    \"default\": 0\n  }, {\n    type: \"short\",\n    name: \"heartbeat\",\n    \"default\": 0\n  } ]\n};\n\nmodule.exports.ConnectionOpen = 655400;\n\nvar methodInfoConnectionOpen = module.exports.methodInfoConnectionOpen = {\n  id: 655400,\n  name: \"ConnectionOpen\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"virtualHost\",\n    \"default\": \"/\"\n  }, {\n    type: \"shortstr\",\n    name: \"capabilities\",\n    \"default\": \"\"\n  }, {\n    type: \"bit\",\n    name: \"insist\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.ConnectionOpenOk = 655401;\n\nvar methodInfoConnectionOpenOk = module.exports.methodInfoConnectionOpenOk = {\n  id: 655401,\n  name: \"ConnectionOpenOk\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"knownHosts\",\n    \"default\": \"\"\n  } ]\n};\n\nmodule.exports.ConnectionClose = 655410;\n\nvar methodInfoConnectionClose = module.exports.methodInfoConnectionClose = {\n  id: 655410,\n  name: \"ConnectionClose\",\n  args: [ {\n    type: \"short\",\n    name: \"replyCode\"\n  }, {\n    type: \"shortstr\",\n    name: \"replyText\",\n    \"default\": \"\"\n  }, {\n    type: \"short\",\n    name: \"classId\"\n  }, {\n    type: \"short\",\n    name: \"methodId\"\n  } ]\n};\n\nmodule.exports.ConnectionCloseOk = 655411;\n\nvar methodInfoConnectionCloseOk = module.exports.methodInfoConnectionCloseOk = {\n  id: 655411,\n  name: \"ConnectionCloseOk\",\n  args: []\n};\n\nmodule.exports.ConnectionBlocked = 655420;\n\nvar methodInfoConnectionBlocked = module.exports.methodInfoConnectionBlocked = {\n  id: 655420,\n  name: \"ConnectionBlocked\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"reason\",\n    \"default\": \"\"\n  } ]\n};\n\nmodule.exports.ConnectionUnblocked = 655421;\n\nvar methodInfoConnectionUnblocked = module.exports.methodInfoConnectionUnblocked = {\n  id: 655421,\n  name: \"ConnectionUnblocked\",\n  args: []\n};\n\nmodule.exports.ChannelOpen = 1310730;\n\nvar methodInfoChannelOpen = module.exports.methodInfoChannelOpen = {\n  id: 1310730,\n  name: \"ChannelOpen\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"outOfBand\",\n    \"default\": \"\"\n  } ]\n};\n\nmodule.exports.ChannelOpenOk = 1310731;\n\nvar methodInfoChannelOpenOk = module.exports.methodInfoChannelOpenOk = {\n  id: 1310731,\n  name: \"ChannelOpenOk\",\n  args: [ {\n    type: \"longstr\",\n    name: \"channelId\",\n    \"default\": \"\"\n  } ]\n};\n\nmodule.exports.ChannelFlow = 1310740;\n\nvar methodInfoChannelFlow = module.exports.methodInfoChannelFlow = {\n  id: 1310740,\n  name: \"ChannelFlow\",\n  args: [ {\n    type: \"bit\",\n    name: \"active\"\n  } ]\n};\n\nmodule.exports.ChannelFlowOk = 1310741;\n\nvar methodInfoChannelFlowOk = module.exports.methodInfoChannelFlowOk = {\n  id: 1310741,\n  name: \"ChannelFlowOk\",\n  args: [ {\n    type: \"bit\",\n    name: \"active\"\n  } ]\n};\n\nmodule.exports.ChannelClose = 1310760;\n\nvar methodInfoChannelClose = module.exports.methodInfoChannelClose = {\n  id: 1310760,\n  name: \"ChannelClose\",\n  args: [ {\n    type: \"short\",\n    name: \"replyCode\"\n  }, {\n    type: \"shortstr\",\n    name: \"replyText\",\n    \"default\": \"\"\n  }, {\n    type: \"short\",\n    name: \"classId\"\n  }, {\n    type: \"short\",\n    name: \"methodId\"\n  } ]\n};\n\nmodule.exports.ChannelCloseOk = 1310761;\n\nvar methodInfoChannelCloseOk = module.exports.methodInfoChannelCloseOk = {\n  id: 1310761,\n  name: \"ChannelCloseOk\",\n  args: []\n};\n\nmodule.exports.AccessRequest = 1966090;\n\nvar methodInfoAccessRequest = module.exports.methodInfoAccessRequest = {\n  id: 1966090,\n  name: \"AccessRequest\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"realm\",\n    \"default\": \"/data\"\n  }, {\n    type: \"bit\",\n    name: \"exclusive\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"passive\",\n    \"default\": !0\n  }, {\n    type: \"bit\",\n    name: \"active\",\n    \"default\": !0\n  }, {\n    type: \"bit\",\n    name: \"write\",\n    \"default\": !0\n  }, {\n    type: \"bit\",\n    name: \"read\",\n    \"default\": !0\n  } ]\n};\n\nmodule.exports.AccessRequestOk = 1966091;\n\nvar methodInfoAccessRequestOk = module.exports.methodInfoAccessRequestOk = {\n  id: 1966091,\n  name: \"AccessRequestOk\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 1\n  } ]\n};\n\nmodule.exports.ExchangeDeclare = 2621450;\n\nvar methodInfoExchangeDeclare = module.exports.methodInfoExchangeDeclare = {\n  id: 2621450,\n  name: \"ExchangeDeclare\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"type\",\n    \"default\": \"direct\"\n  }, {\n    type: \"bit\",\n    name: \"passive\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"durable\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"autoDelete\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"internal\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    \"default\": !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    \"default\": {}\n  } ]\n};\n\nmodule.exports.ExchangeDeclareOk = 2621451;\n\nvar methodInfoExchangeDeclareOk = module.exports.methodInfoExchangeDeclareOk = {\n  id: 2621451,\n  name: \"ExchangeDeclareOk\",\n  args: []\n};\n\nmodule.exports.ExchangeDelete = 2621460;\n\nvar methodInfoExchangeDelete = module.exports.methodInfoExchangeDelete = {\n  id: 2621460,\n  name: \"ExchangeDelete\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"bit\",\n    name: \"ifUnused\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.ExchangeDeleteOk = 2621461;\n\nvar methodInfoExchangeDeleteOk = module.exports.methodInfoExchangeDeleteOk = {\n  id: 2621461,\n  name: \"ExchangeDeleteOk\",\n  args: []\n};\n\nmodule.exports.ExchangeBind = 2621470;\n\nvar methodInfoExchangeBind = module.exports.methodInfoExchangeBind = {\n  id: 2621470,\n  name: \"ExchangeBind\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"destination\"\n  }, {\n    type: \"shortstr\",\n    name: \"source\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\",\n    \"default\": \"\"\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    \"default\": !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    \"default\": {}\n  } ]\n};\n\nmodule.exports.ExchangeBindOk = 2621471;\n\nvar methodInfoExchangeBindOk = module.exports.methodInfoExchangeBindOk = {\n  id: 2621471,\n  name: \"ExchangeBindOk\",\n  args: []\n};\n\nmodule.exports.ExchangeUnbind = 2621480;\n\nvar methodInfoExchangeUnbind = module.exports.methodInfoExchangeUnbind = {\n  id: 2621480,\n  name: \"ExchangeUnbind\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"destination\"\n  }, {\n    type: \"shortstr\",\n    name: \"source\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\",\n    \"default\": \"\"\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    \"default\": !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    \"default\": {}\n  } ]\n};\n\nmodule.exports.ExchangeUnbindOk = 2621491;\n\nvar methodInfoExchangeUnbindOk = module.exports.methodInfoExchangeUnbindOk = {\n  id: 2621491,\n  name: \"ExchangeUnbindOk\",\n  args: []\n};\n\nmodule.exports.QueueDeclare = 3276810;\n\nvar methodInfoQueueDeclare = module.exports.methodInfoQueueDeclare = {\n  id: 3276810,\n  name: \"QueueDeclare\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    \"default\": \"\"\n  }, {\n    type: \"bit\",\n    name: \"passive\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"durable\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"exclusive\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"autoDelete\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    \"default\": !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    \"default\": {}\n  } ]\n};\n\nmodule.exports.QueueDeclareOk = 3276811;\n\nvar methodInfoQueueDeclareOk = module.exports.methodInfoQueueDeclareOk = {\n  id: 3276811,\n  name: \"QueueDeclareOk\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"queue\"\n  }, {\n    type: \"long\",\n    name: \"messageCount\"\n  }, {\n    type: \"long\",\n    name: \"consumerCount\"\n  } ]\n};\n\nmodule.exports.QueueBind = 3276820;\n\nvar methodInfoQueueBind = module.exports.methodInfoQueueBind = {\n  id: 3276820,\n  name: \"QueueBind\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    \"default\": \"\"\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\",\n    \"default\": \"\"\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    \"default\": !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    \"default\": {}\n  } ]\n};\n\nmodule.exports.QueueBindOk = 3276821;\n\nvar methodInfoQueueBindOk = module.exports.methodInfoQueueBindOk = {\n  id: 3276821,\n  name: \"QueueBindOk\",\n  args: []\n};\n\nmodule.exports.QueuePurge = 3276830;\n\nvar methodInfoQueuePurge = module.exports.methodInfoQueuePurge = {\n  id: 3276830,\n  name: \"QueuePurge\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    \"default\": \"\"\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.QueuePurgeOk = 3276831;\n\nvar methodInfoQueuePurgeOk = module.exports.methodInfoQueuePurgeOk = {\n  id: 3276831,\n  name: \"QueuePurgeOk\",\n  args: [ {\n    type: \"long\",\n    name: \"messageCount\"\n  } ]\n};\n\nmodule.exports.QueueDelete = 3276840;\n\nvar methodInfoQueueDelete = module.exports.methodInfoQueueDelete = {\n  id: 3276840,\n  name: \"QueueDelete\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    \"default\": \"\"\n  }, {\n    type: \"bit\",\n    name: \"ifUnused\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"ifEmpty\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.QueueDeleteOk = 3276841;\n\nvar methodInfoQueueDeleteOk = module.exports.methodInfoQueueDeleteOk = {\n  id: 3276841,\n  name: \"QueueDeleteOk\",\n  args: [ {\n    type: \"long\",\n    name: \"messageCount\"\n  } ]\n};\n\nmodule.exports.QueueUnbind = 3276850;\n\nvar methodInfoQueueUnbind = module.exports.methodInfoQueueUnbind = {\n  id: 3276850,\n  name: \"QueueUnbind\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    \"default\": \"\"\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\",\n    \"default\": \"\"\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    \"default\": {}\n  } ]\n};\n\nmodule.exports.QueueUnbindOk = 3276851;\n\nvar methodInfoQueueUnbindOk = module.exports.methodInfoQueueUnbindOk = {\n  id: 3276851,\n  name: \"QueueUnbindOk\",\n  args: []\n};\n\nmodule.exports.BasicQos = 3932170;\n\nvar methodInfoBasicQos = module.exports.methodInfoBasicQos = {\n  id: 3932170,\n  name: \"BasicQos\",\n  args: [ {\n    type: \"long\",\n    name: \"prefetchSize\",\n    \"default\": 0\n  }, {\n    type: \"short\",\n    name: \"prefetchCount\",\n    \"default\": 0\n  }, {\n    type: \"bit\",\n    name: \"global\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.BasicQosOk = 3932171;\n\nvar methodInfoBasicQosOk = module.exports.methodInfoBasicQosOk = {\n  id: 3932171,\n  name: \"BasicQosOk\",\n  args: []\n};\n\nmodule.exports.BasicConsume = 3932180;\n\nvar methodInfoBasicConsume = module.exports.methodInfoBasicConsume = {\n  id: 3932180,\n  name: \"BasicConsume\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    \"default\": \"\"\n  }, {\n    type: \"shortstr\",\n    name: \"consumerTag\",\n    \"default\": \"\"\n  }, {\n    type: \"bit\",\n    name: \"noLocal\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"noAck\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"exclusive\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    \"default\": !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    \"default\": {}\n  } ]\n};\n\nmodule.exports.BasicConsumeOk = 3932181;\n\nvar methodInfoBasicConsumeOk = module.exports.methodInfoBasicConsumeOk = {\n  id: 3932181,\n  name: \"BasicConsumeOk\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"consumerTag\"\n  } ]\n};\n\nmodule.exports.BasicCancel = 3932190;\n\nvar methodInfoBasicCancel = module.exports.methodInfoBasicCancel = {\n  id: 3932190,\n  name: \"BasicCancel\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"consumerTag\"\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.BasicCancelOk = 3932191;\n\nvar methodInfoBasicCancelOk = module.exports.methodInfoBasicCancelOk = {\n  id: 3932191,\n  name: \"BasicCancelOk\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"consumerTag\"\n  } ]\n};\n\nmodule.exports.BasicPublish = 3932200;\n\nvar methodInfoBasicPublish = module.exports.methodInfoBasicPublish = {\n  id: 3932200,\n  name: \"BasicPublish\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\",\n    \"default\": \"\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\",\n    \"default\": \"\"\n  }, {\n    type: \"bit\",\n    name: \"mandatory\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"immediate\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.BasicReturn = 3932210;\n\nvar methodInfoBasicReturn = module.exports.methodInfoBasicReturn = {\n  id: 3932210,\n  name: \"BasicReturn\",\n  args: [ {\n    type: \"short\",\n    name: \"replyCode\"\n  }, {\n    type: \"shortstr\",\n    name: \"replyText\",\n    \"default\": \"\"\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\"\n  } ]\n};\n\nmodule.exports.BasicDeliver = 3932220;\n\nvar methodInfoBasicDeliver = module.exports.methodInfoBasicDeliver = {\n  id: 3932220,\n  name: \"BasicDeliver\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"consumerTag\"\n  }, {\n    type: \"longlong\",\n    name: \"deliveryTag\"\n  }, {\n    type: \"bit\",\n    name: \"redelivered\",\n    \"default\": !1\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\"\n  } ]\n};\n\nmodule.exports.BasicGet = 3932230;\n\nvar methodInfoBasicGet = module.exports.methodInfoBasicGet = {\n  id: 3932230,\n  name: \"BasicGet\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    \"default\": 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    \"default\": \"\"\n  }, {\n    type: \"bit\",\n    name: \"noAck\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.BasicGetOk = 3932231;\n\nvar methodInfoBasicGetOk = module.exports.methodInfoBasicGetOk = {\n  id: 3932231,\n  name: \"BasicGetOk\",\n  args: [ {\n    type: \"longlong\",\n    name: \"deliveryTag\"\n  }, {\n    type: \"bit\",\n    name: \"redelivered\",\n    \"default\": !1\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\"\n  }, {\n    type: \"long\",\n    name: \"messageCount\"\n  } ]\n};\n\nmodule.exports.BasicGetEmpty = 3932232;\n\nvar methodInfoBasicGetEmpty = module.exports.methodInfoBasicGetEmpty = {\n  id: 3932232,\n  name: \"BasicGetEmpty\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"clusterId\",\n    \"default\": \"\"\n  } ]\n};\n\nmodule.exports.BasicAck = 3932240;\n\nvar methodInfoBasicAck = module.exports.methodInfoBasicAck = {\n  id: 3932240,\n  name: \"BasicAck\",\n  args: [ {\n    type: \"longlong\",\n    name: \"deliveryTag\",\n    \"default\": 0\n  }, {\n    type: \"bit\",\n    name: \"multiple\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.BasicReject = 3932250;\n\nvar methodInfoBasicReject = module.exports.methodInfoBasicReject = {\n  id: 3932250,\n  name: \"BasicReject\",\n  args: [ {\n    type: \"longlong\",\n    name: \"deliveryTag\"\n  }, {\n    type: \"bit\",\n    name: \"requeue\",\n    \"default\": !0\n  } ]\n};\n\nmodule.exports.BasicRecoverAsync = 3932260;\n\nvar methodInfoBasicRecoverAsync = module.exports.methodInfoBasicRecoverAsync = {\n  id: 3932260,\n  name: \"BasicRecoverAsync\",\n  args: [ {\n    type: \"bit\",\n    name: \"requeue\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.BasicRecover = 3932270;\n\nvar methodInfoBasicRecover = module.exports.methodInfoBasicRecover = {\n  id: 3932270,\n  name: \"BasicRecover\",\n  args: [ {\n    type: \"bit\",\n    name: \"requeue\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.BasicRecoverOk = 3932271;\n\nvar methodInfoBasicRecoverOk = module.exports.methodInfoBasicRecoverOk = {\n  id: 3932271,\n  name: \"BasicRecoverOk\",\n  args: []\n};\n\nmodule.exports.BasicNack = 3932280;\n\nvar methodInfoBasicNack = module.exports.methodInfoBasicNack = {\n  id: 3932280,\n  name: \"BasicNack\",\n  args: [ {\n    type: \"longlong\",\n    name: \"deliveryTag\",\n    \"default\": 0\n  }, {\n    type: \"bit\",\n    name: \"multiple\",\n    \"default\": !1\n  }, {\n    type: \"bit\",\n    name: \"requeue\",\n    \"default\": !0\n  } ]\n};\n\nmodule.exports.TxSelect = 5898250;\n\nvar methodInfoTxSelect = module.exports.methodInfoTxSelect = {\n  id: 5898250,\n  name: \"TxSelect\",\n  args: []\n};\n\nmodule.exports.TxSelectOk = 5898251;\n\nvar methodInfoTxSelectOk = module.exports.methodInfoTxSelectOk = {\n  id: 5898251,\n  name: \"TxSelectOk\",\n  args: []\n};\n\nmodule.exports.TxCommit = 5898260;\n\nvar methodInfoTxCommit = module.exports.methodInfoTxCommit = {\n  id: 5898260,\n  name: \"TxCommit\",\n  args: []\n};\n\nmodule.exports.TxCommitOk = 5898261;\n\nvar methodInfoTxCommitOk = module.exports.methodInfoTxCommitOk = {\n  id: 5898261,\n  name: \"TxCommitOk\",\n  args: []\n};\n\nmodule.exports.TxRollback = 5898270;\n\nvar methodInfoTxRollback = module.exports.methodInfoTxRollback = {\n  id: 5898270,\n  name: \"TxRollback\",\n  args: []\n};\n\nmodule.exports.TxRollbackOk = 5898271;\n\nvar methodInfoTxRollbackOk = module.exports.methodInfoTxRollbackOk = {\n  id: 5898271,\n  name: \"TxRollbackOk\",\n  args: []\n};\n\nmodule.exports.ConfirmSelect = 5570570;\n\nvar methodInfoConfirmSelect = module.exports.methodInfoConfirmSelect = {\n  id: 5570570,\n  name: \"ConfirmSelect\",\n  args: [ {\n    type: \"bit\",\n    name: \"nowait\",\n    \"default\": !1\n  } ]\n};\n\nmodule.exports.ConfirmSelectOk = 5570571;\n\nvar methodInfoConfirmSelectOk = module.exports.methodInfoConfirmSelectOk = {\n  id: 5570571,\n  name: \"ConfirmSelectOk\",\n  args: []\n};\n\nmodule.exports.BasicProperties = 60;\n\nvar propertiesInfoBasicProperties = module.exports.propertiesInfoBasicProperties = {\n  id: 60,\n  name: \"BasicProperties\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"contentType\"\n  }, {\n    type: \"shortstr\",\n    name: \"contentEncoding\"\n  }, {\n    type: \"table\",\n    name: \"headers\"\n  }, {\n    type: \"octet\",\n    name: \"deliveryMode\"\n  }, {\n    type: \"octet\",\n    name: \"priority\"\n  }, {\n    type: \"shortstr\",\n    name: \"correlationId\"\n  }, {\n    type: \"shortstr\",\n    name: \"replyTo\"\n  }, {\n    type: \"shortstr\",\n    name: \"expiration\"\n  }, {\n    type: \"shortstr\",\n    name: \"messageId\"\n  }, {\n    type: \"timestamp\",\n    name: \"timestamp\"\n  }, {\n    type: \"shortstr\",\n    name: \"type\"\n  }, {\n    type: \"shortstr\",\n    name: \"userId\"\n  }, {\n    type: \"shortstr\",\n    name: \"appId\"\n  }, {\n    type: \"shortstr\",\n    name: \"clusterId\"\n  } ]\n};","module.exports = require(\"stream\");","module.exports = require(\"buffer\");","var amqp = require('amqplib/callback_api'),\r\n  url = require('url');;\r\n\r\nvar uri = \"\";\r\nif (process.env.NODE_ENV === \"production\") {\r\n  uri = 'amqps://admin:FEKLGLODRKRXXZOY@portal-ssl393-14.bmix-lon-yp-a40cde9e-7953-48f5-a71b-0a8e0489cd87.359159694.composedb.com:29533/bmix-lon-yp-a40cde9e-7953-48f5-a71b-0a8e0489cd87';\r\n} else {\r\n  uri = 'amqp://root:123qwe@192.168.161.224:5672';\r\n}\r\nconst parsedURI = url.parse(uri);\r\n\r\nvar queues = [\r\n  \"insert_record\",\r\n  \"remove_record\",\r\n  \"log\",\r\n  \"update\",\r\n  \"remove_record_by_board\",\r\n  \"remove_record_by_patient\",\r\n  \"remove_record_by_sensors\",\r\n  \"remove_record_by_board_patient\"\r\n];\r\n\r\nvar channel, connection;\r\n\r\nexports.connect = () => {\r\n  return new Promise((resolve, reject) => {\r\n    amqp.connect(uri, { servername: parsedURI.hostname }, (err, conn) => {\r\n      if (err) { reject(err); }\r\n      conn.createChannel((err, ch) => {\r\n        if (err) { conn.close(); reject(err); }\r\n\r\n        connection = conn;\r\n        channel = ch;\r\n\r\n        queues.forEach(queue => channel.assertQueue(queue, { durable: true }));\r\n        _connectToExchanges().then(\r\n          () => resolve(),\r\n          err => reject(err));\r\n      });\r\n\r\n    });\r\n  });\r\n}\r\n\r\nexports.getChannel = () => { return channel; }\r\n\r\nexports.disconnect = () => {\r\n  channel.close();\r\n  connection.close();\r\n}\r\n\r\n_connectToExchanges = () => {\r\n  return new Promise((resolve, reject) => {\r\n    require('../models/index').Vitabox.findAll().then(\r\n      list => {\r\n        let vitaboxes = list.map(x => x.id);\r\n        vitaboxes.push(\"admin\");\r\n        Promise.all(vitaboxes.map(vitabox => _subscribeToVitabox(channel, vitabox))).then(\r\n          () => resolve(channel),\r\n          error => reject(error));\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\n_subscribeToVitabox = (channel, vitabox) => {\r\n  return new Promise((resolve, reject) => {\r\n    channel.assertExchange(vitabox, 'fanout', { durable: true });\r\n    //setup a queue for receiving messages\r\n    channel.assertQueue('', { exclusive: true }, function (err, q) {\r\n      if (err) reject(err);\r\n      channel.bindQueue(q.queue, vitabox, '');\r\n      resolve();\r\n    });\r\n  });\r\n}","module.exports = require(\"path\");","var db = require('../../models/index'),\r\n  utils = require('./utils');\r\n\r\nexports.create = () => {\r\n  return new Promise((resolve, reject) => {\r\n    let password = utils.generatePassword(10);\r\n    let encrypted = utils.encrypt([password]);\r\n    if (!encrypted.error) {\r\n      db.Vitabox.create({ password: encrypted.value[0] }).then(\r\n        vitabox => resolve({ id: vitabox.id, password: password }),\r\n        error => reject({ code: 500, msg: error.message }));\r\n    }\r\n    else reject({ code: 500, msg: encrypted.error.message });\r\n  });\r\n}\r\n\r\nexports.register = (vitabox_id, attributes, sponsor, is_admin) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (attributes.address) db.Vitabox.findOne({ where: { id: vitabox_id, registered: false } }).then(\r\n      vitabox => {\r\n        if (vitabox) {\r\n          let encrypted = utils.encrypt([attributes.address, attributes.password, attributes.district, attributes.locality]);\r\n          if (!encrypted.error && (vitabox.password === encrypted.value[1] || is_admin)) {\r\n            vitabox.update({ registered: true, address: encrypted.value[0], longitude: attributes.longitude, latitude: attributes.latitude, district: encrypted.value[2], locality: encrypted.value[3] }).then(\r\n              vitabox => vitabox.addUser(sponsor.id, { through: { sponsor: true } }).then(\r\n                () => {\r\n                  vitabox.address = attributes.address;\r\n                  vitabox.district = attributes.district;\r\n                  vitabox.locality = attributes.locality;\r\n                  resolve(vitabox)\r\n                },\r\n                error => reject({ code: 500, msg: error.message })),\r\n              error => reject({ code: 500, msg: error.message }));\r\n          } else reject({ code: 500, msg: \"Vitabox id and password don´t match\" });\r\n        } else reject({ code: 500, msg: \"Vitabox already registered or doesn´t exist\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n    else reject({ code: 500, msg: \"Vitabox address must be defined\" });\r\n  });\r\n}\r\n\r\nexports.requestToken = (vitabox_id, password) => {\r\n  return new Promise((resolve, reject) => {\r\n    let encrypted = utils.encrypt([password]);\r\n    if (!encrypted.error) db.Vitabox.findOne({ where: { password: encrypted.value[0], id: vitabox_id, registered: true } }).then(\r\n      vitabox => {\r\n        if (vitabox) if (vitabox.registered) if (!vitabox.active)\r\n          vitabox.update({ active: true }).then(\r\n            vitabox => resolve(vitabox),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else resolve(vitabox);\r\n        else reject({ code: 401, msg: \"vitabox not registered\" });\r\n        else reject({ code: 401, msg: \"invalid credentials or not registered\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n    else reject({ code: 500, msg: encrypted.error.message });\r\n  });\r\n}\r\n\r\nexports.list = (current_user, own) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (current_user.admin && !own)\r\n      db.Vitabox.findAll({ attributes: { exclude: ['password'] }, where: { registered: true } }).then(\r\n        list => {\r\n          list.forEach(element => {\r\n            element.address = utils.decrypt(element.address);\r\n            element.district = utils.decrypt(element.district);\r\n            element.locality = utils.decrypt(element.locality);\r\n          });\r\n          resolve(list);\r\n        }, error => reject({ code: 500, msg: error.message }));\r\n    else current_user.getVitaboxes({ attributes: ['id', 'latitude', 'longitude', 'address', 'active'] }).then(\r\n      list => {\r\n        list.forEach(element => {\r\n          element.address = utils.decrypt(element.address);\r\n          element.dataValues.sponsor = element.UserVitabox.sponsor;\r\n          delete element.dataValues.UserVitabox;\r\n        });\r\n        resolve(list);\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.find = (vitabox_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id, { attributes: { exclude: ['password'] } }).then(\r\n      vitabox => {\r\n        if (vitabox) {\r\n          vitabox.address = utils.decrypt(vitabox.address);\r\n          vitabox.district = utils.decrypt(vitabox.district);\r\n          vitabox.locality = utils.decrypt(vitabox.locality);\r\n          resolve(vitabox);\r\n        }\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.update = (current_user, vitabox_id, attributes) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        let encrypted = utils.encrypt([attributes.address, attributes.district, attributes.locality]);\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.update({ latitude: attributes.latitude, longitude: attributes.longitude, address: encrypted.value[0], settings: attributes.settings, district: encrypted.value[1], locality: encrypted.value[2] }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => vitabox.update({ latitude: attributes.latitude, longitude: attributes.longitude, address: encrypted.value[0], district: encrypted.value[1], locality: encrypted.value[2] }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message })),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found \" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.delete = (current_user, vitabox_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.destroy().then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => vitabox.destroy().then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message })),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.addUser = (current_user, vitabox_id, user_id, is_sponsor) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.addUser(user_id, { through: { sponsor: is_sponsor } }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => vitabox.addUser(user_id, { through: { sponsor: is_sponsor } }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message })),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.getUsers = (vitabox) => {\r\n  return new Promise((resolve, reject) => {\r\n    vitabox.getUsers({ attributes: ['id', 'email', 'name'] }).then(\r\n      users => {\r\n        users.forEach(user => {\r\n          user.email = utils.decrypt(user.email);\r\n          user.name = utils.decrypt(user.name);\r\n          user.dataValues.since = user.dataValues.UserVitabox.dataValues.created_at;\r\n          user.dataValues.sponsor = user.dataValues.UserVitabox.dataValues.sponsor;\r\n          delete user.dataValues.UserVitabox;\r\n        });\r\n        resolve(users);\r\n      },\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.removeUser = (current_user, vitabox_id, user_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.removeUser(user_id).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => {\r\n            vitabox.removeUser(user_id).then(\r\n              () => resolve(),\r\n              error => reject({ code: 500, msg: error.message }));\r\n          }, error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message })\r\n    );\r\n  });\r\n}\r\n\r\nexports.getPatients = (vitabox, where_condiction) => {\r\n  return new Promise((resolve, reject) => {\r\n    vitabox.getPatients({\r\n      where: where_condiction,\r\n      attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since'], 'active', 'weight', 'height', 'cc', 'nif', 'photo'],\r\n      include: [\r\n        {\r\n          model: db.Board, attributes: ['id', 'mac_addr'],\r\n          include: [\r\n            { model: db.Boardmodel, attributes: ['id', 'type', 'name', 'tag'] },\r\n            {\r\n              model: db.Sensor, attributes: ['id', 'last_values', 'last_commit'],\r\n              include: [{ model: db.Sensormodel, attributes: { exclude: ['created_at', 'updated_at'] } }]\r\n            }]\r\n        },\r\n        { model: db.Profile },\r\n        { model: db.User, as: 'Doctors', attributes: ['id', 'name', \"email\"] }\r\n      ]\r\n    }).then(\r\n      patients => {\r\n        patients.forEach(patient => {\r\n          patient.name = utils.decrypt(patient.name);\r\n          patient.cc = utils.decrypt(patient.cc);\r\n          patient.nif = utils.decrypt(patient.nif);\r\n          patient.Boards.forEach(board => {\r\n            board.dataValues.since = board.PatientBoard.created_at;\r\n            board.dataValues.frequency = board.PatientBoard.frequency;\r\n            board.dataValues.last_commit = board.PatientBoard.last_commit;\r\n            delete board.dataValues.PatientBoard;\r\n          });\r\n          patient.Doctors.forEach(user => {\r\n            user.name = utils.decrypt(user.name);\r\n            user.email = utils.decrypt(user.email);\r\n            user.dataValues.since = user.DoctorPatient.created_at;\r\n            user.dataValues.accepted = user.DoctorPatient.accepted;\r\n            delete user.dataValues.DoctorPatient;\r\n          });\r\n        });\r\n        resolve(patients);\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.addBoard = (current_user, vitabox_id, board_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) if (current_user.admin)\r\n          vitabox.addBoard(board_id).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else _isSponsor(vitabox, current_user).then(\r\n          () => {\r\n            vitabox.addBoard(board_id).then(\r\n              () => resolve(),\r\n              error => reject({ code: 500, msg: error.message }));\r\n          }, error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.getBoards = (vitabox, where_condiction) => {\r\n  return new Promise((resolve, reject) => {\r\n    vitabox.getBoards({\r\n      where: where_condiction, attributes: ['id', 'description', 'mac_addr', 'node_id', 'updated_at', 'active'],\r\n      include: [\r\n        { model: db.Boardmodel, attributes: ['id', 'type', 'name', 'tag'] },\r\n        {\r\n          model: db.Sensor, attributes: ['id', 'last_values', 'last_commit'], include:\r\n            [{ model: db.Sensormodel, attributes: { exclude: ['created_at', 'updated_at'] } }]\r\n        }]\r\n    }).then(\r\n      boards => resolve(boards),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.verifySponsor = (current_user, vitabox_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Vitabox.findById(vitabox_id).then(\r\n      vitabox => {\r\n        if (vitabox) _isSponsor(vitabox, current_user).then(\r\n          () => resolve(vitabox),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Vitabox not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.verifyUser = (current_user, vitabox) => {\r\n  return new Promise((resolve, reject) => {\r\n    _isUser(vitabox, current_user).then(\r\n      () => resolve(),\r\n      error => reject(error));\r\n  });\r\n}\r\n\r\n// ________________________________________________________________________\r\n// Private\r\n// ________________________________________________________________________\r\n_isSponsor = (vitabox, user) => {\r\n  return new Promise((resolve, reject) => {\r\n    vitabox.getUsers({ where: { id: user.id } }).then(\r\n      users => {\r\n        if (users.length > 0 && users[0].UserVitabox.sponsor) resolve();\r\n        else reject({ code: 401, msg: \"Unauthorized\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\n_isUser = (vitabox, user) => {\r\n  return new Promise((resolve, reject) => {\r\n    vitabox.hasUser(user).then(\r\n      success => {\r\n        if (success) resolve();\r\n        else reject({ code: 401, msg: \"Unauthorized\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.create({ type: attributes.type, name: attributes.name, tag: attributes.tag }).then(\r\n            model => resolve(model),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.list = () => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findAll({ attributes: ['id', 'type', 'name', 'tag'] }).then(\r\n            models => resolve(models),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.update = (board_model_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.update({ type: attributes.type, name: attributes.name, tag: attributes.tag }).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.remove = (board_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.destroy().then(\r\n                    () => resolve(),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.setSensor = (board_model_id, sensor_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (sensor_model_id)\r\n            db.Boardmodel.findOne({ where: { id: board_model_id }, include: [{ model: db.Board }, { model: db.Sensormodel }] }).then(\r\n                boardmodel => {\r\n                    if (boardmodel) if (!!boardmodel.Sensormodels.filter(x => x.id === sensor_model_id))\r\n                        boardmodel.addSensormodel(sensor_model_id).then(\r\n                            () => Promise.all(boardmodel.Boards.map(board => db.Sensor.create({ board_id: board.id, sensormodel_id: sensor_model_id }))).then(\r\n                                () => resolve(),\r\n                                error => reject({ code: 500, msg: \"cannot create the sensors\" })),\r\n                            error => reject({ code: 500, msg: error.message }));\r\n                    else reject({ code: 500, msg: \"sensor model is already associated\" });\r\n                    else reject({ code: 500, msg: \"board model not found\" });\r\n                }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"invalid sensor model id\" });\r\n    });\r\n}\r\n\r\nexports.getSensors = (board_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Boardmodel.findById(board_model_id).then(\r\n            model => {\r\n                if (model) model.getSensormodels({ attributes: { exclude: ['created_at', 'updated_at'] } }).then(\r\n                    models => {\r\n                        models.forEach(element => delete element.dataValues.BoardmodelSensor);\r\n                        resolve(models)\r\n                    },\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.removeSensor = (board_model_id, sensor_model_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (sensor_model_id) db.Boardmodel.findOne({ where: { id: board_model_id }, include: [{ model: db.Board }] }).then(\r\n            boardmodel => {\r\n                if (boardmodel) model.removeSensormodel(sensor_model_id).then(\r\n                    () => Promise.all(boardmodel.Boards.map(board => {\r\n                        return new Promise((resolve, reject) => db.Sensor.findOne({ where: { board_id: board.id, sensormodel_id: sensor_model_id } }).then(\r\n                            sensor => sensor.destroy().then(\r\n                                () => resolve(sensor.id),\r\n                                error => reject(error)\r\n                            ), error => reject(error)))\r\n                    })).then(\r\n                        ids => resolve(ids),\r\n                        error => reject({ code: 500, msg: \"cannot remove the sensors from boards\" })),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"board model not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"invalid sensor id\" });\r\n    });\r\n}\r\n","//\n//\n//\n\n// Channel machinery.\n\n'use strict';\n\nvar defs = require('./defs');\nvar closeMsg = require('./format').closeMessage;\nvar inspect = require('./format').inspect;\nvar methodName = require('./format').methodName;\nvar assert = require('assert');\nvar inherits = require('util').inherits;\nvar EventEmitter = require('events').EventEmitter;\nvar fmt = require('util').format;\nvar IllegalOperationError = require('./error').IllegalOperationError;\nvar stackCapture = require('./error').stackCapture;\nvar Buffer = require('safe-buffer').Buffer\nfunction Channel(connection) {\n  EventEmitter.call( this );\n  this.connection = connection;\n  // for the presently outstanding RPC\n  this.reply = null;\n  // for the RPCs awaiting action\n  this.pending = [];\n  // for unconfirmed messages\n  this.lwm = 1; // the least, unconfirmed deliveryTag\n  this.unconfirmed = []; // rolling window of delivery callbacks\n  this.on('ack', this.handleConfirm.bind(this, function(cb) {\n    if (cb) cb(null);\n  }));\n  this.on('nack', this.handleConfirm.bind(this, function(cb) {\n    if (cb) cb(new Error('message nacked'));\n  }));\n  // message frame state machine\n  this.handleMessage = acceptDeliveryOrReturn;\n}\ninherits(Channel, EventEmitter);\n\nmodule.exports.Channel = Channel;\nmodule.exports.acceptMessage = acceptMessage;\n\nvar C = Channel.prototype;\n\nC.allocate = function() {\n  this.ch = this.connection.freshChannel(this);\n  return this;\n}\n\n// Incoming frames are either notifications of e.g., message delivery,\n// or replies to something we've sent. In general I deal with the\n// former by emitting an event, and with the latter by keeping a track\n// of what's expecting a reply.\n//\n// The AMQP specification implies that RPCs can't be pipelined; that\n// is, you can have only one outstanding RPC on a channel at a\n// time. Certainly that's what RabbitMQ and its clients assume. For\n// this reason, I buffer RPCs if the channel is already waiting for a\n// reply.\n\n// Just send the damn frame.\nC.sendImmediately = function(method, fields) {\n  return this.connection.sendMethod(this.ch, method, fields);\n};\n\n// Invariant: !this.reply -> pending.length == 0. That is, whenever we\n// clear a reply, we must send another RPC (and thereby fill\n// this.reply) if there is one waiting. The invariant relevant here\n// and in `accept`.\nC.sendOrEnqueue = function(method, fields, reply) {\n  if (!this.reply) { // if no reply waiting, we can go\n    assert(this.pending.length === 0);\n    this.reply = reply;\n    this.sendImmediately(method, fields);\n  }\n  else {\n    this.pending.push({method: method,\n                       fields: fields,\n                       reply: reply});\n  }\n};\n\nC.sendMessage = function(fields, properties, content) {\n  return this.connection.sendMessage(\n    this.ch,\n    defs.BasicPublish, fields,\n    defs.BasicProperties, properties,\n    content);\n};\n\n// Internal, synchronously resolved RPC; the return value is resolved\n// with the whole frame.\nC._rpc = function(method, fields, expect, cb) {\n  var self = this;\n\n  function reply(err, f) {\n    if (err === null) {\n      if (f.id === expect) {\n        return cb(null, f);\n      }\n      else {\n        // We have detected a problem, so it's up to us to close the\n        // channel\n        var expectedName = methodName(expect);\n        var e = new Error(fmt(\"Expected %s; got %s\",\n                              expectedName, inspect(f, false)));\n        self.closeWithError(fmt('Expected %s; got %s',\n                                expectedName, methodName(f.id)),\n                            defs.constants.UNEXPECTED_FRAME, e);\n        return cb(e);\n      }\n    }\n    // An error will be given if, for example, this is waiting to be\n    // sent and the connection closes\n    else if (err instanceof Error) return cb(err);\n    // A close frame will be given if this is the RPC awaiting reply\n    // and the channel is closed by the server\n    else {\n      // otherwise, it's a close frame\n      var closeReason =\n        (err.fields.classId << 16) + err.fields.methodId;\n      var e = (method === closeReason)\n        ? fmt(\"Operation failed: %s; %s\",\n              methodName(method), closeMsg(err))\n        : fmt(\"Channel closed by server: %s\", closeMsg(err));\n      return cb(new Error(e));\n    }\n  }\n\n  this.sendOrEnqueue(method, fields, reply);\n};\n\n// Shutdown protocol. There's three scenarios:\n//\n// 1. The application decides to shut the channel\n// 2. The server decides to shut the channel, possibly because of\n// something the application did\n// 3. The connection is closing, so there won't be any more frames\n// going back and forth.\n//\n// 1 and 2 involve an exchange of method frames (Close and CloseOk),\n// while 3 doesn't; the connection simply says \"shutdown\" to the\n// channel, which then acts as if it's closing, without going through\n// the exchange.\n\nfunction invalidOp(msg, stack) {\n  return function() {\n    throw new IllegalOperationError(msg, stack);\n  };\n}\n\nfunction invalidateSend(ch, msg, stack) {\n  ch.sendImmediately = ch.sendOrEnqueue = ch.sendMessage =\n    invalidOp(msg, stack);\n}\n\n// Move to entirely closed state.\nC.toClosed = function(capturedStack) {\n  this._rejectPending();\n  invalidateSend(this, 'Channel closed', capturedStack);\n  this.accept = invalidOp('Channel closed', capturedStack);\n  this.connection.releaseChannel(this.ch);\n  this.emit('close');\n};\n\n// Stop being able to send and receive methods and content. Used when\n// we close the channel. Invokes the continuation once the server has\n// acknowledged the close, but before the channel is moved to the\n// closed state.\nC.toClosing = function(capturedStack, k) {\n  var send = this.sendImmediately.bind(this);\n  invalidateSend(this, 'Channel closing', capturedStack);\n\n  this.accept = function(f) {\n    if (f.id === defs.ChannelCloseOk) {\n      if (k) k();\n      var s = stackCapture('ChannelCloseOk frame received');\n      this.toClosed(s);\n    }\n    else if (f.id === defs.ChannelClose) {\n      send(defs.ChannelCloseOk, {});\n    }\n    // else ignore frame\n  };\n};\n\nC._rejectPending = function() {\n  function rej(r) { \n    r(new Error(\"Channel ended, no reply will be forthcoming\"));\n  }\n  if (this.reply !== null) rej(this.reply);\n  this.reply = null;\n\n  var discard;\n  while (discard = this.pending.shift()) rej(discard.reply);\n  this.pending = null; // so pushes will break\n};\n\nC.closeBecause = function(reason, code, k) {\n  this.sendImmediately(defs.ChannelClose, {\n    replyText: reason,\n    replyCode: code,\n    methodId:0, classId: 0\n  });\n  var s = stackCapture('closeBecause called: ' + reason);\n  this.toClosing(s, k);\n};\n\n// If we close because there's been an error, we need to distinguish\n// between what we tell the server (`reason`) and what we report as\n// the cause in the client (`error`).\nC.closeWithError = function(reason, code, error) {\n  var self = this;\n  this.closeBecause(reason, code, function() {\n    error.code = code;\n    self.emit('error', error);\n  });\n};\n\n// A trampolining state machine for message frames on a channel. A\n// message arrives in at least two frames: first, a method announcing\n// the message (either a BasicDeliver or BasicGetOk); then, a message\n// header with the message properties; then, zero or more content\n// frames.\n\n// Keep the try/catch localised, in an attempt to avoid disabling\n// optimisation\nC.acceptMessageFrame = function(f) {\n  try {\n    this.handleMessage = this.handleMessage(f);\n  }\n  catch (msg) {\n    if (typeof msg === 'string') {\n      this.closeWithError(msg, defs.constants.UNEXPECTED_FRAME,\n                          new Error(msg));\n    }\n    else if (msg instanceof Error) {\n      this.closeWithError('Error while processing message',\n                          defs.constants.INTERNAL_ERROR, msg);\n    }\n    else {\n      this.closeWithError('Internal error while processing message',\n                          defs.constants.INTERNAL_ERROR,\n                          new Error(msg.toString()));\n    }\n  }\n};\n\n// Kick off a message delivery given a BasicDeliver or BasicReturn\n// frame (BasicGet uses the RPC mechanism)\nfunction acceptDeliveryOrReturn(f) {\n  var event;\n  if (f.id === defs.BasicDeliver) event = 'delivery';\n  else if (f.id === defs.BasicReturn) event = 'return';\n  else throw fmt(\"Expected BasicDeliver or BasicReturn; got %s\",\n                 inspect(f));\n\n  var self = this;\n  var fields = f.fields;\n  return acceptMessage(function(message) {\n    message.fields = fields;\n    self.emit(event, message);\n  });\n}\n\n// Move to the state of waiting for message frames (headers, then\n// one or more content frames)\nfunction acceptMessage(continuation) {\n  var totalSize = 0, remaining = 0;\n  var buffers = null;\n\n  var message = {\n    fields: null,\n    properties: null,\n    content: null\n  };\n\n  return headers;\n\n  // expect a headers frame\n  function headers(f) {\n    if (f.id === defs.BasicProperties) {\n      message.properties = f.fields;\n      totalSize = remaining = f.size;\n      \n      // for zero-length messages, content frames aren't required.\n      if (totalSize === 0) {\n        message.content = Buffer.alloc(0);\n        continuation(message);\n        return acceptDeliveryOrReturn;\n      }\n      else {\n        return content;        \n      }\n    }\n    else {\n      throw \"Expected headers frame after delivery\";\n    }\n  }\n\n  // expect a content frame\n  // %%% TODO cancelled messages (sent as zero-length content frame)\n  function content(f) {\n    if (f.content) {\n      var size = f.content.length;\n      remaining -= size;\n      if (remaining === 0) {\n        if (buffers !== null) {\n          buffers.push(f.content);\n          message.content = Buffer.concat(buffers);\n        }\n        else {\n          message.content = f.content;\n        }\n        continuation(message);\n        return acceptDeliveryOrReturn;\n      }\n      else if (remaining < 0) {\n        throw fmt(\"Too much content sent! Expected %d bytes\",\n                  totalSize);\n      }\n      else {\n        if (buffers !== null)\n          buffers.push(f.content);\n        else\n          buffers = [f.content];\n        return content;\n      }\n    }\n    else throw \"Expected content frame after headers\"\n  }\n}\n\nC.handleConfirm = function(handle, f) {\n  var tag = f.deliveryTag;\n  var multi = f.multiple;\n\n  if (multi) {\n    var confirmed = this.unconfirmed.splice(0, tag - this.lwm + 1);\n    this.lwm = tag + 1;\n    confirmed.forEach(handle);\n  }\n  else {\n    var c;\n    if (tag === this.lwm) {\n      c = this.unconfirmed.shift();\n      this.lwm++;\n      // Advance the LWM and the window to the next non-gap, or\n      // possibly to the end\n      while (this.unconfirmed[0] === null) {\n        this.unconfirmed.shift();\n        this.lwm++;\n      }\n    }\n    else {\n      c = this.unconfirmed[tag - this.lwm];\n      this.unconfirmed[tag - this.lwm] = null;\n    }\n    // Technically, in the single-deliveryTag case, I should report a\n    // protocol breach if it's already been confirmed.\n    handle(c);\n  }\n};\n\nC.pushConfirmCallback = function(cb) {\n  // `null` is used specifically for marking already confirmed slots,\n  // so I coerce `undefined` and `null` to false; functions are never\n  // falsey.\n  this.unconfirmed.push(cb || false);\n};\n\n// Interface for connection to use\n\nC.accept = function(f) {\n\n  switch (f.id) {\n\n    // Message frames\n  case undefined: // content frame!\n  case defs.BasicDeliver:\n  case defs.BasicReturn:\n  case defs.BasicProperties:\n    return this.acceptMessageFrame(f);\n\n    // confirmations, need to do confirm.select first\n  case defs.BasicAck:\n    return this.emit('ack', f.fields);\n  case defs.BasicNack:\n    return this.emit('nack', f.fields);\n  case defs.BasicCancel:\n    // The broker can send this if e.g., the queue is deleted.\n    return this.emit('cancel', f.fields);\n\n  case defs.ChannelClose:\n    // Any remote closure is an error to us. Reject the pending reply\n    // with the close frame, so it can see whether it was that\n    // operation that caused it to close.\n    if (this.reply) {\n      var reply = this.reply; this.reply = null;\n      reply(f);\n    }\n    var emsg = \"Channel closed by server: \" + closeMsg(f);\n    this.sendImmediately(defs.ChannelCloseOk, {});\n\n    var error = new Error(emsg);\n    error.code = f.fields.replyCode;\n    this.emit('error', error);\n\n    var s = stackCapture(emsg);\n    this.toClosed(s);\n    return;\n\n  case defs.BasicFlow:\n    // RabbitMQ doesn't send this, it just blocks the TCP socket\n    return this.closeWithError(\"Flow not implemented\",\n                               defs.constants.NOT_IMPLEMENTED,\n                               new Error('Flow not implemented'));\n\n  default: // assume all other things are replies\n    // Resolving the reply may lead to another RPC; to make sure we\n    // don't hold that up, clear this.reply\n    var reply = this.reply; this.reply = null;\n    // however, maybe there's an RPC waiting to go? If so, that'll\n    // fill this.reply again, restoring the invariant. This does rely\n    // on any response being recv'ed after resolving the promise,\n    // below; hence, I use synchronous defer.\n    if (this.pending.length > 0) {\n      var send = this.pending.shift();\n      this.reply = send.reply;\n      this.sendImmediately(send.method, send.fields);\n    }\n    return reply(null, f);\n  }\n};\n\nC.onBufferDrain = function() {\n  this.emit('drain');\n};\n\n\n// This adds just a bit more stuff useful for the APIs, but not\n// low-level machinery.\nfunction BaseChannel(connection) {\n  Channel.call(this, connection);\n  this.consumers = {};\n}\ninherits(BaseChannel, Channel);\n\nmodule.exports.BaseChannel = BaseChannel;\n\n// Not sure I like the ff, it's going to be changing hidden classes\n// all over the place. On the other hand, whaddya do.\nBaseChannel.prototype.registerConsumer = function(tag, callback) {\n  this.consumers[tag] = callback;\n};\n\nBaseChannel.prototype.unregisterConsumer = function(tag) {\n  delete this.consumers[tag];\n};\n\nBaseChannel.prototype.dispatchMessage = function(fields, message) {\n  var consumerTag = fields.consumerTag;\n  var consumer = this.consumers[consumerTag];\n  if (consumer) {\n    return consumer(message);\n  }\n  else {\n    // %%% Surely a race here\n    throw new Error(\"Unknown consumer: \" + consumerTag);\n  }\n};\n\nBaseChannel.prototype.handleDelivery = function(message) {\n  return this.dispatchMessage(message.fields, message);\n};\n\nBaseChannel.prototype.handleCancel = function(fields) {\n  return this.dispatchMessage(fields, null);\n};\n","//\n//\n//\n\n// Different kind of credentials that can be supplied when opening a\n// connection, corresponding to SASL mechanisms There's only two\n// useful mechanisms that RabbitMQ implements:\n//  * PLAIN (send username and password in the plain)\n//  * EXTERNAL (assume the server will figure out who you are from\n//    context, i.e., your SSL certificate)\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports.plain = function(user, passwd) {\n  return {\n    mechanism: 'PLAIN',\n    response: function() {\n      return Buffer.from(['', user, passwd].join(String.fromCharCode(0)))\n    },\n    username: user,\n    password: passwd\n  }\n}\n\nmodule.exports.external = function() {\n  return {\n    mechanism: 'EXTERNAL',\n    response: function() { return Buffer.from(''); }\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n","module.exports = require(\"assert\");","// The river sweeps through\n// Silt and twigs, gravel and leaves\n// Driving the wheel on\n\n'use strict';\n\nvar defs = require('./defs');\nvar constants = defs.constants;\nvar decode = defs.decode;\nvar Buffer = require('safe-buffer').Buffer\n\nvar Bits = require('bitsyntax');\n\nmodule.exports.PROTOCOL_HEADER = \"AMQP\" + String.fromCharCode(0, 0, 9, 1);\n\n/*\n  Frame format:\n\n  0      1         3             7                size+7 size+8\n  +------+---------+-------------+ +------------+ +-----------+\n  | type | channel | size        | | payload    | | frame-end |\n  +------+---------+-------------+ +------------+ +-----------+\n  octet   short     long            size octets    octet\n\n  In general I want to know those first three things straight away, so I\n  can discard frames early.\n\n*/\n\n// framing constants\nvar FRAME_METHOD = constants.FRAME_METHOD,\nFRAME_HEARTBEAT = constants.FRAME_HEARTBEAT,\nFRAME_HEADER = constants.FRAME_HEADER,\nFRAME_BODY = constants.FRAME_BODY,\nFRAME_END = constants.FRAME_END;\n\nvar bodyCons =\n  Bits.builder(FRAME_BODY,\n               'channel:16, size:32, payload:size/binary',\n               FRAME_END);\n\n// %%% TESTME possibly better to cons the first bit and write the\n// second directly, in the absence of IO lists\nmodule.exports.makeBodyFrame = function(channel, payload) {\n  return bodyCons({channel: channel, size: payload.length, payload: payload});\n};\n\nvar frameHeaderPattern = Bits.matcher('type:8', 'channel:16',\n                                      'size:32', 'rest/binary');\n\nfunction parseFrame(bin, max) {\n  var fh = frameHeaderPattern(bin);\n  if (fh) {\n    var size = fh.size, rest = fh.rest;\n    if (size > max) {\n      throw new Error('Frame size exceeds frame max');\n    }\n    else if (rest.length > size) {\n      if (rest[size] !== FRAME_END)\n        throw new Error('Invalid frame');\n\n      return {\n        type: fh.type,\n        channel: fh.channel,\n        size: size,\n        payload: rest.slice(0, size),\n        rest: rest.slice(size + 1)\n      };\n    }\n  }\n  return false;\n}\n\nmodule.exports.parseFrame = parseFrame;\n\nvar headerPattern = Bits.matcher('class:16',\n                                 '_weight:16',\n                                 'size:64',\n                                 'flagsAndfields/binary');\n\nvar methodPattern = Bits.matcher('id:32, args/binary');\n\nvar HEARTBEAT = {channel: 0};\n\nmodule.exports.decodeFrame = function(frame) {\n  var payload = frame.payload;\n  switch (frame.type) {\n  case FRAME_METHOD:\n    var idAndArgs = methodPattern(payload);\n    var id = idAndArgs.id;\n    var fields = decode(id, idAndArgs.args);\n    return {id: id, channel: frame.channel, fields: fields};\n  case FRAME_HEADER:\n    var parts = headerPattern(payload);\n    var id = parts['class'];\n    var fields = decode(id, parts.flagsAndfields);\n    return {id: id, channel: frame.channel,\n            size: parts.size, fields: fields};\n  case FRAME_BODY:\n    return {channel: frame.channel, content: frame.payload};\n  case FRAME_HEARTBEAT:\n    return HEARTBEAT;\n  default:\n    throw new Error('Unknown frame type ' + frame.type);\n  }\n}\n\n// encoded heartbeat\nmodule.exports.HEARTBEAT_BUF = Buffer.from([constants.FRAME_HEARTBEAT,\n                                           0, 0, 0, 0, // size = 0\n                                           0, 0, // channel = 0\n                                           constants.FRAME_END]);\n\nmodule.exports.HEARTBEAT = HEARTBEAT;\n","module.exports = require(\"buffer-more-ints\");","module.exports = require(\"url\");","module.exports = require(\"crypto\");","var utils = require('../business/v1.0.0/utils');\r\n\r\nmodule.exports.seed = (db) => {\r\n  return new Promise((resolve, reject) => {\r\n\r\n    db.User.count({ where: { admin: true } }).then(\r\n      count => {\r\n        if (count < 1) {\r\n          if (process.env.NODE_ENV !== \"test\") // PRODUCTION and DEVELOPMENT ENV \r\n          {\r\n            console.log(\"will seed\");\r\n            let encrypted = utils.encrypt([\"admin@a.aa\", \"jose@a.aa\", \"doctor@a.aa\", \"123qweASD\", \"passvita\", \"José António\", \"Administrator Exemple\", \"Doctor Exemple\", \"santarem\", \"tomar\"])\r\n            if (!encrypted.error) {\r\n              db.User.bulkCreate([\r\n                { \"email\": encrypted.value[0], \"admin\": true, \"password\": encrypted.value[3], \"name\": encrypted.value[6] },\r\n                { \"email\": encrypted.value[1], \"password\": encrypted.value[3], \"name\": encrypted.value[5] },\r\n                { \"email\": encrypted.value[2], \"doctor\": true, \"password\": encrypted.value[3], \"name\": encrypted.value[7] }\r\n              ]).then(\r\n                users => db.Vitabox.bulkCreate([\r\n                  { \"latitude\": \"39.6003075\", \"longitude\": \"-8.3906627\", \"address\": \"f9bbee048f63bde52792a1ce009d0951ae52c1bc8033cfd5fbce839607f7f88c72e0e08fd4b363ac6dc2ef24185565a6\", \"registered\": true, \"active\": true, \"password\": encrypted.value[4], district: encrypted.value[8], locality: encrypted.value[9] },\r\n                ]).then(\r\n                  vitaboxes => vitaboxes[0].addUser(users[1].id, { through: { sponsor: true } }).then(\r\n                    () => db.Boardmodel.bulkCreate([\r\n                      { \"name\": \"Zolertia RE-Mote\", \"type\": \"environmental\", \"tag\": \"zolertiaremote\" },\r\n                      { \"name\": \"Bracelete\", \"type\": \"wearable\", \"tag\": \"bandfitness\" },\r\n                      { \"name\": \"Pressão Arterial\", \"type\": \"non-wearable\", \"tag\": \"bloodpressure\" },\r\n                      { \"name\": \"Pulsometro\", \"type\": \"non-wearable\", \"tag\": \"bodypulse\" },\r\n                      { \"name\": \"Balança\", \"type\": \"non-wearable\", \"tag\": \"bodyscale\" },\r\n                      { \"name\": \"Temperatura\", \"type\": \"non-wearable\", \"tag\": \"bodytemperature\" }\r\n                    ]).then(\r\n                      board_models => db.Sensormodel.bulkCreate([\r\n                        { \"transducer\": \"dht22\", \"measure\": \"temperatura\", \"to_read\": \"temperatura\", \"unit\": \"ºC\", \"tag\": \"temp\", \"min_acceptable\": \"10\", \"max_acceptable\": \"28\", \"min_possible\": \"-20\", \"max_possible\": \"50\", \"last_commit\": \"2018-06-18T06:48:48.400Z\", \"deviation_range\": 5, \"last_values\": [21, 23, 24, 22, 20] },\r\n                        { \"transducer\": \"dht22\", \"measure\": \"humidade\", \"to_read\": \"humidade\", \"unit\": \"%\", \"tag\": \"humi\", \"min_acceptable\": \"30\", \"max_acceptable\": \"60\", \"min_possible\": \"20\", \"max_possible\": \"70\" },\r\n                        { \"transducer\": \"medidor\", \"measure\": \"CO\", \"to_read\": \"monóxido de carbono\", \"unit\": \"ppm\", \"tag\": \"mono\", \"min_acceptable\": \"0\", \"max_acceptable\": \"9\", \"min_possible\": \"-1\", \"max_possible\": \"500\" },\r\n                        { \"transducer\": \"medidor\", \"measure\": \"oximetria\", \"to_read\": \"oximetria de pulso\", \"unit\": \"%\", \"tag\": \"spo2\", \"min_acceptable\": \"90\", \"max_acceptable\": \"100\", \"min_possible\": \"0\", \"max_possible\": \"200\" },\r\n                        { \"transducer\": \"medidor\", \"measure\": \"pulsação\", \"to_read\": \"pulsação arterial\", \"unit\": \"bpm\", \"tag\": \"pulse\", \"min_acceptable\": \"50\", \"max_acceptable\": \"100\", \"min_possible\": \"0\", \"max_possible\": \"400\" },\r\n                        { \"transducer\": \"medidor\", \"measure\": \"p.a. diastólica\", \"to_read\": \"pressão arterial diastólica\", \"unit\": \"mmHg\", \"tag\": \"diastolic\", \"min_acceptable\": \"0\", \"max_acceptable\": \"90\", \"min_possible\": \"0\", \"max_possible\": \"300\" },\r\n                        { \"transducer\": \"medidor\", \"measure\": \"p.a. sistólica\", \"to_read\": \"pressão arterial sistólica\", \"unit\": \"mmHg\", \"tag\": \"systolic\", \"min_acceptable\": \"0\", \"max_acceptable\": \"150\", \"min_possible\": \"0\", \"max_possible\": \"300\" },\r\n                        { \"transducer\": \"medidor\", \"measure\": \"peso\", \"to_read\": \"peso\", \"tag\": \"weight\", \"unit\": \"Kg\", \"min_acceptable\": \"45\", \"max_acceptable\": \"120\", \"min_possible\": \"0\", \"max_possible\": \"300\" },\r\n                        { \"transducer\": \"medidor\", \"measure\": \"passos\", \"to_read\": \"passos\", \"tag\": \"steps\", \"min_acceptable\": \"0\", \"max_acceptable\": \"99999\", \"min_possible\": \"-1\", \"max_possible\": \"99999\" },\r\n                        { \"transducer\": \"medidor\", \"measure\": \"freq. cardíaca\", \"to_read\": \"frequênca cardíaca\", \"unit\": \"bpm\", \"tag\": \"heartrate\", \"min_acceptable\": \"50\", \"max_acceptable\": \"100\", \"min_possible\": \"0\", \"max_possible\": \"400\" },\r\n                        { \"transducer\": \"medidor\", \"measure\": \"temperatura corp.\", \"to_read\": \"temperatura corporal\", \"unit\": \"ºC\", \"tag\": \"bodytemp\", \"min_acceptable\": \"0\", \"max_acceptable\": \"0\", \"min_possible\": \"0\", \"max_possible\": \"0\" },\r\n                        { \"transducer\": \"medidor\", \"measure\": \"CO2\", \"to_read\": \"dióxido de carbono\", \"unit\": \"ppm\", \"tag\": \"diox\", \"min_acceptable\": \"0\", \"max_acceptable\": \"1250\", \"min_possible\": \"-1\", \"max_possible\": \"2000\" },\r\n                      ]).then(\r\n                        sensor_models => board_models[0].addSensormodels([sensor_models[0].id, sensor_models[1].id, sensor_models[2].id, sensor_models[11].id]).then(\r\n                          () => board_models[1].addSensormodels([sensor_models[8].id, sensor_models[9].id]).then(\r\n                            () => board_models[2].addSensormodels([sensor_models[4].id, sensor_models[5].id, sensor_models[6].id]).then(\r\n                              () => board_models[3].addSensormodels([sensor_models[3].id, sensor_models[4].id]).then(\r\n                                () => board_models[4].addSensormodel(sensor_models[7].id).then(\r\n                                  () => board_models[5].addSensormodel(sensor_models[10].id).then(\r\n                                    () => db.Board.bulkCreate([\r\n                                      { \"vitabox_id\": vitaboxes[0].id, \"boardmodel_id\": board_models[0].id, \"description\": \"Sala\", \"mac_addr\": \"00:12:4b:00:06:0d:60:fd\", \"node_id\": \"60fd\", password: encrypted.value[4], active: true },\r\n                                      { \"vitabox_id\": vitaboxes[0].id, \"boardmodel_id\": board_models[0].id, \"description\": \"Quarto\", \"mac_addr\": \"00:12:4b:00:14:d5:2b:dd\", \"node_id\": \"2bdd\", password: encrypted.value[4], active: true },\r\n                                      { \"vitabox_id\": vitaboxes[0].id, \"boardmodel_id\": board_models[4].id, \"mac_addr\": \"8c:de:52:97:b0:9b\", \"node_id\": \"b09b\", password: encrypted.value[4], active: true },\r\n                                      { \"vitabox_id\": vitaboxes[0].id, \"boardmodel_id\": board_models[2].id, \"mac_addr\": \"50:8c:b1:66:64:80\", \"node_id\": \"6480\", password: encrypted.value[4], active: true },\r\n                                      { \"vitabox_id\": vitaboxes[0].id, \"boardmodel_id\": board_models[5].id, \"mac_addr\": \"a8:1b:6a:a8:f8:4d\", \"node_id\": \"f84d\", password: encrypted.value[4], active: true },\r\n                                      { \"vitabox_id\": vitaboxes[0].id, \"boardmodel_id\": board_models[3].id, \"mac_addr\": \"00:a0:50:04:13:1e\", \"node_id\": \"131e\", password: encrypted.value[4], active: true },\r\n                                      { \"vitabox_id\": vitaboxes[0].id, \"boardmodel_id\": board_models[1].id, \"description\": \"Miband do Mario\", \"mac_addr\": \"cd:8d:c0:93:b4:26\", \"node_id\": \"b426\", password: encrypted.value[4], active: true },\r\n                                      { \"vitabox_id\": vitaboxes[0].id, \"boardmodel_id\": board_models[0].id, \"description\": \"Cozinha test\", \"mac_addr\": \"00:12:4b:00:18:d6:f7:a8\", \"node_id\": \"f7a8\", password: encrypted.value[4], active: true },\r\n                                      { \"vitabox_id\": vitaboxes[0].id, \"boardmodel_id\": board_models[0].id, \"description\": \"Sala test\", \"mac_addr\": \"00:12:4b:00:18:d6:f8:cc\", \"node_id\": \"f8cc\", password: encrypted.value[4], active: true },\r\n                                      { \"vitabox_id\": vitaboxes[0].id, \"boardmodel_id\": board_models[0].id, \"description\": \"Quarto test\", \"mac_addr\": \"00:12:4b:00:18:d6:f8:88\", \"node_id\": \"f888\", password: encrypted.value[4], active: true },\r\n                                    ]).then(\r\n                                      boards => db.Sensor.bulkCreate([\r\n                                        { \"board_id\": boards[0].id, sensormodel_id: sensor_models[0].id },\r\n                                        { \"board_id\": boards[0].id, sensormodel_id: sensor_models[1].id },\r\n                                        { \"board_id\": boards[0].id, sensormodel_id: sensor_models[2].id },\r\n                                        { \"board_id\": boards[0].id, sensormodel_id: sensor_models[11].id },\r\n                                        { \"board_id\": boards[1].id, sensormodel_id: sensor_models[0].id },\r\n                                        { \"board_id\": boards[1].id, sensormodel_id: sensor_models[1].id },\r\n                                        { \"board_id\": boards[1].id, sensormodel_id: sensor_models[2].id },\r\n                                        { \"board_id\": boards[1].id, sensormodel_id: sensor_models[11].id },\r\n                                        { \"board_id\": boards[2].id, sensormodel_id: sensor_models[7].id },\r\n                                        { \"board_id\": boards[3].id, sensormodel_id: sensor_models[4].id },\r\n                                        { \"board_id\": boards[3].id, sensormodel_id: sensor_models[5].id },\r\n                                        { \"board_id\": boards[3].id, sensormodel_id: sensor_models[6].id },\r\n                                        { \"board_id\": boards[4].id, sensormodel_id: sensor_models[10].id },\r\n                                        { \"board_id\": boards[5].id, sensormodel_id: sensor_models[3].id },\r\n                                        { \"board_id\": boards[5].id, sensormodel_id: sensor_models[4].id },\r\n                                        { \"board_id\": boards[6].id, sensormodel_id: sensor_models[8].id },\r\n                                        { \"board_id\": boards[6].id, sensormodel_id: sensor_models[9].id },\r\n                                        { \"board_id\": boards[7].id, sensormodel_id: sensor_models[0].id },\r\n                                        { \"board_id\": boards[7].id, sensormodel_id: sensor_models[1].id },\r\n                                        { \"board_id\": boards[7].id, sensormodel_id: sensor_models[2].id },\r\n                                        { \"board_id\": boards[7].id, sensormodel_id: sensor_models[11].id },\r\n                                        { \"board_id\": boards[8].id, sensormodel_id: sensor_models[0].id },\r\n                                        { \"board_id\": boards[8].id, sensormodel_id: sensor_models[1].id },\r\n                                        { \"board_id\": boards[8].id, sensormodel_id: sensor_models[2].id },\r\n                                        { \"board_id\": boards[8].id, sensormodel_id: sensor_models[11].id },\r\n                                        { \"board_id\": boards[9].id, sensormodel_id: sensor_models[0].id },\r\n                                        { \"board_id\": boards[9].id, sensormodel_id: sensor_models[1].id },\r\n                                        { \"board_id\": boards[9].id, sensormodel_id: sensor_models[2].id },\r\n                                        { \"board_id\": boards[9].id, sensormodel_id: sensor_models[11].id },\r\n                                      ]).then(\r\n                                        sensors => db.Patient.bulkCreate([\r\n                                          { \"name\": encrypted.value[5], \"birthdate\": \"1987-02-28\", \"gender\": \"male\", active: true, height: 1.73, weight: 78.4, cc: \"ff89dbb0f03586c95d07dbcc51836b46\", nif: \"b48e5c5ce327580238c99916d026c1e2\" }\r\n                                        ]).then(\r\n                                          patients => vitaboxes[0].addPatients(patients).then(\r\n                                            patients[0].addDoctor(users[2].id).then(\r\n                                              () => resolve(),\r\n                                              error => reject(error)),\r\n                                            error => reject(error)),\r\n                                          error => reject(error)),\r\n                                        error => reject(error)),\r\n                                      error => reject(error)),\r\n                                    error => reject(error)),\r\n                                  error => reject(error)),\r\n                                error => reject(error)),\r\n                              error => reject(error)),\r\n                            error => reject(error)),\r\n                          error => reject(error)),\r\n                        error => reject(error)),\r\n                      error => reject(error)),\r\n                    error => reject(error)),\r\n                  error => reject(error)),\r\n                error => reject(error));\r\n            } else reject(encrypted.error);\r\n          }\r\n          else // TEST ENV\r\n          {\r\n            let encrypted = utils.encrypt([\"admin@a.aa\", \"123qweASD\", \"Administrator\", \"user@a.aa\", \"User Example\"]);\r\n            if (!encrypted.error) {\r\n\r\n              db.User.bulkCreate([\r\n                { \"email\": encrypted.value[0], \"admin\": true, \"password\": encrypted.value[1], \"name\": encrypted.value[2] },\r\n                { \"email\": encrypted.value[3], \"password\": encrypted.value[1], \"name\": encrypted.value[4] }\r\n              ]).then(\r\n                () => resolve(),\r\n                error => reject(error));\r\n            } else reject(encrypted.error);\r\n          }\r\n        } else resolve();\r\n      }, error => reject(error));\r\n  });\r\n\r\n}","module.exports = require(\"http\");","module.exports = require(\"express-routes-versioning\");","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {get} /warning/:page 01) Get warning\r\n * @apiGroup Warning\r\n * @apiName getWarnings\r\n * @apiDescription get warnings from page\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :page warnings page\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n    \"warnings\": [\r\n        {\r\n            \"datetime\": \"2018-07-16T13:36:23.149Z\",\r\n            \"message\": \"o valor de humidade do(a) Quarto está acima do recomendado\",\r\n            \"sensor_id\": \"0e35251f-dd9c-4928-9b8d-a94a44f22770\",\r\n            \"patient_id\": null,\r\n            \"seen_vitabox\": null\r\n        }]\r\n * }\r\n */\r\n/**\r\n * @api {get} /warning 02) Get warning to Vitabox\r\n * @apiGroup Warning\r\n * @apiName getWarningsAsVitabox\r\n * @apiDescription get all unseen warnings from vitabox\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n    \"warnings\": [\r\n        {\r\n            \"datetime\": \"2018-07-16T13:36:23.149Z\",\r\n            \"message\": \"o valor de humidade do(a) Quarto está acima do recomendado\",\r\n            \"sensor_id\": \"0e35251f-dd9c-4928-9b8d-a94a44f22770\",\r\n            \"patient_id\": null,\r\n            \"seen_vitabox\": null\r\n        }]\r\n * }\r\n */\r\nexports.getWarnings = (req, res) => {\r\n  if (req.client) {\r\n    if (req.client.constructor.name === \"Vitabox\") business.warning.getFromVitabox(req.client.id).then(\r\n      data => res.status(200).json({\r\n        warnings: data.map(x => {\r\n          return {\r\n            \"id\": x._id,\r\n            \"datetime\": x.datetime,\r\n            \"message\": req.t(x.message, req.t(x.what), req.t(x.who)),\r\n            \"sensor_id\": x.sensor_id,\r\n            \"patient_id\": x.patient_id,\r\n            \"seen_vitabox\": x.seen_vitabox,\r\n          }\r\n        })\r\n      }), error => res.status(error.code).send(error.msg));\r\n    else if (req.client.doctor) business.warning.getFromDoctor(req.params.page ? req.params.page : 1, req.client).then(\r\n      data => res.status(200).json({\r\n        warnings: data.map(x => {\r\n          return {\r\n            \"id\": x._id,\r\n            \"datetime\": x.datetime,\r\n            \"message\": req.t(x.message, req.t(x.what), req.t(x.who)),\r\n            \"sensor_id\": x.sensor_id,\r\n            \"patient_id\": x.patient_id,\r\n            \"seen_vitabox\": x.seen_vitabox,\r\n          }\r\n        })\r\n      }), error => res.status(error.code).send(error.msg));\r\n    else business.warning.getFromUser(req.params.page ? req.params.page : 1, req.client).then(\r\n      data => res.status(200).json({\r\n        warnings: data.map(x => {\r\n          return {\r\n            \"id\": x._id,\r\n            \"datetime\": x.datetime,\r\n            \"message\": req.t(x.message, req.t(x.what), req.t(x.who)),\r\n            \"sensor_id\": x.sensor_id,\r\n            \"patient_id\": x.patient_id,\r\n            \"seen_vitabox\": x.seen_vitabox,\r\n          }\r\n        })\r\n      }), error => res.status(error.code).send(error.msg));\r\n  } else res.status(401).send(req.t(\"unauthorized\"));\r\n}\r\n\r\n/**\r\n* @api {put} /warning 03) Check warning\r\n* @apiGroup Warning\r\n* @apiName checkWarnings\r\n* @apiDescription check all warnings, or a single warning by vitabox\r\n* @apiVersion 1.0.0\r\n* @apiUse box\r\n* \r\n* @apiPermission vitabox, vitabox user, admin\r\n* @apiParam {string} :warning_id (only to vitabox) warning unique ID\r\n* @apiSuccess {boolean} result return true if was sucessfuly checked\r\n*/\r\nexports.checkWarnings = (req, res) => {\r\n  if (req.client && req.client.constructor.name === \"Vitabox\") {\r\n    if (req.body.warning_id) business.warning.checkWarningByVitabox(req.body.warning_id, req.client.id).then(\r\n      () => res.status(200).json({ result: true }),\r\n      error => res.status(error.code).send(error.msg));\r\n    else res.status(500).send(\"warning id undifined\");\r\n  } else if (req.client) business.warning.checkWarningByUser(req.client).then(\r\n    () => res.status(200).json({ result: true }),\r\n    error => res.status(error.code).send(error.msg));\r\n  else res.status(401).send(req.t(\"unauthorized\"));\r\n}","var business = require('../../business/index').v1_0_0,\r\n    broker = require(\"../../workers/index\");\r\n/**\r\n * @apiDefine box\r\n * \r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiHeader Accept-Language=\"pt\"\r\n * @apiError {number} statusCode http status code: 500 to business logic errors and 401 to unauthorized\r\n * @apiError {string} statusMessage error description\r\n */\r\n\r\n/**\r\n * @api {post} /vitabox 01) Create\r\n * @apiGroup Vitabox\r\n * @apiName create\r\n * @apiDescription create a new vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiSuccess {string} id created box id\r\n * @apiSuccess {string} password created box serial key\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.vitabox.create().then(\r\n            data => res.status(200).json(data),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/register 02) Register\r\n * @apiGroup Vitabox\r\n * @apiName vitaboxRegister\r\n * @apiDescription register vitabox, the user must be authenticated as \"admin\" and will define the \"sponsor\" account to the vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user, admin\r\n * @apiParam {string} :id vitabox id\r\n * @apiParam {decimal} latitude min: -90, max: 90 (based on google maps coordinates)\r\n * @apiParam {decimal} longitude min: -180, max: 180 (based on google maps coordinates)\r\n * @apiParam {string} address full address with postal code\r\n * @apiParam {string} email sponsor's email\r\n * @apiParam {string} password (only to users) vitabox password to register\r\n * @apiParamExample {json} Request example to admin:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"email\": \"sponsor@example.com\",\r\n *          \"password\": \"1DlA2.d$\"\r\n *     }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly registered\r\n */\r\nexports.register = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        if (req.client.admin) {\r\n            business.user.findByEmail(req.body.email).then(\r\n                user => business.vitabox.register(req.params.id, req.body, user, true).then(\r\n                    () => res.status(200).json({ result: true }),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(500).send(error.msg));\r\n        } else {\r\n            business.vitabox.register(req.params.id, req.body, req.client, false).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg));\r\n        }\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/connect 03) Request Token\r\n * @apiGroup Vitabox\r\n * @apiName vitaboxLogin\r\n * @apiDescription request for a token to the vitabox\r\n * @apiVersion 1.0.0\r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiError {string} error error description\r\n * \r\n * @apiParam {string} :id vitabox id\r\n * @apiParam {string} password password generated on creation\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.requestToken = (req, res) => {\r\n    business.vitabox.requestToken(req.params.id, req.body.password).then(\r\n        data => {\r\n            business.utils.createToken(data).then(\r\n                token => res.status(200).json({ token: token }),\r\n                error => res.status(500).send({ error: error.msg }));\r\n        },\r\n        error => res.status(error.code).send(error.msg)\r\n    );\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:own 04) List\r\n * @apiGroup Vitabox\r\n * @apiName list\r\n * @apiDescription list all vitaboxes related to the user. \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission any user\r\n * @apiParam {string} :mine (admin) indicate if are listing their own vitaboxes\r\n * @apiSuccess {array} vitaboxes list of vitaboxes\r\n * @apiSuccess {string} id id of each vitabox\r\n * @apiSuccess {decimal} latitude latitude of each vitabox, min: -90, max: 90 (based on google maps coordinates)\r\n * @apiSuccess {decimal} longitude longitude of each vitabox, min: -180, max: 180 (based on google maps coordinates)\r\n * @apiSuccess {string} address full address of each vitabox\r\n * @apiSuccess {boolean} sponsor flag indicating if the requester is sponsor of that vitabox (only if NOT admin)\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox (only if admin)\r\n * @apiSuccess {boolean} registered flag indicating if the vitabox was already registered (only if admin)\r\n * @apiSuccess {boolean} active flag indicating if the vitabox was already activated (only if admin)\r\n * @apiSuccess {datetime} created_at date of production (only if admin)\r\n * @apiSuccess {datetime} updated_at date of last update (only if admin)\r\n * @apiSuccessExample {json} Response example to common user:\r\n * {\r\n *  \"vitaboxes\": [\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"sponsor\": true\r\n *      },\r\n *      {\r\n *          \"id\": \"a6abfa76-68f0-4325-b3ab-6c540a800284\",\r\n *          \"latitude\": \"51.5058372\",\r\n *          \"longitude\": \"-0.1899126\",\r\n *          \"address\": \"Kensington Gardens, London W8 4PX, Reino Unido\",\r\n *          \"sponsor\": false,\r\n *          \"active\": false,\r\n *      }\r\n *  ]\r\n * }\r\n * @apiSuccessExample {json} Response example to admin:\r\n * {\r\n *  \"vitaboxes\": [\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          },\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"registered\": false,\r\n *          \"active\": false,\r\n *          \"created_at\": \"2018-02-22T11:57:53.000Z\",\r\n *          \"updated_at\": \"2018-02-22T11:57:53.000Z\"\r\n *      }\r\n *      {\r\n *          \"id\": \"d1d66ccb-e5a0-4bd4-8580-6218f452e580\",\r\n *          \"latitude\": \"51.5058372\",\r\n *          \"longitude\": \"-0.1899126\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          },\r\n *          \"address\": \"Kensington Gardens, London W8 4PX, Reino Unido\",\r\n *          \"registered\": false,\r\n *          \"active\": false,\r\n *          \"created_at\": \"2018-02-22T11:57:53.000Z\",\r\n *          \"updated_at\": \"2018-02-22T11:57:53.000Z\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.list = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.list(req.client, req.params.own).then(\r\n            data => res.status(200).json({ vitaboxes: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/settings 05) Get Settings\r\n * @apiGroup Vitabox\r\n * @apiName getSettings\r\n * @apiDescription returns the vitabox settings\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox\r\n * @apiSuccess {json} settings configuration's structure, defined by vitabox\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *      \"settings\":{\r\n *          \"cnfg1\": \"true\",\r\n *          \"cnfg2\": \"12345\",\r\n *          \"cnfg3\": \"some other config\"\r\n *      }\r\n * }\r\n */\r\nexports.getSettings = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"Vitabox\") {\r\n        res.status(200).json({ settings: req.client.settings })\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id/settings 06) Set Settings\r\n * @apiGroup Vitabox\r\n * @apiName setSettings\r\n * @apiDescription update vitabox settings\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox, admin, sponsor\r\n * @apiParam {json} settings configuration's structure to be updated\r\n * @apiParamExample {json} Response example:\r\n * {\r\n *      \"settings\":{\r\n *          \"cnfg1\": \"true\",\r\n *          \"cnfg2\": \"12345\",\r\n *          \"cnfg3\": \"some other config\"\r\n *      }\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.setSettings = (req, res) => {\r\n    if (req.client) {\r\n        if (req.client.constructor.name === \"Vitabox\")\r\n            req.client.update({ settings: req.body.settings }).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg));\r\n        else if (req.client.admin) business.vitabox.find(req.params.id).then(\r\n            vitabox => vitabox.update({ settings: req.body.settings }).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg)),\r\n            res.status(401).send(req.t(\"unauthorized\")));\r\n        else business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n            vitabox => vitabox.update({ settings: req.body.settings }).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg)),\r\n            res.status(401).send(req.t(\"unauthorized\")));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id 07) Update\r\n * @apiGroup Vitabox\r\n * @apiName update\r\n * @apiDescription update a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {decimal} latitude min: -90, max: 90 (based on google maps coordinates)\r\n * @apiParam {decimal} longitude min: -180, max: 180 (based on google maps coordinates)\r\n * @apiParam {string} address full address with postal code\r\n * @apiParam {json} settings configuration's structure (only if admin)\r\n * @apiParamExample {json} Request example to common user:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\"\r\n *     }\r\n * @apiParamExample {json} Request example to admin:\r\n *     {\r\n *          \"latitude\": \"38.8976763\",\r\n *          \"longitude\": \"-77.0387185\",\r\n *          \"address\": \"1600 Pennsylvania Ave NW, Washington, DC 20500, EUA\",\r\n *          \"settings\":{\r\n *              \"cnfg1\": \"true\",\r\n *              \"cnfg2\": \"12345\",\r\n *              \"cnfg3\": \"some other config\"\r\n *          }\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.update(req.client, req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id 08) Delete\r\n * @apiGroup Vitabox\r\n * @apiName delete\r\n * @apiDescription list all users related with the vitabox if the requester is related too.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.delete(req.client, req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(req.t(\"unauthorized\")); }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/user 09) Add User\r\n * @apiGroup Vitabox\r\n * @apiName addUser\r\n * @apiDescription add user to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} email email of the user to add\r\n * @apiParam {boolean} sponsor (optional) flag to give the permission as sponsor of the vitabox\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"email\": \"user-example@some.thing\",\r\n *          \"sponsor\": false\r\n *     }\r\n * @apiSuccessExample {json}Response example:\r\n * {\r\n *  \"name\": \"User Name\",\r\n *  \"id\": \"585402ef-68dd-44a4-a44b-04152e659d11\"\r\n * }\r\n */\r\nexports.addUser = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        let flag = req.body.sponsor ? true : false;\r\n        business.user.findByEmail(req.body.email).then(\r\n            user => business.vitabox.addUser(req.client, req.params.id, user.id, flag).then(\r\n                () => business.warning.setWarningCount(user.id, req.params.id).then(\r\n                    () => broker.notification.update(req.params.id).then(\r\n                        () => res.status(200).json({ name: user.name, id: user.id })),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(500).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/user 10) Get Users\r\n * @apiGroup Vitabox\r\n * @apiName getUsers\r\n * @apiDescription get users of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} users vitabox users list\r\n * @apiSuccess {string} id id of each user\r\n * @apiSuccess {string} email email of each user\r\n * @apiSuccess {datetime} since relationship date with the vitabox\r\n * @apiSuccess {boolean} sponsor flag indicating if the user is sponsor of the vitabox\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"users\": [\r\n *      {\r\n *          \"id\": \"585402ef-68dd-44a4-a44b-04152e659d11\",\r\n *          \"email\": \"donaldtrump@usa.com\",\r\n *          \"name\": \"Donald Trump\",\r\n *          \"since\": \"2018-02-19T14:41:13.000Z\",\r\n *          \"sponsor\": false\r\n *      },\r\n *      {\r\n *          \"id\": \"78007a69-baa2-4b24-b936-234883811b6a\",\r\n *          \"email\": \"queenelizabeth@majesty.uk\",\r\n *          \"name\": \"Queen Elizabeth\",\r\n *          \"since\": \"2018-02-19T14:40:14.000Z\",\r\n *          \"sponsor\": true\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getUsers = (req, res) => {\r\n    if (req.client) if (req.client.constructor.name === \"Vitabox\")\r\n        business.vitabox.getUsers(req.client).then(\r\n            data => res.status(200).json({ users: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    else business.vitabox.find(req.params.id).then(\r\n        vitabox => {\r\n            if (req.client.admin) business.vitabox.getUsers(vitabox).then(\r\n                data => res.status(200).json({ users: data }),\r\n                error => res.status(error.code).send(error.msg));\r\n            else business.vitabox.verifyUser(req.client, vitabox).then(\r\n                () => business.vitabox.getUsers(vitabox).then(\r\n                    data => res.status(200).json({ users: data }),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg));\r\n        }, error => res.status(error.code).send(error.msg))\r\n    else res.status(401).send(req.t(\"unauthorized\"));\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/user 11) Remove User\r\n * @apiGroup Vitabox\r\n * @apiName removeUser\r\n * @apiDescription remove user from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} user_id user unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"user_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeUser = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.removeUser(req.client, req.params.id, req.body.user_id).then(\r\n            () => business.warning.removeWarningCount(req.body.user_id, req.params.id).then(\r\n                () => broker.notification.update(req.params.id).then(\r\n                    () => res.status(200).json({ result: true })),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/patient 12) Add Patient\r\n * @apiGroup Vitabox\r\n * @apiName addPatient\r\n * @apiDescription add patient to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} name patient name\r\n * @apiParam {date} birthdate patient birthdate (date only)\r\n * @apiParam {string} gender patient gender (must be 'male', 'female' or 'undefined')\r\n * @apiParam {string} cc patient citizen card number\r\n * @apiParam {string} nif patient fiscal number\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"José António\",\r\n *          \"birthdate\": \"1987-02-28\",\r\n *          \"gender\": \"male\",\r\n *          \"cc\": \"123456789\",\r\n *          \"nif\": \"987654321\"\r\n *     }\r\n * @apiSuccess {string} id new patient id\r\n */\r\nexports.addPatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n            vitabox => business.patient.createIfNotExists(req.body, vitabox.id).then(\r\n                patient => broker.notification.update(req.params.id).then(\r\n                    () => res.status(200).json({ id: patient.id })),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/patient 13) Get Patients\r\n * @apiGroup Vitabox\r\n * @apiName getPatients\r\n * @apiDescription get patients of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} patients vitabox patients list\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"patients\": [\r\n *      {\r\n *          \"id\": \"a77ea0fe-5e34-4189-9702-95cb69b4cd1d\",\r\n *          \"birthdate\": \"1987-02-28\",\r\n *          \"name\": \"José António\",\r\n *          \"gender\": \"male\",\r\n *          \"since\": \"2018-02-19T14:55:59.000Z\",\r\n *          \"active\": true,\r\n *          \"weight\": 79.6,\r\n *          \"height\": 1.74,\r\n *          \"cc\": \"123456789\",\r\n *          \"nif\": \"987654321\",\r\n *          \"Boards\": [\r\n *              {\r\n *                  \"id\": \"950c8b5e-6f43-4686-b21b-a435e96401b7\",\r\n *                  \"description\": \"kitchen\",\r\n *                  \"mac_addr\": \"00:12:4b:00:06:0d:60:c8\",\r\n *                  \"since\": \"2018-07-23T05:15:27.000Z\",\r\n *                  \"frequency\": 2,\r\n *                  \"Boardmodel\": {\r\n *                      \"id\": \"17770821-6f5a-41b3-8ea3-d42c000326c6\",\r\n *                      \"type\": \"environmental\",\r\n *                      \"name\": \"Zolertia RE-Mote\",\r\n *                      \"tag\": \"zolertiaremote\"\r\n *                  },\r\n *                  \"Sensors\": [\r\n *                      {\r\n *                          \"id\": \"9cd77116-6edb-4072-9d66-204fca3d5a07\",\r\n *                          \"last_values\": [ 17, 16, 13, 16, 15 ],\r\n *                          \"last_commit\": \"2018-07-23T05:15:27.000Z\",\r\n *                          \"Sensormodel\": {\r\n *                              \"id\": \"1f8eab67-d39e-439e-b508-6ef6f2c6794a\",\r\n *                              \"transducer\": \"dht22\",\r\n *                              \"measure\": \"humidity\",\r\n *                              \"unit\": \"%\",\r\n *                              \"min_acceptable\": \"30.00000\",\r\n *                              \"max_acceptable\": \"50.00000\",\r\n *                              \"min_possible\": \"20.00000\",\r\n *                              \"max_possible\": \"60.00000\",\r\n *                              \"to_read\": \"temperature\",\r\n *                              \"tag\": \"humi\"\r\n *                          }\r\n *                      }\r\n *                  ]\r\n *              }\r\n *          ],\r\n *          \"Profiles\":[\r\n *              {\r\n *                  \"id\": \"950c8b5e-6f43-4686-b21b-a435e96401b7\", \r\n *                  \"measure\": \"body fat\", \r\n *                  \"tag\": \"bodyfat\", \r\n *                  \"min\": 19, \r\n *                  \"max\": 25\r\n *              },\r\n *              {\r\n *                  \"id\": \"32443b5e-28cd-ab43-b86b-a423442401b8\", \r\n *                  \"measure\": \"weight\", \r\n *                  \"tag\": \"weight\", \r\n *                  \"min\": 58, \r\n *                  \"max\": 64\r\n *              }\r\n *          ],\r\n *          \"Doctors\":[\r\n *              {\r\n *                  \"id\": \"950c8b5e-6f43-4686-b21b-a435e96401b7\", \r\n *                  \"name\": \"Julia Almeida\", \r\n *                  \"email\": \"jalme@a.aa\"\r\n *              }\r\n *          ]\r\n *      }\r\n *  ]\r\n * }\r\n * \r\n */\r\nexports.getPatients = (req, res) => {\r\n    if (req.client) if (req.client.constructor.name === \"Vitabox\")\r\n        business.vitabox.getPatients(req.client, { active: true }).then(\r\n            data => res.status(200).json({ patients: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    else business.vitabox.find(req.params.id).then(\r\n        vitabox => {\r\n            if (req.client.admin) business.vitabox.getPatients(vitabox, {}).then(\r\n                data => res.status(200).json({ patients: data }),\r\n                error => res.status(error.code).send(error.msg));\r\n            else business.vitabox.verifyUser(req.client, vitabox).then(\r\n                () => business.vitabox.getPatients(vitabox, {}).then(\r\n                    data => res.status(200).json({ patients: data }),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg));\r\n        }, error => res.status(error.code).send(error.msg));\r\n    else res.status(401).send(req.t(\"unauthorized\"));\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id/patient/disable 14) Disable Patient\r\n * @apiGroup Vitabox\r\n * @apiName disablePatient\r\n * @apiDescription disable patient from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} patient_id patient unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"patient_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly disabled\r\n */\r\nexports.disablePatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        if (req.client.admin) business.patient.disable(req.body.patient_id).then(\r\n            () => broker.notification.update(req.params.id).then(\r\n                () => res.status(200).json({ result: true })),\r\n            error => res.status(error.code).send(error.msg));\r\n        else business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n            () => business.patient.disable(req.body.patient_id).then(\r\n                () => broker.notification.update(req.params.id).then(\r\n                    () => res.status(200).json({ result: true }),\r\n                    error => res.status(error.code).send(error.msg))),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id/patient/enable 15) Enable Patient\r\n * @apiGroup Vitabox\r\n * @apiName enablePatient\r\n * @apiDescription enable patient from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} patient_id patient unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"patient_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly enabled\r\n */\r\nexports.enablePatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        if (req.client.admin) business.patient.enable(req.body.patient_id).then(\r\n            () => broker.notification.update(req.params.id).then(\r\n                () => res.status(200).json({ result: true })),\r\n            error => res.status(error.code).send(error.msg));\r\n        else business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n            () => business.patient.enable(req.body.patient_id).then(\r\n                () => broker.notification.update(req.params.id).then(\r\n                    () => res.status(200).json({ result: true })),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/patient 16) Remove Patient\r\n * @apiGroup Vitabox\r\n * @apiName removePatient\r\n * @apiDescription remove a patient from a specific vitabox if the requester is sponsor of it, all the patient records will became unavailable to the users of the vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} patient_id patient unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"patient_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removePatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n            vitabox => vitabox.removePatient(req.body.patient_id).then(\r\n                () => broker.record.removeByPatient(req.body.patient_id).then(\r\n                    () => broker.notification.update(req.params.id).then(\r\n                        () => res.status(200).json({ result: true }))),\r\n                error => es.status(500).send(error.message)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /vitabox/:id/board 17) Add Board\r\n * @apiGroup Vitabox\r\n * @apiName addBoard\r\n * @apiDescription add board to a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} description (optional) description to identify the board\r\n * @apiParam {string} password board password\r\n * @apiParam {string} mac_address board MAC address\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"description\": \"kitchen\",\r\n *          \"password\":\"WkN1NNQiRD\",\r\n *          \"mac_addr\": \"00:12:4b:00:06:0d:60:fb\"\r\n *     }\r\n * @apiSuccess {Object} board return board inserted\r\n */\r\nexports.addBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.board.authenticate(req.body.mac_addr, req.body.password).then(\r\n            board => business.vitabox.addBoard(req.client, req.params.id, board.id).then(\r\n                () => business.board.setDescription(board, req.body.description ? req.body.description : null).then(\r\n                    () => broker.notification.update(req.params.id).then(\r\n                        () => res.status(200).json({ board: board }))),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /vitabox/:id/board 18) Get Boards\r\n * @apiGroup Vitabox\r\n * @apiName getBoards\r\n * @apiDescription get boards of specific vitabox if the requester is related to it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiSuccess {array} boards vitabox boards list\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *   \"boards\": [\r\n *      {\r\n *          \"id\": \"950c8b5e-6f43-4686-b21b-a435e96401b7\",\r\n *          \"description\": \"kitchen\",\r\n *          \"mac_addr\": \"00:12:4b:00:06:0d:60:c8\",\r\n *          \"updated_at\": \"2018-05-13T14:50:11.000Z\",\r\n *          \"active\": true,\r\n *          \"node_id\": \"60c8\",\r\n *          \"Boardmodel\": {\r\n *              \"id\": \"17770821-6f5a-41b3-8ea3-d42c000326c6\",\r\n *              \"type\": \"environmental\",\r\n *              \"name\": \"Zolertia RE-Mote\",\r\n *              \"tag\": \"zolertiaremote\",\r\n *          },\r\n *          \"Sensors\": [\r\n *              {\r\n *                  \"id\": \"9cd77116-6edb-4072-9d66-204fca3d5a07\",\r\n *                  \"last_values\": [ 17, 16, 13, 16, 15 ],\r\n *                  \"last_commit\": \"2018-07-23T05:15:27.000Z\",\r\n *                  \"Sensormodel\": {\r\n *                      \"id\": \"1f8eab67-d39e-439e-b508-6ef6f2c6794a\",\r\n *                      \"transducer\": \"dht22\",\r\n *                      \"measure\": \"humidity\",\r\n *                      \"unit\": \"%\",\r\n *                      \"min_acceptable\": \"30.00000\",\r\n *                      \"max_acceptable\": \"50.00000\",\r\n *                      \"min_possible\": \"20.00000\",\r\n *                      \"max_possible\": \"60.00000\",\r\n *                      \"to_read\": \"temperature\",\r\n *                      \"tag\": \"humi\"\r\n *                  }\r\n *              }\r\n *          ]\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getBoards = (req, res) => {\r\n    if (req.client) if (req.client.constructor.name === \"Vitabox\")\r\n        business.vitabox.getBoards(req.client, { active: true }).then(\r\n            data => res.status(200).json({ boards: data }),\r\n            error => res.status(error.code).send(error.msg));\r\n    else business.vitabox.find(req.params.id).then(\r\n        vitabox => {\r\n            if (req.client.admin) business.vitabox.getBoards(vitabox, {}).then(\r\n                data => res.status(200).json({ boards: data }),\r\n                error => res.status(error.code).send(error.msg));\r\n            else business.vitabox.verifyUser(req.client, vitabox).then(\r\n                () => business.vitabox.getBoards(vitabox, {}).then(\r\n                    data => res.status(200).json({ boards: data }),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg));\r\n        }, error => res.status(error.code).send(error.msg));\r\n    else res.status(401).send(req.t(\"unauthorized\"));\r\n}\r\n\r\n\r\n/**\r\n * @api {put} /vitabox/:id/board/disable 19) Disable Board\r\n * @apiGroup Vitabox\r\n * @apiName disableBoard\r\n * @apiDescription disable board from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin, sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} board_id board unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"board_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly disabled\r\n */\r\nexports.disableBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        if (req.client.admin) business.board.disable(req.body.board_id).then(\r\n            () => broker.notification.update(req.params.id).then(\r\n                () => res.status(200).json({ result: true })),\r\n            error => res.status(error.code).send(error.msg));\r\n        else business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n            () => business.board.disable(req.body.board_id).then(\r\n                () => broker.notification.update(req.params.id).then(\r\n                    () => res.status(200).json({ result: true })),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /vitabox/:id/board/enable 20) Enable Board\r\n * @apiGroup Vitabox\r\n * @apiName enableBoard\r\n * @apiDescription disable board from a specific vitabox if the requester is sponsor of it.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin, sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} board_id board unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"board_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly enabled\r\n */\r\nexports.enableBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        if (req.client) business.board.enable(req.body.board_id).then(\r\n            () => broker.notification.update(req.params.id).then(\r\n                () => res.status(200).json({ result: true })),\r\n            error => res.status(error.code).send(error.msg));\r\n        else business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n            () => business.board.enable(req.body.board_id).then(\r\n                () => broker.notification.update(req.params.id).then(\r\n                    () => res.status(200).json({ result: true })),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /vitabox/:id/board 21) Remove Board\r\n * @apiGroup Vitabox\r\n * @apiName removeBoard\r\n * @apiDescription remove a board from a specific vitabox if the requester is sponsor of it, all the board records will became unavailable to the users of the vitabox.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin, sponsor\r\n * @apiParam {string} :id vitabox unique ID\r\n * @apiParam {string} board_id board unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"board_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * \r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        if (req.client.admin) business.vitabox.find(req.params.id).then(\r\n            vitabox => vitabox.removeBoard(req.body.board_id).then(\r\n                () => business.board.removeDescription(req.body.board_id).then(\r\n                    () => broker.record.removeByBoard(req.body.board_id).then(\r\n                        () => broker.notification.update(req.params.id).then(\r\n                            () => res.status(200).json({ result: true }))),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(500).send(error.message)),\r\n            error => res.status(500).send(error.message));\r\n        else business.vitabox.verifySponsor(req.client, req.params.id).then(\r\n            vitabox => vitabox.removeBoard(req.body.board_id).then(\r\n                () => business.board.removeDescription(req.body.board_id).then(\r\n                    () => broker.record.removeByBoard(req.body.board_id).then(\r\n                        () => broker.notification.update(req.params.id).then(\r\n                            () => res.status(200).json({ result: true }))),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(500).send(error.message)),\r\n            error => res.status(500).send(error.message));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n","var business = require('../../business/index').v1_0_0,\r\n    broker = require(\"../../workers/index\");\r\n/**\r\n * @apiDefine auth\r\n * \r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Accept-Language=\"pt\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiError {number} statusCode http status code: 500 to business logic errors and 401 to unauthorized\r\n * @apiError {string} statusMessage error description\r\n */\r\n\r\n/**\r\n * @api {post} /register 01) Register user\r\n * @apiGroup Authentication\r\n * @apiName userRegister\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} name valid name\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n * @apiSuccess {string} id user id\r\n * @apiSuccess {string} name user name\r\n * @apiSuccess {string} email user email\r\n * @apiSuccess {boolean} is_admin flag indicating if is admin\r\n * @apiSuccess {boolean} is_doctor flag indicating if is doctor\r\n * @apiSuccess {string} photo user photo\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *      \"token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijg0YmIyNTFjLWYxY2EtNGVjZC04OTNlLTU2YWU0MDRlZjhlZiIsInJvbGUiOiJVc2VyIiwiaWF0IjoxNTI1MzQzNTg4LCJleHAiOjE1MjUzNzIzODgsInN1YiI6Ijo6ZmZmZjoxMC4wLjIuMiJ9.eZQ9dmDROpIh_6aEcoTTgH_DGauqNxqIsYSsW-tNoXQsLyBQb0VPLnFRzi7n_yKB_D43SGfj8PxBaDmt0WWgbjlKOJdP6WZYz5W_eVWDjpcNjzIq2nj8W1B3AstxZ5RmnP-NFd96Vot-O7mXXk96zGqTzIPYZcL3eX-MvgugCbGr2ikzyJ9y4oWxedzZTsY7u1C_Fy9ZuIG_LFUAZ7yBFXOWYSYdI8VEwxF3rgU1eagUZKO8ZMzVsRQPptSWA3i5-fJW3-k6tfstRcr-nUBOda7diBmuw6cT7zDgtuEyctouuH_RAP-lNuoIpn8pbiSunrNB2D8CGh7RP7CPvu3NSA\",\r\n *      \"id\": \"84bb251c-f1ca-4ecd-893e-56ae404ef8ef\",\r\n *      \"name\": \"Administrator Exemple\",\r\n *      \"email\": \"admin@some.thing\",\r\n *      \"is_admin\": true,\r\n *      \"is_doctor\": false,\r\n *      \"photo\": \"8b2fe0d0-0311-494a-8e27-522407d21b0e44fe0662-1271-4f42-a764-eeb0ba87cd87a2d6f862-c7e9-43a1-8066-87f157da7147.jpeg\"\r\n * }\r\n */\r\nexports.register = (req, res) => {\r\n    business.user.register(req.body.email, req.body.password, req.body.name).then(\r\n        user => business.utils.createToken(user, req.connection.remoteAddress).then(\r\n            token => broker.notification.log(user.id, \"login\").then(\r\n                () => res.status(200).json({\r\n                    token: token,\r\n                    id: user.id,\r\n                    name: business.utils.decrypt(user.name),\r\n                    email: business.utils.decrypt(user.email),\r\n                    is_admin: user.admin,\r\n                    is_doctor: user.doctor,\r\n                    photo: user.photo\r\n                })),\r\n            error => res.status(error.code).send(error.msg)),\r\n        error => res.status(500).send(error.msg));\r\n}\r\n\r\n/**\r\n * @api {post} /login 02) Login user\r\n * @apiGroup Authentication\r\n * @apiName userLogin\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n * @apiSuccess {string} id user id\r\n * @apiSuccess {string} name user name\r\n * @apiSuccess {string} email user email\r\n * @apiSuccess {boolean} is_admin flag indicating if is admin\r\n * @apiSuccess {boolean} is_doctor flag indicating if is doctor\r\n * @apiSuccess {string} photo user photo\r\n * @apiSuccess {number} warnings unseen warnings count,\r\n * @apiSuccess {number} errors unseen errors count (if not admin always 0)\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *      \"token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijg0YmIyNTFjLWYxY2EtNGVjZC04OTNlLTU2YWU0MDRlZjhlZiIsInJvbGUiOiJVc2VyIiwiaWF0IjoxNTI1MzQzNTg4LCJleHAiOjE1MjUzNzIzODgsInN1YiI6Ijo6ZmZmZjoxMC4wLjIuMiJ9.eZQ9dmDROpIh_6aEcoTTgH_DGauqNxqIsYSsW-tNoXQsLyBQb0VPLnFRzi7n_yKB_D43SGfj8PxBaDmt0WWgbjlKOJdP6WZYz5W_eVWDjpcNjzIq2nj8W1B3AstxZ5RmnP-NFd96Vot-O7mXXk96zGqTzIPYZcL3eX-MvgugCbGr2ikzyJ9y4oWxedzZTsY7u1C_Fy9ZuIG_LFUAZ7yBFXOWYSYdI8VEwxF3rgU1eagUZKO8ZMzVsRQPptSWA3i5-fJW3-k6tfstRcr-nUBOda7diBmuw6cT7zDgtuEyctouuH_RAP-lNuoIpn8pbiSunrNB2D8CGh7RP7CPvu3NSA\",\r\n *      \"id\": \"84bb251c-f1ca-4ecd-893e-56ae404ef8ef\",\r\n *      \"name\": \"Administrator Exemple\",\r\n *      \"email\": \"admin@some.thing\",\r\n *      \"is_admin\": true,\r\n *      \"is_doctor\": false,\r\n *      \"photo\": \"8b2fe0d0-0311-494a-8e27-522407d21b0e44fe0662-1271-4f42-a764-eeb0ba87cd87a2d6f862-c7e9-43a1-8066-87f157da7147.jpeg\",\r\n *      \"warnings\": 0,\r\n *      \"errors\": 0\r\n * }\r\n */\r\nexports.login = (req, res) => {\r\n    business.user.login(req.body.email, req.body.password).then(\r\n        user => business.utils.createToken(user, req.connection.remoteAddress).then(\r\n            token => broker.notification.log(user.id, \"login\").then(\r\n                () => business.warning.getWarningCount(user.id).then(\r\n                    warnings => {\r\n                        if (!user.admin) res.status(200).json({\r\n                            token: token,\r\n                            id: user.id,\r\n                            name: business.utils.decrypt(user.name),\r\n                            email: business.utils.decrypt(user.email),\r\n                            is_admin: user.admin,\r\n                            is_doctor: user.doctor,\r\n                            photo: user.photo,\r\n                            warnings: warnings,\r\n                            errors: 0\r\n                        });\r\n                        else business.error.countUnseen().then(\r\n                            errors => res.status(200).json({\r\n                                token: token,\r\n                                id: user.id,\r\n                                name: business.utils.decrypt(user.name),\r\n                                email: business.utils.decrypt(user.email),\r\n                                is_admin: user.admin,\r\n                                is_doctor: user.doctor,\r\n                                photo: user.photo,\r\n                                warnings: warnings,\r\n                                errors: errors\r\n                            }),\r\n                            error => res.status(500).send(error.msg));\r\n                    }, error => res.status(500).send(error.msg))),\r\n            error => res.status(error.code).send(error.msg)),\r\n        error => res.status(error.code).send(error.msg));\r\n}\r\n\r\n/**\r\n * @api {post} /chpass 03) Change password\r\n * @apiGroup Authentication\r\n * @apiName changePassword\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiParam {string} password new password\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.changePassword = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.user.changePassword(req.client, req.body.password).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(req.t(\"unauthorized\")); }\r\n}\r\n\r\n/**\r\n * @api {post} /forgot 04) Forgot Password\r\n * @apiGroup Authentication\r\n * @apiName forgotPassword\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiSuccess {boolean} result return true if the email was sucessfuly sended\r\n */\r\nexports.forgotPassword = (req, res) => {\r\n    business.user.findByEmail(req.body.email).then(\r\n        user => business.user.createRecoverToken(user).then(\r\n            token => business.user.sendRecoverEmail(user, token).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg)),\r\n        error => {\r\n            if (error.code === 404) res.status(200).json({ result: true })\r\n            else res.status(error.code).send(error.msg)\r\n        });\r\n}\r\n\r\n/**\r\n * @api {post} /reset 05) Reset password\r\n * @apiGroup Authentication\r\n * @apiName resetPassword\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} token valid email\r\n * @apiParam {string} password new password\r\n * @apiSuccess {boolean} result return true if was sucessfuly reseted\r\n */\r\nexports.resetPassword = (req, res) => {\r\n    business.user.verifyRecoverToken(req.body.token).then(\r\n        user => business.user.changePassword(user, req.body.password).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg)),\r\n        error => res.status(error.code).send(error.msg));\r\n}\r\n\r\n/**\r\n * @api {post} /photo 01) Update photo\r\n * @apiGroup User\r\n * @apiName setPhotoFromUser\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiParam {string} photo html name to input type file\r\n * @apiSuccess {boolean} result return true if was sucessfuly reseted\r\n */\r\nexports.setPhoto = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.utils.upload('photo', req.client.id).then(\r\n            upload => upload(req, res, (err) => {\r\n                if (err) res.status(500).send(err.message);\r\n                else business.user.updatePhoto(req.client, req.file.filename).then(\r\n                    () => res.status(200).json({ filename: req.file.filename }),\r\n                    error => res.status(error.code).send(error.msg));\r\n            }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(req.t(\"unauthorized\")); }\r\n}\r\n\r\n/**\r\n * @api {get} /user 02) List\r\n * @apiGroup User\r\n * @apiName listUsers\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiPermission admin\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n    \"users\": [\r\n        {\r\n            \"id\": \"1c64c510-4e17-46f8-bc97-c968d6b2e09b\",\r\n            \"name\": \"Administrator Exemple\",\r\n            \"email\": \"admin@a.aa\",\r\n            \"photo\": null,\r\n            \"is_admin\": 1,\r\n            \"is_doctor\": 0\r\n        },\r\n        {\r\n            \"id\": \"9fc1d895-4a61-43d4-b6fa-96005b2f8e99\",\r\n            \"name\": \"José António\",\r\n            \"email\": \"jose@a.aa\",\r\n            \"photo\": null,\r\n            \"is_admin\": 0,\r\n            \"is_doctor\": 0\r\n        }\r\n    ]\r\n}\r\n */\r\nexports.list = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.user.list().then(\r\n            users => res.status(200).json({ users: users }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(req.t(\"unauthorized\")); }\r\n}\r\n\r\n/**\r\n * @api {get} /user/:id/log 03) Get Logs\r\n * @apiGroup User\r\n * @apiName getLogs\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiPermission admin\r\n * @apiSuccessExample {json} Response example:\r\n    {\r\n        \"logs\": [\r\n            {\r\n                \"datetime\": \"2018-06-18T15:40:14.742Z\",\r\n                \"message\": \"logged in\",\r\n                \"user_id\": \"1c64c510-4e17-46f8-bc97-c968d6b2e09b\",\r\n                \"id\": \"5b27d25e176a610eafa34a43\"\r\n            },\r\n            {\r\n                \"datetime\": \"2018-06-18T15:40:14.789Z\",\r\n                \"message\": \"logged in\",\r\n                \"user_id\": \"1c64c510-4e17-46f8-bc97-c968d6b2e09b\",\r\n                \"id\": \"5b27d25e176a610eafa34a44\"\r\n            },\r\n            {\r\n                \"datetime\": \"2018-06-18T15:40:14.792Z\",\r\n                \"message\": \"logged in\",\r\n                \"user_id\": \"1c64c510-4e17-46f8-bc97-c968d6b2e09b\",\r\n                \"id\": \"5b27d25e176a610eafa34a45\"\r\n            }\r\n        ]\r\n    }\r\n */\r\nexports.getLogs = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.log.getByUser(req.params.id).then(\r\n            logs => {\r\n                logs.forEach(x => {\r\n                    x.toJSON();\r\n                    x.message = req.t(x.message);\r\n                });\r\n                res.status(200).json({ logs: logs });\r\n            },\r\n            error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(req.t(\"unauthorized\")); }\r\n}\r\n\r\n/**\r\n * @api {get} /doctor/patient 04) Get patients\r\n * @apiGroup User\r\n * @apiName getPatientsAsDoctor\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiPermission doctor\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"patients\": [\r\n *      {\r\n *          \"id\": \"a77ea0fe-5e34-4189-9702-95cb69b4cd1d\",\r\n *          \"birthdate\": \"1987-02-28\",\r\n *          \"name\": \"José António\",\r\n *          \"gender\": \"male\",\r\n *          \"since\": \"2018-02-19T14:55:59.000Z\",\r\n *          \"active\": true,\r\n *          \"weight\": 79.6,\r\n *          \"height\": 1.74,\r\n *          \"cc\": \"123456789\",\r\n *          \"nif\": \"987654321\",\r\n *          \"Boards\": [\r\n *              {\r\n *                  \"id\": \"950c8b5e-6f43-4686-b21b-a435e96401b7\",\r\n *                  \"description\": \"kitchen\",\r\n *                  \"mac_addr\": \"00:12:4b:00:06:0d:60:c8\",\r\n *                  \"Boardmodel\": {\r\n *                      \"id\": \"17770821-6f5a-41b3-8ea3-d42c000326c6\",\r\n *                      \"type\": \"environmental\",\r\n *                      \"name\": \"Zolertia RE-Mote\"\r\n *                  },\r\n *                  \"Sensors\": [\r\n *                      {\r\n *                          \"id\": \"9cd77116-6edb-4072-9d66-204fca3d5a07\",\r\n *                          \"last_values\": [ 17, 16, 13, 16, 15 ],\r\n *                          \"last_commit\": \"2018-07-23T05:15:27.000Z\",\r\n *                          \"Sensormodel\": {\r\n *                              \"id\": \"1f8eab67-d39e-439e-b508-6ef6f2c6794a\",\r\n *                              \"transducer\": \"dht22\",\r\n *                              \"measure\": \"humidity\",\r\n *                              \"min_acceptable\": \"30.00000\",\r\n *                              \"max_acceptable\": \"50.00000\",\r\n *                              \"min_possible\": \"20.00000\",\r\n *                              \"max_possible\": \"60.00000\"\r\n *                          }\r\n *                      }\r\n *                  ]\r\n *              }\r\n *          ],\r\n *          \"Profiles\":[\r\n *              {\r\n *                  \"id\": \"950c8b5e-6f43-4686-b21b-a435e96401b7\", \r\n *                  \"measure\": \"body fat\", \r\n *                  \"tag\": \"bodyfat\", \r\n *                  \"min\": 19, \r\n *                  \"max\": 25\r\n *              },\r\n *              {\r\n *                  \"id\": \"32443b5e-28cd-ab43-b86b-a423442401b8\", \r\n *                  \"measure\": \"weight\", \r\n *                  \"tag\": \"weight\", \r\n *                  \"min\": 58, \r\n *                  \"max\": 64\r\n *              }\r\n *          ]\r\n *          \"Vitabox\": {\r\n *              \"id\": \"a6abfa76-68f0-4325-b3ab-6c540a800284\",\r\n *              \"latitude\": \"51.5058372\",\r\n *              \"longitude\": \"-0.1899126\",\r\n *              \"address\": \"Kensington Gardens, London W8 4PX, Reino Unido\"\r\n *          }\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getPatients = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.doctor) {\r\n        business.doctor.getPatients(req.client).then(\r\n            patients => res.status(200).json({ patients: patients }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(req.t(\"unauthorized\")); }\r\n}\r\n\r\n/**\r\n * @api {get} /doctor/request/count 05) Count patient resquests\r\n * @apiGroup User\r\n * @apiName getRequestsCountAsDoctor\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiPermission doctor\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"count\": 12\r\n * }\r\n */\r\nexports.getRequestsCount = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.doctor) {\r\n        business.doctor.countDoctorRequests(req.client.id).then(\r\n            count => res.status(200).json({ count: count }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(req.t(\"unauthorized\")); }\r\n}\r\n\r\n/**\r\n * @api {get} /doctor/request/list 06) Get patient resquests\r\n * @apiGroup User\r\n * @apiName getRequestsAsDoctor\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiPermission doctor\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"requests\": [\r\n *      {\r\n *          \"created_at\": \"2018-07-23T05:15:27.000Z\", \r\n *          \"patient_id\": \"a6abfa76-68f0-4325-b3ab-6c540a800284\", \r\n *          \"patient\":\"José Manuel\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getRequests = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.doctor) {\r\n        business.doctor.listDoctorRequests(req.client.id).then(\r\n            requests => res.status(200).json({ requests: requests }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(req.t(\"unauthorized\")); }\r\n}\r\n","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /sensor 01) Create\r\n * @apiGroup Sensormodel\r\n * @apiName createSensormodel\r\n * @apiDescription create a new sensor.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} transducer transducer name\r\n * @apiParam {string} measure transducer measure\r\n * @apiParam {string} unit transducer measurement unit\r\n * @apiParam {string} tag transducer tag\r\n * @apiParam {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiParam {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiParam {decimal} min_possible minimum possible value to sensor\r\n * @apiParam {decimal} max_possible maximum possible value to sensor\r\n * @apiParam {string} to_read text to text-to-speech\r\n * @apiParamExample {json} Request example:\r\n *      {\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"unit\": \"ºC\",\r\n *           \"tag\": \"temp\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\",\r\n *          \"to_read\": \"temperature\"\r\n *      }\r\n * @apiSuccess {string} id created sensor id\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensormodel.create(req.body).then(\r\n            sensor => res.status(200).json({ id: sensor.id }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /sensor 02) List\r\n * @apiGroup Sensormodel\r\n * @apiName listSensormodels\r\n * @apiDescription list all sensors. \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n *\r\n * @apiPermission admin\r\n * @apiSuccess {array} models list of sensors\r\n * @apiSuccess {string} transducer transducer name\r\n * @apiSuccess {string} measure transducer measure\r\n * @apiSuccess {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiSuccess {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiSuccess {decimal} min_possible minimum possible value to sensor\r\n * @apiSuccess {decimal} max_possible maximum possible value to sensor\r\n * @apiSuccess {string} to_read text to text-to-speech\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"sensors\": [\r\n *      {\r\n *          \"transducer\": \"dht22\",\r\n *          \"measure\":\"temperature\",\r\n *          \"tag\": \"temp\",\r\n *          \"min_acceptable\": \"10\",\r\n *          \"max_acceptable\": \"25\",\r\n *          \"min_possible\": \"-20\",\r\n *          \"max_possible\": \"50\"\r\n *      },\r\n *      {\r\n *          \"transducer\": \"mq-7\",\r\n *          \"measure\":\"carbon_monoxide\",\r\n *          \"tag\": \"mono\",\r\n *          \"min_acceptable\": \"2\",\r\n *          \"max_acceptable\": \"10\",\r\n *          \"min_possible\": \"10\",\r\n *          \"max_possible\": \"500\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.list = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensormodel.list().then(\r\n            sensors => res.status(200).json({ sensors: sensors }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /sensor/:id 03) Update\r\n * @apiGroup Sensormodel\r\n * @apiName updateSensormodel\r\n * @apiDescription update a sensor.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor id to update\r\n * @apiParam {string} transducer transducer name\r\n * @apiParam {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiParam {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiParam {decimal} min_possible minimum possible value to sensor\r\n * @apiParam {decimal} max_possible maximum possible value to sensor\r\n * @apiParamExample {json} Request example:\r\n *      {\r\n *           \"transducer\": \"dht22\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensormodel.update(req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /sensor/:id 04) Delete\r\n * @apiGroup Sensormodel\r\n * @apiName deleteSensormodel\r\n * @apiDescription remove a sensor\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id sensor ID to delete\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.sensormodel.remove(req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}","var business = require('../../business/index').v1_0_0,\r\n    worker = require('../../workers/index');\r\n\r\n/**\r\n * @api {post} /record 1) Receive\r\n * @apiGroup Record\r\n * @apiName createRecord\r\n * @apiDescription receive data from vitabox about it sensors\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox\r\n * @apiParam {decimal} value value catched\r\n * @apiParam {datetime} datetime moment when the value was catched\r\n * @apiParam {string} sensor_id sensor unique ID related to the value\r\n * @apiParam {string} patient_id (optional) patient unique ID related to the value\r\n * @apiParamExample {json} Request example:\r\n * {\r\n *  \"records\":[\r\n *      {\r\n *          \"value\": 10,\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"value\": 13,\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly recorded\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"Vitabox\") {\r\n        if (req.body.records) {\r\n            worker.record.insert(req.body.records).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).json(error.msg));\r\n        } else { res.status(500).send(\"No records to introduce\"); }\r\n    } else { res.status(401).send(req.t(\"unauthorized\")); }\r\n}\r\n\r\n/**\r\n * @api {get} /record/sensor/:id/page/:page 2) List (Page)\r\n * @apiGroup Record\r\n * @apiName listFromPage\r\n * @apiDescription list all records from a sensor in a page\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :id sensor unique ID\r\n * @apiParam {string} :page each page has 25 records, page must be greater or equal to 1\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {boolean} analyzed indicate if data was already analyzed\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccess {string} patient_id patient unique ID related to the value, may be null\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *          \"analyzed\": false,\r\n *          \"patient_id\": null\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *          \"analyzed\": true,\r\n *          \"patient_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listFromPage = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.sensor.find(req.params.id).then(\r\n            sensor => {\r\n                if (sensor.Board.Vitabox) business.vitabox.verifyUser(req.client, sensor.Board.Vitabox).then(\r\n                    () => business.record.listFromPage(req.params.id, req.params.page).then(\r\n                        data => res.status(200).json({ records: data }),\r\n                        error => res.status(error.code).send(error.msg)),\r\n                    error => res.status(error.code).send(error.msg));\r\n                else res.status(500).send(\"This board doesn't belong to the vitabox\");\r\n            }, error => res.status(error.code).send(error.msg));\r\n    } else res.status(401).send(req.t(\"unauthorized\"));\r\n}\r\n\r\n/**\r\n * @api {get} /record/sensor/:sid/patient/:pid/page/:page 3) List to patient (Page)\r\n * @apiGroup Record\r\n * @apiName listFromPageByPatient\r\n * @apiDescription list all records from a sensor in a page related to a patient\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :sid sensor unique ID\r\n * @apiParam {string} :pid patient unique ID\r\n * @apiParam {string} :page each page has 25 records, page must be greater or equal to 1\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {boolean} analyzed indicate if data was already analyzed\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccess {string} patient_id patient unique ID related to the value, may be null\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *          \"analyzed\": false,\r\n *          \"patient_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *          \"analyzed\": true,\r\n *          \"patient_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listFromPageByPatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.sensor.find(req.params.sid).then(\r\n            sensor => {\r\n                if (sensor.Board.Vitabox) if (sensor.Board.Patients.filter(x => x.id === req.params.pid).length > 0)\r\n                    business.vitabox.verifyUser(req.client, sensor.Board.Vitabox).then(\r\n                        () => business.record.listFromPageByPatient(req.params.sid, req.params.pid, req.params.page).then(\r\n                            data => res.status(200).json({ records: data }),\r\n                            error => res.status(error.code).send(error.msg)),\r\n                        error => {\r\n                            if (req.client.doctor) business.patient.verifyDoctor(req.client, req.params.pid).then(\r\n                                () => business.record.listFromPageByPatient(req.params.sid, req.params.pid, req.params.page).then(\r\n                                    data => res.status(200).json({ records: data }),\r\n                                    error => res.status(error.code).send(error.msg)),\r\n                                error => res.status(error.code).send(error.msg));\r\n                            else res.status(error.code).send(error.msg);\r\n                        });\r\n                else res.status(500).send(\"This sensor doesn't belong to the patient\");\r\n                else res.status(500).send(\"This sensor doesn't belong to any vitabox\");\r\n            }, error => res.status(error.code).send(error.msg));\r\n    } else res.status(401).send(req.t(\"unauthorized\"));\r\n}\r\n\r\n/**\r\n * @api {get} /record/sensor/:id/start/:sdate/end/:edate 4) List (Dates)\r\n * @apiGroup Record\r\n * @apiName listBetweenDates\r\n * @apiDescription list all records from a sensor between dates\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :id sensor unique ID\r\n * @apiParam {date} :sdate start date in UTC format\r\n * @apiParam {date} :edate end date in UTC format\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {boolean} analyzed indicate if data was already analyzed\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccess {string} patient_id patient unique ID related to the value, may be null\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *          \"analyzed\": false,\r\n *          \"patient_id\": null\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *          \"analyzed\": true,\r\n *          \"patient_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listBetweenDates = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.sensor.find(req.params.id).then(\r\n            sensor => {\r\n                if (sensor.Board.Vitabox) business.vitabox.verifyUser(req.client, sensor.Board.Vitabox).then(\r\n                    () => business.record.listBetweenDates(req.params.id, req.params.sdate, req.params.edate).then(\r\n                        data => res.status(200).json({ records: data }),\r\n                        error => res.status(error.code).send(error.msg)),\r\n                    error => res.status(500).send(error.message));\r\n                else res.status(500).send(\"This board doesn't belong to the vitabox\");\r\n            }, error => res.status(error.code).send(error.msg));\r\n    } else res.status(401).send(req.t(\"unauthorized\"));\r\n}\r\n\r\n/**\r\n * @api {get} /record/sensor/:sid/patient/:pid/start/:sdate/end/:edate 5) List to patient (Dates)\r\n * @apiGroup Record\r\n * @apiName listBetweenDatesByPatient\r\n * @apiDescription list all records from a sensor between dates related to a patient\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :sid sensor unique ID\r\n * @apiParam {string} :pid patient unique ID\r\n * @apiParam {date} :sdate start date in UTC format\r\n * @apiParam {date} :edate end date in UTC format\r\n * @apiSuccess {array} records records list\r\n * @apiSuccess {decimal} value value catched\r\n * @apiSuccess {datetime} datetime moment when the value was catched\r\n * @apiSuccess {boolean} analyzed indicate if data was already analyzed\r\n * @apiSuccess {string} sensor_id sensor unique ID related to the value\r\n * @apiSuccess {string} patient_id patient unique ID related to the value, may be null\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"records\": [\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n *          \"value\": 10,\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *          \"analyzed\": false,\r\n *          \"patient_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      },\r\n *      {\r\n *          \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n *          \"value\": 13,\r\n *          \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\",\r\n *          \"analyzed\": true,\r\n *          \"patient_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.listBetweenDatesByPatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.sensor.find(req.params.sid).then(\r\n            sensor => {\r\n                if (sensor.Board.Vitabox) if (sensor.Board.Patients.filter(x => x.id === req.params.pid).length > 0)\r\n                    business.vitabox.verifyUser(req.client, sensor.Board.Vitabox).then(\r\n                        () => business.record.listBetweenDatesByPatient(req.params.sid, req.params.pid, req.params.sdate, req.params.edate).then(\r\n                            data => res.status(200).json({ records: data }),\r\n                            error => res.status(error.code).send(error.msg)),\r\n                        error => {\r\n                            if (req.client.doctor) business.patient.verifyDoctor(req.client, req.params.pid).then(\r\n                                () => business.record.listBetweenDatesByPatient(req.params.sid, req.params.pid, req.params.sdate, req.params.edate).then(\r\n                                    data => res.status(200).json({ records: data }),\r\n                                    error => res.status(error.code).send(error.msg)),\r\n                                err => res.status(401).send(req.t(\"unauthorized\")));\r\n                            else res.status(error.code).send(error.msg);\r\n                        });\r\n                else res.status(500).send(\"This sensor doesn't belong to the patient\");\r\n                else res.status(500).send(\"This sensor doesn't belong to any vitabox\");\r\n            }, error => res.status(error.code).send(error.msg));\r\n    } else res.status(401).send(req.t(\"unauthorized\"));\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {post} /profilemodel 01) Create\r\n * @apiGroup Profilemodel\r\n * @apiName createProfileModel\r\n * @apiDescription create a new profile model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} name profile model name\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"MySignals Balance\"\r\n *     }\r\n * @apiSuccess {string} id created profile model id\r\n */\r\nexports.create = (req, res) => {\r\n  if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n    business.profilemodel.create(req.body.name).then(\r\n      model => res.status(200).json({ id: model.id }),\r\n      error => res.status(error.code).send(error.msg));\r\n  } else {\r\n    res.status(401).send(req.t(\"unauthorized\"));\r\n  }\r\n}\r\n\r\n/**\r\n * @api {get} /profilemodel 02) List\r\n * @apiGroup Profilemodel\r\n * @apiName listProfileModel\r\n * @apiDescription list all profile models.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiSuccess {array} profiles list of profile models\r\n * @apiSuccess {string} id id of each profile model\r\n * @apiSuccess {string} name profile name\r\n * @apiSuccess {array} measures measures list of each profile\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n * \"profiles\": [\r\n        {\r\n            \"measures\": [\r\n                {\r\n                    \"min\": 90,\r\n                    \"max\": 120,\r\n                    \"tag\": \"pulse\",\r\n                    \"measure\": \"pulsação arterial\",\r\n                    \"id\": \"5b58452ca0b2a007d78f7974\"\r\n                },\r\n                {\r\n                    \"min\": 95,\r\n                    \"max\": 100,\r\n                    \"tag\": \"spo2\",\r\n                    \"measure\": \"oximetria do pulso\",\r\n                    \"id\": \"5b5845369e5e0807dc694fde\"\r\n                }\r\n            ],\r\n            \"name\": \"Diabetico\",\r\n            \"id\": \"5b5845209e5e0807dc694fdd\"\r\n        }\r\n    ]\r\n * }\r\n */\r\nexports.list = (req, res) => {\r\n  if (req.client && req.client.constructor.name === \"User\") {\r\n    business.profilemodel.list().then(\r\n      models => res.status(200).json({ profiles: models }),\r\n      error => res.status(error.code).send(error.msg));\r\n  } else {\r\n    res.status(401).send(req.t(\"unauthorized\"));\r\n  }\r\n}\r\n\r\n/**\r\n * @api {put} /profilemodel/:id 03) Update name\r\n * @apiGroup Profilemodel\r\n * @apiName updateProfileModel\r\n * @apiDescription list all profile models.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id profile id\r\n * @apiParam {string} name profile name\r\n * @apiSuccess {boolean} result returns true if was successfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n  if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n    business.profilemodel.update(req.params.id, req.body.name).then(\r\n      () => res.status(200).json({ result: true }),\r\n      error => res.status(error.code).send(error.msg));\r\n  } else {\r\n    res.status(401).send(req.t(\"unauthorized\"));\r\n  }\r\n}\r\n\r\n/**\r\n * @api {delete} /profilemodel/:id 04) Remove\r\n * @apiGroup Profilemodel\r\n * @apiName deleteProfileModel\r\n * @apiDescription remove a profile model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id profile model id\r\n * @apiSuccess {boolean} result returns true if was successfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n  if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n    business.profilemodel.remove(req.params.id).then(\r\n      () => res.status(200).json({ result: true }),\r\n      error => res.status(error.code).send(error.msg));\r\n  } else {\r\n    res.status(401).send(req.t(\"unauthorized\"));\r\n  }\r\n}\r\n\r\n/**\r\n * @api {post} /profilemodel/:id/measure 05) Add measure\r\n * @apiGroup Profilemodel\r\n * @apiName AddMaesureToProfileModel\r\n * @apiDescription add measure to profile model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id profile model id\r\n * @apiParam {string} tag measure tag\r\n * @apiParam {string} measure measure name\r\n * @apiParam {decimal} min minimum acceptable value\r\n * @apiParam {decimal} max maximum acceptable value\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *        \"min\": \"10\",\r\n *        \"max\": \"50\",\r\n *        \"tag\": \"musclemass\",\r\n *        \"measure\": \"muscle mass\"\r\n *     }\r\n * @apiSuccess {string} id created profile measure id\r\n */\r\nexports.AddMeasure = (req, res) => {\r\n  if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n    business.profilemodel.addMeasure(req.params.id, req.body).then(\r\n      model => res.status(200).json({ id: model }),\r\n      error => res.status(error.code).send(error.msg));\r\n  } else {\r\n    res.status(401).send(req.t(\"unauthorized\"));\r\n  }\r\n}\r\n\r\n/**\r\n * @api {delete} /profilemodel/:pid/measure/:mid 06) Remove measure\r\n * @apiGroup Profilemodel\r\n * @apiName removeMeasureFromProfileModel\r\n * @apiDescription remove meaure from a profile model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :pid profile model id\r\n * @apiParam {string} :mid measure model id\r\n * @apiSuccess {boolean} result returns true if was successfuly removed\r\n */\r\nexports.removeMeasure = (req, res) => {\r\n  if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n    business.profilemodel.removeMeasure(req.params.pid, req.params.mid).then(\r\n      () => res.status(200).json({ result: true }),\r\n      error => res.status(error.code).send(error.msg));\r\n  } else {\r\n    res.status(401).send(req.t(\"unauthorized\"));\r\n  }\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {put} patient/:id/biometric 01) Update Biomatric Data\r\n * @apiGroup Patient\r\n * @apiName updateProfilesToPatient\r\n * @apiDescription update height and weight from patient.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission doctor\r\n * @apiParam {string} :id patient id\r\n * @apiParam {decimal} height patient height\r\n * @apiParam {decimal} weight patient weight\r\n * @apiParam {string} profile clinical profile description\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"height\": 1.72,\r\n *          \"weight\": 78.2m\r\n *          \"profile\": \"Diabetes tipo 1\"\r\n *     }\r\n * @apiSuccess {boolean} result returns true if was successfuly updated\r\n */\r\nexports.updateBiometric = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.doctor) {\r\n        business.patient.verifyDoctor(req.client, req.params.id).then(\r\n            () => business.patient.setBiometricData(req.params.id, req.body).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(500).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} patient/:paid/profile/:prid 02) Update profile\r\n * @apiGroup Patient\r\n * @apiName updateProfilesToPatient\r\n * @apiDescription update profile from patient.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission doctor\r\n * @apiParam {string} :paid patient id\r\n * @apiParam {string} :prid profile id to update\r\n * @apiParam {decimal} min minimum value acceptable\r\n * @apiParam {decimal} max maximum value acceptable\r\n * @apiSuccess {boolean} result returns true if was successfuly updated\r\n */\r\nexports.updateProfile = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.doctor) {\r\n        business.patient.verifyDoctor(req.client, req.params.paid).then(\r\n            () => business.profile.update(req.params.prid, req.body.min, req.body.max).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(500).send(\"cannot create profiles\")),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /patient/:id/doctor 03) Add Doctor\r\n * @apiGroup Patient\r\n * @apiName addDoctor\r\n * @apiDescription add doctor to a specific patient if the requester is sponsor of him.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id patient unique ID\r\n * @apiParam {string} email email of the user to add\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"email\": \"user-example@some.thing\"\r\n *     }\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  doctor:{\r\n *      \"id\":\"585402ef-68dd-44a4-a44b-04152e659d11\",\r\n *      \"name\":\"Jose Manel\",\r\n *      \"email\": \"jmanfns@a.aa\"\r\n *  }\r\n * }\r\n */\r\nexports.addDoctor = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.user.findByEmail(req.body.email).then(\r\n            user => business.patient.find(req.params.id).then(\r\n                patient => business.vitabox.verifySponsor(req.client, patient.vitabox_id).then(\r\n                    () => business.patient.addDoctor(patient, user.id).then(\r\n                        () => business.warning.setWarningDoctor(user.id, patient.id).then(\r\n                            () => business.doctor.setHasDoctor(user).then(\r\n                                () => res.status(200).json({ doctor: { id: user.id, name: user.name, email: user.email, since: new Date() } }),\r\n                                error => res.status(error.code).send(error.msg)),\r\n                            error => res.status(error.code).send(error.msg)),\r\n                        error => res.status(error.code).send(error.msg)),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /patient/:id/doctor 04) Accept as Doctor\r\n * @apiGroup Patient\r\n * @apiName acceptAsDoctor\r\n * @apiDescription doctor accept patient\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox user\r\n * @apiParam {string} :id patient unique ID\r\n * @apiParam {boolean} accept flag indicating if accept patient\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"accept\": true\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.acceptAsDoctor = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.doctor) {\r\n        business.doctor.acceptAsDoctor(req.client.id, req.params.id, req.body.accept).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /patient/:id/doctor 05) Remove Doctor\r\n * @apiGroup Patient\r\n * @apiName removeDoctor\r\n * @apiDescription remove doctor from a patient if the requester is sponsor of him.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission vitabox sponsor\r\n * @apiParam {string} :id patient unique ID\r\n * @apiParam {string} doctor_id doctor unique ID\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"doctor_id\": \"9f846ccb-e5a0-4bd4-94ac-621847dfa780\"\r\n *     }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeDoctor = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.patient.find(req.params.id).then(\r\n            patient => business.vitabox.verifySponsor(req.client, patient.vitabox_id).then(\r\n                () => business.patient.removeDoctor(patient, req.body.doctor_id).then(\r\n                    () => business.warning.removeWarningDoctor(req.body.doctor_id, req.params.id).then(\r\n                        () => business.doctor.setHasDoctor(req.client).then(\r\n                            () => res.status(200).json({ result: true }),\r\n                            error => res.status(error.code).send(error.msg)),\r\n                        error => res.status(error.code).send(error.msg)),\r\n                    error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} /patient/:id/board 06) Get Boards\r\n * @apiGroup Patient\r\n * @apiName getBoardsFromPatient\r\n * @apiDescription Get boards from a patient\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiSuccessExample {json} Request example:\r\n * {\r\n *  \"boards\": [\r\n *      {\r\n *          \"id\": \"950c8b5e-6f43-4686-b21b-a435e96401b7\",\r\n *          \"description\": \"kitchen\",\r\n *          \"mac_addr\": \"00:12:4b:00:06:0d:60:c8\",\r\n *          \"Boardmodel\": {\r\n *              \"id\": \"17770821-6f5a-41b3-8ea3-d42c000326c6\",\r\n *              \"type\": \"environmental\",\r\n *              \"name\": \"Zolertia RE-Mote\"\r\n *          },\r\n *          \"Sensors\": [\r\n *              {\r\n *                  \"id\": \"9cd77116-6edb-4072-9d66-204fca3d5a07\",\r\n *                  \"last_values\": [ 17, 16, 13, 16, 15 ],\r\n *                  \"last_commit\": \"2018-07-23T05:15:27.000Z\",\r\n *                  \"Sensormodel\": {\r\n *                      \"id\": \"1f8eab67-d39e-439e-b508-6ef6f2c6794a\",\r\n *                      \"transducer\": \"dht22\",\r\n *                      \"measure\": \"humidity\",\r\n *                      \"min_acceptable\": \"30.00000\",\r\n *                      \"max_acceptable\": \"50.00000\",\r\n *                      \"min_possible\": \"20.00000\",\r\n *                      \"max_possible\": \"60.00000\"\r\n *                  }\r\n *              }\r\n *          ]\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getBoardsFromPatient = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.patient.getBoards(req.params.id).then(\r\n            result => res.status(200).json({ boards: result }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /patient/:id/photo 07) Update photo\r\n * @apiGroup Patient\r\n * @apiName setPhotoFromPatient\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiPermission sponsor\r\n * \r\n * @apiParam {string} :id patient id\r\n * @apiParam {string} photo html name to input type file\r\n * @apiSuccess {boolean} result return true if was sucessfuly reseted\r\n */\r\nexports.setPhoto = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.patient.find(req.params.id).then(\r\n            patient => business.vitabox.verifySponsor(req.client, patient.vitabox_id).then(\r\n                () => business.utils.upload('photo', req.client.id).then(\r\n                    upload => upload(req, res, (err) => {\r\n                        if (err) res.status(500).send(err.message);\r\n                        else business.patient.updatePhoto(req.client, req.file.filename).then(\r\n                            () => res.status(200).json({ filename: req.file.filename }),\r\n                            error => res.status(error.code).send(error.msg));\r\n                    }), error => res.status(error.code).send(error.msg)),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(req.t(\"unauthorized\")); }\r\n}\r\n\r\n/**\r\n * @api {put} /patient/:id/exam 08) Update Exam\r\n * @apiGroup Patient\r\n * @apiName updateExamFrequency\r\n * @apiDescription update exam frequency to patient\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin, sponsor\r\n * @apiParam {string} :id patient id\r\n * @apiParam {string} board_id board id\r\n * @apiParam {integer} frequency time in days between exams (if null removes the scheduler)\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"board_id\":\"5d93585b-f511-4fa8-b69e-692c2474d5e8\",\r\n *          \"frequency\": 2\r\n *     }\r\n * @apiSuccess {booleam} result returns true if was successfuly updated\r\n */\r\nexports.updateExamFrequency = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.doctor) {\r\n        business.patient.verifyDoctor(req.client, req.params.id).then(\r\n            () => business.board.updateFrequency(req.body.board_id, req.params.id, req.body.frequency).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(500).send(\"cannot update exame schedule\")),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n","var business = require('../../business/index').v1_0_0,\r\n    path = require(\"path\");\r\n\r\n// exports.fileUpload = (req, res) => {\r\n//     if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n//         business.utils.upload('file').then(\r\n//             upload => upload(req, res, (err) => {\r\n//                 let path=req.file.path.split('/');\r\n//                 if (err) res.status(500).send(err.message);\r\n//                 else res.status(200).json({ filename: path[path.length-1] });\r\n//             }),\r\n//             error => res.status(error.code).send(error.msg));\r\n//     } else {\r\n//         res.status(401).send(\"Unauthorized\");\r\n//     }\r\n// }\r\n\r\n/**\r\n * @api {get} /file/:id 01) Download\r\n * @apiGroup Files\r\n * @apiName fileDownload\r\n * @apiVersion 1.0.0\r\n * @apiError {number} statusCode http status code: 500 to business logic errors and 401 to unauthorized\r\n * @apiError {string} statusMessage error description\r\n * @apiParam {String} :id filename\r\n */\r\nexports.fileDownload = (req, res) => {\r\n    business.utils.download(req.params.id).then(\r\n        download => {\r\n            res.writeHead(200, download.header);\r\n            res.end(download.file, 'binary');\r\n        }, error => res.status(error.code).send(error.msg));\r\n}\r\n\r\n// To development\r\n\r\nexports.destroyAll = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.utils.deleteAll().then(\r\n            () => res.status(200).json({ success: true }),\r\n            error => res.status(500).send(error.msg)\r\n        );\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\nvar broker = require(\"../../workers/index\");\r\nexports.ampqSend = (req, res) => {\r\n    let records = [\r\n        {\r\n            \"value\": 10,\r\n            \"datetime\": \"2018-03-02T15:40:23.000Z\",\r\n            \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n        },\r\n        {\r\n            \"value\": 13,\r\n            \"datetime\": \"2018-03-02T15:36:26.000Z\",\r\n            \"sensor_id\": \"2a2f5839-6b68-41a6-ada7-f9cd4c66cf38\"\r\n        }\r\n    ]\r\n    broker.record.insert(records).then(\r\n        () => res.status(200).json({ success: true }),\r\n        error => res.status(500).send(error.msg)\r\n    );\r\n}\r\n\r\nexports.testDb = (req, res) => {\r\n    business.utils.deleteAll().then(\r\n        () => business.utils.testSeed().then(\r\n            () => res.status(200).json({ success: true }),\r\n            error => res.status(500).send(error.msg)),\r\n        error => res.status(500).send(error.msg));\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\n/**\r\n * @api {get} /error/:page 01) List\r\n * @apiGroup Error\r\n * @apiName listAllErrors\r\n * @apiDescription get all errors\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n *  \"errors\":[\r\n *    {\r\n *      \"id\": \"0e35251fdd9c4928-9b8d\",\r\n *      \"title\": \"Os valores do sensor estão fora dos limites possíveis\",\r\n *      \"datetime\": \"2018-02-19T14:55:59.000Z\",\r\n *      \"message\": \"\",\r\n *      \"seen_date\": \"2018-02-19T15:13:23.000Z\",\r\n *      \"seen_user\":\"Administrator Name\"\r\n *    },\r\n *    {\r\n *      \"id\": \"0e35251fdd9c4928-9b8d\",\r\n *      \"title\": \"Os valores do sensor estão fora dos limites possíveis\",\r\n *      \"datetime\": \"2018-02-19T14:55:59.000Z\",\r\n *      \"message\": \"\",\r\n *      \"seen_date\": null,\r\n *      \"seen_user\": null\r\n *    }\r\n *  ]\r\n * }\r\n */\r\nexports.list = (req, res) => {\r\n  if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n    business.error.getFromPage(req.params.page).then(\r\n      data => {\r\n        data.forEach(x => {\r\n          x.toJSON();\r\n          x.title = req.t(x.title);\r\n        });\r\n        res.status(200).json({ errors: data });\r\n      },\r\n      error => res.status(error.code).send(error.msg));\r\n  } else {\r\n    res.status(401).send(req.t(\"unauthorized\"));\r\n  }\r\n}\r\n\r\n/**\r\n* @api {put} /error/:id 02) Check\r\n* @apiGroup Error\r\n* @apiName checkError\r\n* @apiDescription get all warnings from vitabox\r\n* @apiVersion 1.0.0\r\n* @apiUse box\r\n* \r\n* @apiPermission admin\r\n* @apiParam {string} :id error unique ID\r\n* @apiSuccess {boolean} result return true if was sucessfuly updated\r\n*/\r\nexports.check = (req, res) => {\r\n  if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n    business.error.setCheck(req.params.id, req.client.id).then(\r\n      () => res.status(200).json({ result: true }),\r\n      error => res.status(error.code).send(error.msg));\r\n  } else {\r\n    res.status(401).send(req.t(\"unauthorized\"));\r\n  }\r\n}","var business = require('../../business/index').v1_0_0,\r\n    worker = require('../../workers/index');\r\n\r\n/**\r\n * @api {post} /board 01) Create Board\r\n * @apiGroup Board\r\n * @apiName createBoard\r\n * @apiDescription register a new board on the system\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} model model id of the board\r\n * @apiParam {string} mac_address board MAC address\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"model\":\"5d93585b-f511-4fa8-b69e-692c2474d5e8\",\r\n *          \"mac_addr\": \"00:12:4b:00:06:0d:60:fb\"\r\n *     }\r\n * @apiSuccess {string} id return the id\r\n * @apiSuccess {string} mac_addr return the mac address\r\n * @apiSuccess {string} password return the generated password\r\n * @apiSuccessExample {json} Response example:\r\n *     {\r\n *          \"id\":\"c293462b-fac1-4f67-b69e-47841274d5e8\",\r\n *          \"mac_addr\": \"00:12:4b:00:06:0d:60:fb\",\r\n *          \"password\": \"aj34Ah1DA1\"\r\n *     }\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.board.create(req.body).then(\r\n            obj => {\r\n                business.sensor.create(obj.board.id, req.body.model).then(\r\n                    () => res.status(200).json({ id: obj.board.id, mac_addr: obj.board.mac_addr, password: obj.password }),\r\n                    error => res.status(error.code).send(error.msg));\r\n            }, error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(\"Unauthorized\"); }\r\n}\r\n\r\n\r\n/**\r\n * @api {put} /board/:id 02) Change MAC\r\n * @apiGroup Board\r\n * @apiName exchangeBoard\r\n * @apiDescription alter MAC address to board exchange\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} id board id to exchange\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"mac_addr\":\"5d93585b-f511-4fa8-b69e-692c2474d5e8\"\r\n *     }\r\n * @apiSuccess {booleam} result returns true if was successfuly updated\r\n */\r\nexports.exchange = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.board.switchMac(req.params.id, req.body.mac_addr).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(\"Unauthorized\"); }\r\n}\r\n\r\n/**\r\n * @api {get} /board/:id 03) Get Board\r\n * @apiGroup Board\r\n * @apiName getBoardById\r\n * @apiDescription get Board\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id model id of the board\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n    \"board\": {\r\n        \"id\": \"6b6899af-89bf-453b-a0ce-52523bb6aefd\",\r\n        \"mac_addr\": \"45:44:54:65:65:16:51:31\",\r\n        \"Boardmodel\": {\r\n            \"id\": \"c5e10ee8-9d80-43e0-af6c-29e95a0ca66e\",\r\n            \"type\": \"non-wearable\",\r\n            \"name\": \"MySignals Blood Pressure\"\r\n        },\r\n        \"Sensors\": [\r\n            {\r\n                \"id\": \"9cd77116-6edb-4072-9d66-204fca3d5a07\",\r\n                \"last_commit\": \"2018-07-23T05:15:27.000Z\",\r\n                \"last_values\": [  17, 16, 13, 16, 15 ],\r\n                \"Sensormodel\": {\r\n                    \"id\": \"1f8eab67-d39e-439e-b508-6ef6f2c6794a\",\r\n                    \"transducer\": \"dht22\",\r\n                    \"measure\": \"humidity\",\r\n                    \"min_acceptable\": \"30.00000\",\r\n                    \"max_acceptable\": \"50.00000\",\r\n                    \"min_possible\": \"20.00000\",\r\n                    \"max_possible\": \"60.00000\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n  }\r\n */\r\nexports.getById = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.board.get(req.params.id).then(\r\n            obj => res.status(200).json({ board: obj }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else { res.status(401).send(req.t(\"unauthorized\")); }\r\n}\r\n\r\n/**\r\n * @api {post} /board/:id/patient 04) Add Patient\r\n * @apiGroup Board\r\n * @apiName addPatientToBoard\r\n * @apiDescription Associate a patient with a board\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin, sponsor\r\n * @apiParam {string} patient_id patient id to add\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"patient_id\":\"5d93585b-f511-4fa8-b69e-692c2474d5e8\"\r\n *     }\r\n * @apiSuccess {booleam} result returns true if was successfuly added\r\n */\r\nexports.addPatientToBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.board.get(req.params.id).then(\r\n            board => {\r\n                if (req.client.admin) business.board.addPatient(board, req.body.patient_id).then(\r\n                    () => Promise.all(board.Sensors.map(x => business.profile.create({\r\n                        patient_id: req.body.patient_id,\r\n                        min: x.Sensormodel.min_acceptable,\r\n                        max: x.Sensormodel.max_acceptable,\r\n                        tag: x.Sensormodel.tag,\r\n                        measure: x.Sensormodel.measure\r\n                    }))).then(\r\n                        () => res.status(200).json({ result: true }),\r\n                        error => res.status(500).send(\"could not set patient profile\")),\r\n                    error => res.status(error.code).send(error.msg));\r\n                else business.vitabox.verifySponsor(req.client, board.vitabox_id).then(\r\n                    vitabox => business.board.addPatient(board, req.body.patient_id).then(\r\n                        () => Promise.all(board.Sensors.map(x => business.profile.create({\r\n                            patient_id: req.body.patient_id,\r\n                            min: x.Sensormodel.min_acceptable,\r\n                            max: x.Sensormodel.max_acceptable,\r\n                            tag: x.Sensormodel.tag,\r\n                            measure: x.Sensormodel.measure\r\n                        }))).then(\r\n                            () => res.status(200).json({ result: true }),\r\n                            error => res.status(500).send(\"could not set patient profile\")),\r\n                        error => res.status(error.code).send(error.msg)),\r\n                    error => res.status(error.code).send(error.msg))\r\n            }, error => res.status(error.code).send(error.msg));\r\n    } else res.status(401).send(req.t(\"unauthorized\"));\r\n}\r\n\r\n/**\r\n * @api {delete} /board/:id/patient 05) Remove Patient\r\n * @apiGroup Board\r\n * @apiName removePatientFromBoard\r\n * @apiDescription Disassociate a patient from a board\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin, sponsor\r\n * @apiParam {string} patient_id patient id to add\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"patient_id\":\"5d93585b-f511-4fa8-b69e-692c2474d5e8\"\r\n *     }\r\n * @apiSuccess {booleam} result returns true if was successfuly removed\r\n */\r\nexports.removePatientFromBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.board.get(req.params.id).then(\r\n            board => {\r\n                if (req.client.admin) board.removePatient(req.body.patient_id).then(\r\n                    () => Promise.all(board.Sensors.map(x => business.profile.remove(req.body.patient_id, x.Sensormodel.tag))).then(\r\n                        () => worker.record.removeByBoardPatient(req.body.patient_id, req.params.id).then(\r\n                            () => res.status(200).json({ result: true }),\r\n                            error => res.status(error.code).send(error.msg)),\r\n                        error => res.status(500).send(\"could not remove patient profile\")),\r\n                    error => res.status(500).send(error.message));\r\n                else business.vitabox.verifySponsor(req.client, board.vitabox_id).then(\r\n                    () => board.removePatient(req.body.patient_id).then(\r\n                        () => Promise.all(board.Sensors.map(x => business.profile.remove(req.body.patient_id, x.Sensormodel.tag))).then(\r\n                            () => worker.record.removeByBoardPatient(req.body.patient_id, req.params.id).then(\r\n                                () => res.status(200).json({ result: true }),\r\n                                error => res.status(error.code).send(error.msg)),\r\n                            error => res.status(500).send(\"could not remove patient profile\")),\r\n                        error => res.status(500).send(error.message)),\r\n                    error => res.status(error.code).send(error.msg))\r\n            }, error => res.status(error.code).send(error.msg));\r\n    } else res.status(401).send(req.t(\"unauthorized\"));\r\n}\r\n\r\n/**\r\n * @api {get} /board/:id/sensor 06) Get Sensors\r\n * @apiGroup Board\r\n * @apiName getSensorsFromBoard\r\n * @apiDescription Get sensors from a board\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission user\r\n * @apiParam {string} :id board id\r\n * @apiSuccessExample {json} Response example:\r\n * {\r\n    \"sensors\": [\r\n        {\r\n            \"id\": \"9cd77116-6edb-4072-9d66-204fca3d5a07\",\r\n            \"last_commit\": \"2018-07-23T05:15:27.000Z\",\r\n            \"last_values\": [  17, 16, 13, 16, 15 ],\r\n            \"Sensormodel\": {\r\n                \"id\": \"1f8eab67-d39e-439e-b508-6ef6f2c6794a\",\r\n                \"transducer\": \"dht22\",\r\n                \"measure\": \"humidity\",\r\n                \"min_acceptable\": \"30.00000\",\r\n                \"max_acceptable\": \"50.00000\",\r\n                \"min_possible\": \"20.00000\",\r\n                \"max_possible\": \"60.00000\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n */\r\nexports.getSensorsFromBoard = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.board.getSensors(req.params.id).then(\r\n            sensors => res.status(200).json({ sensors: sensors }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}","var broker = require(\"./broker\");\r\n\r\nexports.log = (user_id, msg) => {\r\n  return new Promise((resolve, reject) => {\r\n    broker.getChannel().sendToQueue(\r\n      'log',                                                     // queue name\r\n      new Buffer(JSON.stringify({ user: user_id, msg: msg })),    // data\r\n      { persistent: true }                                        // options\r\n    );\r\n    resolve();\r\n  });\r\n}\r\n\r\nexports.update = (vitabox_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    broker.getChannel().publish( vitabox_id, '', new Buffer(JSON.stringify(\"update\")));\r\n    resolve();\r\n  });\r\n}","var broker = require(\"./broker\");\r\n\r\nexports.insert = (records) => {\r\n  return new Promise((resolve, reject) => {\r\n    broker.getChannel().sendToQueue(\r\n      'insert_record',                                  // queue name\r\n      new Buffer(JSON.stringify({ records: records })), // data\r\n      { persistent: true }                              // options\r\n    );\r\n    resolve();\r\n  });\r\n}\r\n\r\nexports.removeByBoard = (board_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    broker.getChannel().sendToQueue(\r\n      'remove_record_by_board',                           // queue name\r\n      new Buffer(JSON.stringify({ board_id: board_id })), // data\r\n      { persistent: true }                                // options\r\n    );\r\n    resolve();\r\n  });\r\n}\r\n\r\nexports.removeByPatient = (patient_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    broker.getChannel().sendToQueue(\r\n      'remove_record_by_patient',                             // queue name\r\n      new Buffer(JSON.stringify({ patient_id: patient_id})),  // data\r\n      { persistent: true }                                    // options\r\n    );\r\n    resolve();\r\n  });\r\n}\r\n\r\nexports.removeBySensors = (sensor_ids) => {\r\n  return new Promise((resolve, reject) => {\r\n    broker.getChannel().sendToQueue(\r\n      'remove_record_by_sensors',                             // queue name\r\n      new Buffer(JSON.stringify({ sensor_ids: sensor_ids })), // data\r\n      { persistent: true }                                    // options\r\n    );\r\n    resolve();\r\n  });\r\n}\r\n\r\nexports.removeByBoardPatient = (patient_id, board_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    broker.getChannel().sendToQueue(\r\n      'remove_record_by_board_patient',                                           // queue name\r\n      new Buffer(JSON.stringify({ patient_id: patient_id, board_id: board_id })), // data\r\n      { persistent: true }                                                        // options\r\n    );\r\n    resolve();\r\n  });\r\n}\r\n\r\n","var business = require('../../business/index').v1_0_0,\r\n    worker = require('../../workers/index');\r\n\r\n/**\r\n * @api {post} /boardmodel 01) Create\r\n * @apiGroup Boardmodel\r\n * @apiName createBoardModel\r\n * @apiDescription create a new board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} name board model name\r\n * @apiParam {string} type board type, must be 'environmental', 'wearable' or 'non-wearable'\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"Zolertia RE-Mote\",\r\n *          \"type\": \"environmental\"\r\n *     }\r\n * @apiSuccess {string} id created board model id\r\n */\r\nexports.create = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.create(req.body).then(\r\n            model => res.status(200).json({ id: model.id }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n* @api {get} /boardmodel 02) List\r\n* @apiGroup Boardmodel\r\n* @apiName listsBoardsModel\r\n* @apiDescription list all board models. \r\n* @apiVersion 1.0.0\r\n* @apiUse box\r\n*\r\n* @apiPermission admin\r\n* @apiSuccess {array} models list of board models\r\n* @apiSuccess {string} id id of each board model\r\n* @apiSuccess {string} type type of the model (must be 'environmental', 'wearable' or 'non-wearable')\r\n* @apiSuccess {string} name name of the model\r\n* @apiSuccessExample {json} Response example:\r\n* {\r\n*  \"models\": [\r\n*      {\r\n*          \"id\": \"5d93585b-f511-4fa8-b69e-692c2474d5e8\",\r\n*          \"type\": \"non-wearable\",\r\n*          \"name\": \"MySignals\"\r\n*      },\r\n*      {\r\n*          \"id\": \"d4710130-4c8c-4ade-96c7-0d5c00738eda\",\r\n*          \"type\": \"environmental\",\r\n*          \"name\": \"Zolertia RE-Mote\"\r\n*      }\r\n*  ]\r\n* }\r\n*/\r\nexports.list = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.list().then(\r\n            models => res.status(200).json({ models: models }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {put} /boardmodel/:id 03) Update\r\n * @apiGroup Boardmodel\r\n * @apiName updateBoardModel\r\n * @apiDescription update a board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model id to update\r\n * @apiParam {string} name board model name\r\n * @apiParamExample {json} Request example:\r\n *     {\r\n *          \"name\": \"Zolertia RE-Mote\"\r\n *     }\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly updated\r\n */\r\nexports.update = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.update(req.params.id, req.body).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} /boardmodel/:id 04) Delete\r\n * @apiGroup Boardmodel\r\n * @apiName deleteBoardModel\r\n * @apiDescription remove a board model.\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model id to delete\r\n * @apiSuccess {boolean} result return \"true\" if was sucessfuly removed\r\n */\r\nexports.delete = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.remove(req.params.id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {post} /boardmodel/:id/sensor 05) Add Sensor\r\n * @apiGroup Boardmodel\r\n * @apiName setSensors\r\n * @apiDescription add sensors to a board model\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {array} sensor_id sensors unique ID\r\n * @apiParamExample {json} Request example:\r\n * {\r\n *  \"sensor_id\": \"75a60f5f-ef3d-4556-9cdd-981894c8f1dc\"\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly added\r\n */\r\nexports.setSensor = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.setSensor(req.params.id, req.body.sensor_id).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {get} boardmodel/:id/sensor 06) Get Sensors\r\n * @apiGroup Boardmodel\r\n * @apiName getSensors\r\n * @apiDescription list sensors of a board model\r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model unique ID\r\n * @apiSuccess {array} models list of sensors\r\n * @apiSuccess {string} transducer transducer name\r\n * @apiSuccess {string} measure transducer measure\r\n * @apiSuccess {decimal} min_acceptable minimum acceptable value to sensor\r\n * @apiSuccess {decimal} max_acceptable maximum acceptable value to sensor\r\n * @apiSuccess {decimal} min_possible minimum possible value to sensor\r\n * @apiSuccess {decimal} max_possible maximum possible value to sensor\r\n * @apiSuccessExample {json} Request example:\r\n * {\r\n *  \"sensors\": [\r\n *      {\r\n *           \"id\": \"e783b552-567f-499b-b480-9d373fe62a17\"\r\n *           \"transducer\": \"dht22\",\r\n *           \"measure\":\"temperature\",\r\n *           \"min_acceptable\": \"10\",\r\n *           \"max_acceptable\": \"25\",\r\n *           \"min_possible\": \"-20\",\r\n *           \"max_possible\": \"50\"\r\n *      }\r\n *  ]\r\n * }\r\n */\r\nexports.getSensors = (req, res) => {\r\n    if (req.client && req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.getSensors(req.params.id).then(\r\n            sensors => res.status(200).json({ sensors: sensors }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @api {delete} boardmodel/:id/sensor 07) Remove Sensor\r\n * @apiGroup Boardmodel\r\n * @apiName removeSensor\r\n * @apiDescription remove sensor from a board model \r\n * @apiVersion 1.0.0\r\n * @apiUse box\r\n * \r\n * @apiPermission admin\r\n * @apiParam {string} :id board model unique ID\r\n * @apiParam {string} sensor_id sensor to remove ID\r\n * @apiParamExample {json} Response example:\r\n * {\r\n *  \"sensor_id\": \"00397579-0a11-42ee-b522-b25e11630eda\"\r\n * }\r\n * @apiSuccess {boolean} result return true if was sucessfuly removed\r\n */\r\nexports.removeSensor = (req, res) => {\r\n    if (req.client && req.client.constructor.name === \"User\" && req.client.admin) {\r\n        business.boardmodel.removeSensor(req.params.id, req.body.sensor_id).then(\r\n            sids => worker.record.removeBySensors(sids).then(\r\n                () => res.status(200).json({ result: true }),\r\n                error => res.status(error.code).send(error.msg)),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(req.t(\"unauthorized\"));\r\n    }\r\n}","module.exports.v1_0_0 = {\r\n    'board_model': require('./v1.0.0/board_model'),\r\n    'board': require('./v1.0.0/board'),\r\n    'error': require('./v1.0.0/error'),\r\n    'manage': require('./v1.0.0/manage'),\r\n    'patient': require('./v1.0.0/patient'),\r\n    'profile_model': require('./v1.0.0/profile_model'),\r\n    'record': require('./v1.0.0/record'),\r\n    'sensor_model': require('./v1.0.0/sensor_model'),\r\n    'user': require('./v1.0.0/user'),\r\n    'vitabox': require('./v1.0.0/vitabox'),\r\n    'warning':require('./v1.0.0/warning')\r\n}","// ROUTES FOR OUR API\r\n// =============================================================================\r\nmodule.exports = (app) => {\r\n\r\n    var controllers = require('./controllers/index'),\r\n        versioning = require('express-routes-versioning')();\r\n\r\n    app\r\n        /*________________________________________________\r\n        *_____________________USERS_______________________\r\n        *_________________________________________________*/\r\n        .post('/register', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.register,\r\n            \"2.0.0\": (req, res) => res.json({ error: 'invalid version' })\r\n        }))\r\n        .post('/login', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.login,\r\n        }))\r\n        .post('/chpass', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.changePassword,\r\n        }))\r\n        .post('/forgot', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.forgotPassword,\r\n        }))\r\n        .post('/reset', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.resetPassword,\r\n        }))\r\n        .get('/photo', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.getPhoto,\r\n        }))\r\n        .post('/photo', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.setPhoto,\r\n        }))\r\n        .get('/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.list,\r\n        }))\r\n        .get('/user/:id/log', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.getLogs,\r\n        }))\r\n        .get('/doctor/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.getPatients,\r\n        }))\r\n        .get('/doctor/request/list', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.getRequests,\r\n        }))\r\n        .get('/doctor/request/count', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.getRequestsCount,\r\n        }))\r\n        /*________________________________________________\r\n        *____________________ VITABOX_____________________\r\n        *_________________________________________________*/\r\n        .post('/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.create\r\n        }))\r\n        .get('/vitabox', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.list\r\n        }))\r\n        .get('/vitabox/:own', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.list\r\n        }))\r\n        .get('/vitabox/:id/settings', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getSettings\r\n        }))\r\n        .put('/vitabox/:id/settings', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.setSettings\r\n        }))\r\n        .put('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.update\r\n        }))\r\n        .delete('/vitabox/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.delete\r\n        }))\r\n        .post('/vitabox/:id/register', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.register\r\n        }))\r\n        .post('/vitabox/:id/connect', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.requestToken\r\n        }))\r\n        .get('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getUsers\r\n        }))\r\n        .post('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addUser\r\n        }))\r\n        .delete('/vitabox/:id/user', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removeUser\r\n        }))\r\n        .post('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addPatient\r\n        }))\r\n        .get('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getPatients\r\n        }))\r\n        .put('/vitabox/:id/patient/disable', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.disablePatient\r\n        }))\r\n        .put('/vitabox/:id/patient/enable', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.enablePatient\r\n        }))\r\n        .delete('/vitabox/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removePatient\r\n        }))\r\n        .post('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.addBoard\r\n        }))\r\n        .get('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.getBoards\r\n        }))\r\n        .put('/vitabox/:id/board/disable', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.disableBoard\r\n        }))\r\n        .put('/vitabox/:id/board/enable', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.enableBoard\r\n        }))\r\n        .delete('/vitabox/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.vitabox.removeBoard\r\n        }))\r\n        /*________________________________________________\r\n        *__________________ BOARD MODEL___________________\r\n        *_________________________________________________*/\r\n        .post('/boardmodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.create\r\n        }))\r\n        .get('/boardmodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.list\r\n        }))\r\n        .put('/boardmodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.update\r\n        }))\r\n        .delete('/boardmodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.delete\r\n        }))\r\n        .post('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.setSensor\r\n        }))\r\n        .get('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.getSensors\r\n        }))\r\n        .delete('/boardmodel/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board_model.removeSensor\r\n        }))\r\n        /*________________________________________________\r\n        *_____________________BOARD_______________________\r\n        *_________________________________________________*/\r\n        .post('/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board.create\r\n        }))\r\n        .get('/board/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board.getById\r\n        }))\r\n        .post('/board/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board.addPatientToBoard\r\n        }))\r\n        .delete('/board/:id/patient', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board.removePatientFromBoard\r\n        }))\r\n        .get('/board/:id/sensor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board.getSensorsFromBoard\r\n        }))\r\n        .put('/board/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.board.exchange\r\n        }))\r\n        /*________________________________________________\r\n        *____________________PATIENT______________________\r\n        *_________________________________________________*/\r\n        .put('/patient/:id/biometric', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.patient.updateBiometric\r\n        }))\r\n        .get('/patient/:id/board', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.patient.getBoardsFromPatient\r\n        }))\r\n        .put('/patient/:paid/profile/:prid', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.patient.updateProfile\r\n        }))\r\n        .post('/patient/:id/doctor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.patient.addDoctor\r\n        }))\r\n        .put('/patient/:id/doctor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.patient.acceptAsDoctor\r\n        }))\r\n        .delete('/patient/:id/doctor', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.patient.removeDoctor\r\n        }))\r\n        .post('/patient/:id/photo', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.patient.setPhoto\r\n        }))\r\n        .put('/patient/:id/exam', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.patient.updateExamFrequency\r\n        }))\r\n        /*________________________________________________\r\n        *__________________SENSOR MODEL___________________\r\n        *_________________________________________________*/\r\n        .post('/sensormodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor_model.create\r\n        }))\r\n        .get('/sensormodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor_model.list\r\n        }))\r\n        .put('/sensormodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor_model.update\r\n        }))\r\n        .delete('/sensormodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.sensor_model.delete\r\n        }))\r\n        /*________________________________________________\r\n        *____________________RECORDS______________________\r\n        *_________________________________________________*/\r\n        .post('/record', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.create\r\n        }))\r\n        .get('/record/sensor/:id/page/:page', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listFromPage\r\n        }))\r\n        .get('/record/sensor/:id/start/:sdate/end/:edate', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listBetweenDates\r\n        }))\r\n        .get('/record/sensor/:sid/patient/:pid/page/:page', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listFromPageByPatient\r\n        }))\r\n        .get('/record/sensor/:sid/patient/:pid/start/:sdate/end/:edate', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.record.listBetweenDatesByPatient\r\n        }))\r\n        /*________________________________________________\r\n        *_____________________FILES_______________________\r\n        *_________________________________________________*/\r\n        .post('/file', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.fileUpload\r\n        }))\r\n        .get('/file/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.fileDownload\r\n        }))\r\n        /*________________________________________________\r\n        *_________________PROFILE MODEL___________________\r\n        *_________________________________________________*/\r\n        .post('/profilemodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.profile_model.create\r\n        }))\r\n        .get('/profilemodel', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.profile_model.list\r\n        }))\r\n        .put('/profilemodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.profile_model.update\r\n        }))\r\n        .delete('/profilemodel/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.profile_model.delete\r\n        }))\r\n        .post('/profilemodel/:id/measure', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.profile_model.AddMeasure\r\n        }))\r\n        .delete('/profilemodel/:pid/measure/:mid', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.profile_model.removeMeasure\r\n        }))\r\n        /*________________________________________________\r\n        *_____________________ERROR_______________________\r\n        *_________________________________________________*/\r\n        .get('/error/:page', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.error.list\r\n        }))\r\n        .put('/error/:id', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.error.check\r\n        }))\r\n        /*________________________________________________\r\n        *____________________WARNING______________________\r\n        *_________________________________________________*/\r\n        .get('/warning/:page', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.warning.getWarnings\r\n        }))\r\n        .get('/warning', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.warning.getWarnings\r\n        }))\r\n        .put('/warning', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.warning.checkWarnings\r\n        }))\r\n        /*________________________________________________\r\n        *_____________________TRASH_______________________\r\n        *_________________________________________________*/\r\n        .get('/destroy', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.destroyAll\r\n        }))\r\n        .get('/amqp', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.ampqSend\r\n        }))\r\n        .get('/testdb', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.testDb\r\n        }))\r\n\r\n    app.all('*', (req, res) => {\r\n        res.status(404).json({ 'message': 'Route could not be found' });\r\n    });\r\n};","var db = require('../../models/index'),\r\n  utils = require('./utils');\r\n\r\nexports.setHasDoctor = (user) => {\r\n  return new Promise((resolve, reject) => {\r\n    user.getPatients().then(\r\n      patients => {\r\n        if (patients.length > 0 && !user.doctor) user.update({ doctor: true }).then(\r\n          () => resolve(),\r\n          error => reject({ code: 500, msg: error.message }));\r\n        else if (patients.length === 0 && user.doctor) user.update({ doctor: false }).then(\r\n          () => resolve(),\r\n          error => reject({ code: 500, msg: error.message }));\r\n        else resolve();\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.listDoctorRequests = (doctor_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.DoctorPatient.findAll({ where: { user_id: doctor_id, accepted: false } }).then(\r\n      requests => {\r\n        let promises = requests.map(request =>\r\n          new Promise((resolve, reject) => db.Patient.findById(request.patient_id).then(\r\n            patient => resolve({\r\n              created_at: request.created_at,\r\n              patient_id: patient.id,\r\n              patient: utils.decrypt(patient.name)\r\n            }),\r\n            error => reject(error))));\r\n        Promise.all(promises).then(\r\n          requests => resolve(requests),\r\n          error => reject({ code: 500, msg: error.message }));\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  })\r\n}\r\n\r\nexports.countDoctorRequests = (doctor_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.DoctorPatient.count({ where: { user_id: doctor_id, accepted: false } }).then(\r\n      count => resolve(count),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  })\r\n}\r\n\r\nexports.acceptAsDoctor = (doctor_id, patient_id, flag) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.DoctorPatient.findOne({ where: { user_id: doctor_id, patient_id: patient_id } }).then(\r\n      relation => {\r\n        if (relation) if (flag) relation.update({ accepted: true }).then(\r\n          () => resolve(),\r\n          error => reject({ code: 500, msg: error.message }));\r\n        else relation.destroy().then(\r\n          () => resolve(),\r\n          error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"request not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  })\r\n}\r\n\r\nexports.getPatients = (user) => {\r\n  return new Promise((resolve, reject) => {\r\n    user.getPatients({\r\n      attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since'], 'active', 'weight', 'height', 'cc', 'nif'],\r\n      include: [\r\n        {\r\n          model: db.Board, attributes: ['id', 'mac_addr'],\r\n          include: [\r\n            { model: db.Boardmodel, attributes: ['id', 'type', 'name', 'tag'] },\r\n            {\r\n              model: db.Sensor, attributes: ['id', 'last_values', 'last_commit'],\r\n              include: [{ model: db.Sensormodel, attributes: { exclude: ['created_at', 'updated_at'] } }]\r\n            }]\r\n        },\r\n        { model: db.Profile },\r\n        { model: db.Vitabox, attributes: ['id', 'latitude', 'longitude', 'address'] }\r\n      ]\r\n    }, { through: { accepted: true } }).then(\r\n      patients => {\r\n        resolve(patients\r\n          .filter(patient => patient.DoctorPatient.accepted === true)\r\n          .map(patient => {\r\n            patient.name = utils.decrypt(patient.name);\r\n            patient.cc = utils.decrypt(patient.cc);\r\n            patient.nif = utils.decrypt(patient.nif);\r\n            patient.Vitabox.address == utils.decrypt(patient.Vitabox.address);\r\n            patient.Boards.forEach(board => {\r\n              board.dataValues.since = board.PatientBoard.created_at;\r\n              board.dataValues.frequency = board.PatientBoard.frequency;\r\n              delete board.dataValues.PatientBoard\r\n            });\r\n            return patient;\r\n          }));\r\n      },\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n","var db = require('../../models/index'),\r\n  utils = require('./utils');\r\n\r\nexports.getFromUser = (page, user) => {\r\n  return new Promise((resolve, reject) => {\r\n    user.getVitaboxes().then(\r\n      vitaboxes => {\r\n        db.Warning.find().where({ vitabox_id: { $in: vitaboxes.map(x => x.id) } }).sort('-datetime').skip((page - 1) * 25).limit(25).exec((err, res) => {\r\n          if (err) reject({ code: 500, msg: err.message });\r\n          let promises = res.map(warning => {\r\n            if (warning.patient_id === null) return _getSensorWarningInfo(warning);\r\n            else return _getPatientWarningInfo(warning);\r\n          });\r\n          Promise.all(promises).then(\r\n            data => resolve(data.filter(x => x)),\r\n            err => reject({ code: 500, msg: \"Could not extract warnings\" }));\r\n        });\r\n      }, err => reject({ code: 500, msg: err.message }));\r\n  })\r\n}\r\n\r\nexports.getFromDoctor = (page, user) => {\r\n  return new Promise((resolve, reject) => {\r\n    user.getPatients().then(\r\n      patients => {\r\n        db.Warning.find().where({ patient_id: { $in: patients.map(x => x.id) } }).sort('-datetime').skip((page - 1) * 25).limit(25).exec((err, res) => {\r\n          if (err) reject({ code: 500, msg: err.message });\r\n          let promises = res.map(warning => _getPatientWarningInfoToDoctor(warning, patients.find(x => x.id === warning.patient_id)));\r\n          Promise.all(promises).then(\r\n            data => resolve(data.filter(x => x)),\r\n            err => reject({ code: 500, msg: err.message }));\r\n        }, error => reject({ code: 500, msg: \"Could not extract warnings\" }));\r\n      }, err => reject({ code: 500, msg: err.message }));\r\n  });\r\n}\r\n\r\nexports.getFromVitabox = (vitabox_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Warning.find().where({ vitabox_id: vitabox_id, seen_vitabox: null, patient_id: { $ne: null } }).exec((err, res) => {\r\n      if (err) reject({ code: 500, msg: err.message });\r\n      Promise.all(res.map(x => _getPatientWarningInfo(x))).then(\r\n        data => resolve(data.filter(x => x)),\r\n        err => reject({ code: 500, msg: \"Could not extract info from warnings\" }));\r\n    });\r\n  })\r\n}\r\n\r\nexports.checkWarningByUser = (user) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.WarningUser.where({ user_id: user.id }).update({ \"seen_date\": new Date(), \"count\": 0 }, (err, res) => {\r\n      if (err) reject(err);\r\n      if (user.doctor) db.WarningDoctor.where({ user_id: user.id }).update({ \"seen_date\": new Date(), \"count\": 0 }, (err, res) => {\r\n        if (err) reject({ code: 500, msg: err.message });\r\n        resolve();\r\n      });\r\n      else resolve();\r\n    });\r\n  })\r\n}\r\n\r\nexports.checkWarningByVitabox = (id, vitabox_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Warning.where({ _id: id, vitabox_id: vitabox_id }).update({ \"seen_vitabox\": new Date() }, (err, res) => {\r\n      if (err) reject({ code: 500, msg: err.message });\r\n      resolve();\r\n    });\r\n  })\r\n}\r\n\r\nexports.setWarningCount = (user_id, vitabox_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.WarningUser.create({ \"vitabox_id\": vitabox_id, \"user_id\": user_id }, (err, res) => {\r\n      if (err) reject({ code: 500, msg: err.message });\r\n      resolve();\r\n    });\r\n  })\r\n}\r\n\r\nexports.setWarningDoctor = (user_id, patient_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.WarningDoctor.create({ \"patient_id\": patient_id, \"user_id\": user_id }, (err, res) => {\r\n      if (err) reject({ code: 500, msg: err.message });\r\n      resolve();\r\n    });\r\n  })\r\n}\r\n\r\nexports.getWarningCount = (user_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    let promise1 = new Promise((resolve, reject) => {\r\n      db.WarningUser.find().where({ \"user_id\": user_id }).select(\"count\").exec((err, res) => {\r\n        if (err) reject();\r\n        else if (res.length > 0) resolve(res.reduce((a, v) => a + v));\r\n        else resolve(0);\r\n      });\r\n    });\r\n    let promise2 = new Promise((resolve, reject) => {\r\n      db.WarningDoctor.find().where({ \"user_id\": user_id }).select(\"count\").exec((err, res) => {\r\n        if (err) reject();\r\n        else if (res.length > 0) resolve(res.reduce((a, v) => a + v));\r\n        else resolve(0);\r\n      });\r\n    });\r\n    Promise.all([promise1, promise2]).then(\r\n      res => resolve(res.reduce((a, v) => a + v)),\r\n      err => reject({ code: 500, msg: \"Could not extract warnings count\" }));\r\n  })\r\n}\r\n\r\nexports.removeWarningCount = (user_id, vitabox_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.WarningUser.remove({ \"vitabox_id\": vitabox_id, \"user_id\": user_id }).exec(err => {\r\n      if (err) reject(err);\r\n      else resolve();\r\n    });\r\n  })\r\n}\r\n\r\nexports.removeWarningDoctor = (user_id, patient_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.WarningDoctor.remove({ \"patient_id\": patient_id, \"user_id\": user_id }).exec(err => {\r\n      if (err) reject(err);\r\n      else resolve();\r\n    });\r\n  })\r\n}\r\n\r\n_getSensorWarningInfo = (warning) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensor.findById(warning.sensor_id, { include: [{ model: db.Sensormodel }, { model: db.Board }] }).then(\r\n      res => resolve({\r\n        \"id\": warning._id,\r\n        \"datetime\": warning.datetime,\r\n        \"message\": warning.message,\r\n        \"sensor_id\": warning.sensor_id,\r\n        \"patient_id\": null,\r\n        \"seen_vitabox\": warning.seen_vitabox,\r\n        \"what\": res.Sensormodel.to_read,\r\n        \"who\": res.Board.description\r\n      }),\r\n      err => reject(err));\r\n  });\r\n}\r\n\r\n_getPatientWarningInfo = (warning) => {\r\n  return new Promise((resolve, reject) => {\r\n    let promises = [\r\n      db.Sensor.findById(warning.sensor_id, { include: [{ model: db.Sensormodel }] }),\r\n      db.Patient.findById(warning.patient_id)\r\n    ];\r\n    Promise.all(promises).then(\r\n      res => resolve({\r\n        \"id\": warning._id,\r\n        \"datetime\": warning.datetime,\r\n        \"message\": warning.message,\r\n        \"sensor_id\": warning.sensor_id,\r\n        \"patient_id\": warning.patient_id,\r\n        \"seen_vitabox\": warning.seen_vitabox,\r\n        \"what\": res[0].Sensormodel.to_read,\r\n        \"who\": utils.decrypt(res[1].name)\r\n      }),\r\n      err => reject(err));\r\n  });\r\n}\r\n\r\n_getPatientWarningInfoToDoctor = (warning, patient) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensor.findById(warning.sensor_id, { include: [{ model: db.Sensormodel }] }).then(\r\n      res => resolve({\r\n        \"id\": warning._id,\r\n        \"datetime\": warning.datetime,\r\n        \"message\": warning.message,\r\n        \"sensor_id\": warning.sensor_id,\r\n        \"patient_id\": patient.id,\r\n        \"seen_vitabox\": warning.seen_vitabox,\r\n        \"what\": res.Sensormodel.to_read,\r\n        \"who\": utils.decrypt(patient.name)\r\n      }),\r\n      err => reject(err));\r\n  });\r\n}","module.exports = require(\"nodemailer\");","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.register = (email, password, name) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (/[A-Z][a-zA-Z\\'áéíóõãÁÉÍÓ][^#&<>\\\"~;$^%{}?!*+_\\-»«@£§€ªº,0-9]{1,50}$/.test(name))\r\n            if (/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d$@$!%*#?&-.]{8,}$/.test(password))\r\n                if (/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/.test(email)) {\r\n                    let encrypted = utils.encrypt([email, password, name]);\r\n                    if (!encrypted.error) db.User.create({ email: encrypted.value[0], password: encrypted.value[1], name: encrypted.value[2] }).then(\r\n                        new_user => resolve(new_user),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                    else reject({ code: 500, msg: encrypted.error.message });\r\n                } else reject({ code: 500, msg: \"invalid email\" });\r\n            else reject({ code: 500, msg: \"invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\" });\r\n        else reject({ code: 500, msg: \"invalid name\" });\r\n    });\r\n}\r\n\r\nexports.login = (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n        let encrypted = utils.encrypt([email, password]);\r\n        if (!encrypted.error) db.User.findOne({ where: { email: encrypted.value[0], password: encrypted.value[1] } }).then(\r\n            user => {\r\n                if (user) resolve(user);\r\n                else reject({ code: 500, msg: \"email and password don't match\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: encrypted.error.message });\r\n    });\r\n}\r\n\r\nexports.list = () => {\r\n    return new Promise((resolve, reject) => {\r\n        db.User.findAll({ attributes: ['id', 'name', 'email', 'photo', ['admin', 'is_admin'], ['doctor', 'is_doctor']] }).then(\r\n            users => {\r\n                users.forEach(user => {\r\n                    user.name = utils.decrypt(user.name);\r\n                    user.email = utils.decrypt(user.email);\r\n                })\r\n                resolve(users);\r\n            },\r\n            error => reject({ code: 500, msg: error.message }));\r\n    })\r\n}\r\n\r\nexports.changePassword = (user, password) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d$@$!%*#?&-.]{8,}$/.test(password)) {\r\n            let encrypted = utils.encrypt([password]);\r\n            if (!encrypted.error) user.update({ password: encrypted.value[0] }).then(\r\n                () => resolve(),\r\n                error => reject({ code: 500, msg: error.message }));\r\n            else reject({ code: 500, msg: encrypted.error.message });\r\n        } else reject({ code: 500, msg: \"invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\" });\r\n    });\r\n}\r\n\r\nexports.findByEmail = (email) => {\r\n    return new Promise((resolve, reject) => {\r\n        let encrypted = utils.encrypt([email]);\r\n        if (!encrypted.error) db.User.findOne({ where: { email: encrypted.value[0] } }).then(\r\n            user => {\r\n                if (user) {\r\n                    user.name = utils.decrypt(user.name);\r\n                    user.email = utils.decrypt(user.email);\r\n                    resolve(user);\r\n                }\r\n                else reject({ code: 404, msg: \"user not registered\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: encrypted.error.message });\r\n    });\r\n}\r\n\r\nexports.createRecoverToken = (user) => {\r\n    return new Promise((resolve, reject) => {\r\n        let token = utils.generatePassword(12);\r\n        let encrypted = utils.encrypt([token]);\r\n        if (!encrypted.error) user.update({ resetPasswordToken: encrypted.value[0], resetPasswordExpires: Date.now() + 3600000 }).then(\r\n            () => resolve(token),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: encrypted.error.message });\r\n    });\r\n}\r\n\r\nexports.sendRecoverEmail = (user, token) => {\r\n    return new Promise((resolve, reject) => {\r\n        var nodemailer = require('nodemailer');\r\n        var transporter = nodemailer.createTransport({\r\n            host: 'smtp.gmail.com',\r\n            port: 465,\r\n            secure: true,\r\n            auth: {\r\n                user: 'vitamailtester@gmail.com',\r\n                pass: '1qazXSW\"'\r\n            }\r\n        });\r\n        var mailOptions = {\r\n            to: utils.decrypt(user.email),\r\n            from: 'vitamailtester@gmail.com',\r\n            subject: 'Vitasenior Password Reset',\r\n            html: '<h2>Reset Password</h2><hr><p>You are receiving this because you (or someone else) have requested the reset of the password for your account.</p><p>Please use this code to reset your password: <b>' + token + '</b></p><p>If you did not request this, please ignore this email and your password will remain unchanged.</p>'\r\n        };\r\n        transporter.sendMail(mailOptions, (err) => {\r\n            if (err) reject({ code: 500, msg: err.message });\r\n            else resolve();\r\n        });\r\n    });\r\n}\r\n\r\nexports.verifyRecoverToken = (token) => {\r\n    return new Promise((resolve, reject) => {\r\n        let encrypted = utils.encrypt([token]);\r\n        if (!encrypted.error) db.User.findOne({ where: { resetPasswordToken: encrypted.value[0] } }).then(\r\n            user => {\r\n                if (user && user.resetPasswordExpires > Date.now()) {\r\n                    user.update({ resetPasswordToken: null }).then(\r\n                        () => resolve(user),\r\n                        error => reject({ code: 500, msg: error.message }));\r\n                }\r\n                else reject({ code: 500, msg: \"invalid code, please verify your email or request again\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: encrypted.error.message });\r\n    });\r\n}\r\n\r\nexports.updatePhoto = (user, filename) => {\r\n    return new Promise((resolve, reject) => {\r\n        user.update({ photo: filename }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}","var db = require('../../models/index'),\r\n  boardmodel = require('./board_model');\r\n\r\n\r\nexports.create = (board_id, board_model_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    boardmodel.getSensors(board_model_id).then(\r\n      models => {\r\n        let promises = models.map(element => { return _createSingleSensor(board_id, element.id) });\r\n        Promise.all(promises).then(\r\n          sensors => resolve(),\r\n          error => reject({ code: 500, msg: \"cannot create the sensors\" }));\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.find = (sensor_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensor.findById(sensor_id, { include: [{ model: db.Board, include: [{ model: db.Vitabox }, { model: db.Patient }] }] }).then(\r\n      sensor => {\r\n        if (sensor) resolve(sensor);\r\n        else reject({ code: 500, msg: \"Sensor not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\n// ________________________________________________________________________\r\n// Private\r\n// ________________________________________________________________________\r\n_createSingleSensor = (board_id, model_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensor.create({ board_id: board_id, sensormodel_id: model_id }).then(\r\n      () => resolve(),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  })\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (attributes) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensormodel.create({\r\n      transducer: attributes.transducer,\r\n      measure: attributes.measure,\r\n      min_acceptable: attributes.min_acceptable,\r\n      max_acceptable: attributes.max_acceptable,\r\n      min_possible: attributes.min_possible,\r\n      max_possible: attributes.max_possible,\r\n      tag: attributes.tag,\r\n      unit: attributes.unit ? attributes.unit : \"\",\r\n      to_read: attributes.to_read\r\n    }).then(\r\n      model => resolve(model),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.list = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensormodel.findAll({ attributes: { exclude: ['created_at', 'updated_at'] } }).then(\r\n      models => resolve(models),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.update = (sensor_id, attributes) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensormodel.findById(sensor_id).then(\r\n      model => {\r\n        if (model) model.update({\r\n          transducer: attributes.transducer,\r\n          measure: attributes.measure,\r\n          min_acceptable: attributes.min_acceptable,\r\n          max_acceptable: attributes.max_acceptable,\r\n          min_possible: attributes.min_possible,\r\n          max_possible: attributes.max_possible,\r\n          tag: attributes.tag,\r\n          unit: attributes.unit ? attributes.unit : \"\",\r\n          to_read: attributes.to_read\r\n        }).then(\r\n          () => resolve(),\r\n          error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"sensor model not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.remove = (sensor_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Sensormodel.findById(sensor_id).then(\r\n      model => {\r\n        if (model) model.destroy().then(\r\n          () => resolve(),\r\n          error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"sensor model not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}","var db = require('../../models/index');\r\n\r\nexports.listFromPage = (sensor_id, page) => {\r\n    return new Promise((resolve, reject) => {\r\n        _getRecordsWhere({ 'sensor_id': sensor_id }, page).then(\r\n            docs => resolve(docs),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.listFromPageByPatient = ( sensor_id, patient_id, page) => {\r\n    return new Promise((resolve, reject) => {\r\n        _getRecordsWhere({ 'sensor_id': sensor_id, 'patient_id': patient_id }, page).then(\r\n            docs => resolve(docs),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.listBetweenDates = (sensor_id, startDate, endDate) => {\r\n    return new Promise((resolve, reject) => {\r\n        _getAllRecordsWhere({ 'sensor_id': sensor_id, 'datetime': { $gte: new Date(startDate), $lte: new Date(endDate) } }).then(\r\n            docs => resolve(docs),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.listBetweenDatesByPatient = (sensor_id, patient_id, startDate, endDate) => {\r\n    return new Promise((resolve, reject) => {\r\n        _getAllRecordsWhere({ 'sensor_id': sensor_id, 'patient_id': patient_id, 'datetime': { $gte: new Date(startDate), $lte: new Date(endDate) } }).then(\r\n            docs => resolve(docs),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\n_getRecordsWhere = (obj, page) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Record.find().where(obj).sort('-datetime').select(\"-_id\").skip((page - 1) * 25).limit(25).exec((error, records) => {\r\n            if (error) reject(error);\r\n            resolve(records);\r\n        });\r\n    });\r\n}\r\n\r\n_getAllRecordsWhere = (obj) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Record.find().where(obj).exec((error, records) => {\r\n            if (error) reject(error);\r\n            else resolve(records);\r\n        });\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (profile) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (profile.tag && profile.min && profile.max && profile.measure && profile.patient_id) {\r\n      db.Profile.create({ tag: profile.tag, min: profile.min, max: profile.max, measure: profile.measure, patient_id: profile.patient_id }).then(\r\n        profile => resolve(profile),\r\n        error => reject({ code: 500, msg: error.message }));\r\n    } else reject({ code: 500, msg: \"undefined fields, verify max and min values, measure and patient\" });\r\n  });\r\n}\r\n\r\nexports.update = (profile_id, min, max) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (profile_id && min && max) {\r\n      db.Profile.findById(profile_id).then(\r\n        profile => profile.update({ min: min, max: max }).then(\r\n          () => resolve(),\r\n          error => reject({ code: 500, msg: error.message })),\r\n        error => reject({ code: 500, msg: error.message }));\r\n    } else reject({ code: 500, msg: \"undefined fields, verify max and min values and patient id\" });\r\n  });\r\n}\r\n\r\nexports.remove = (patient_id, tag) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (patient_id && tag) {\r\n      db.Profile.destroy({ where: { patient_id: patient_id, tag: tag } }).then(\r\n        () => resolve(),\r\n        error => reject({ code: 500, msg: error.message }));\r\n    } else reject({ code: 500, msg: \"patient or profile undefined\" });\r\n  });\r\n}","var db = require('../../models/index');\r\n\r\nexports.create = (name) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (name) {\r\n      db.Profilemodel.create({ name: name }).then(\r\n        res => resolve(res.toJSON()),\r\n        err => reject({ code: 500, msg: err.message }));\r\n    } else reject({ code: 500, msg: \"profile name or measures undentified\" });\r\n  });\r\n}\r\n\r\nexports.list = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Profilemodel.find({}).populate('measures').exec((err, res) => {\r\n      if (err) reject({ code: 500, msg: err.message });\r\n      resolve(res.map(p => { return p.toJSON() }));\r\n    });\r\n  });\r\n}\r\n\r\nexports.update = (id, name) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Profilemodel.findOneAndUpdate({ _id: id }, { name: name }).exec((err, res) => {\r\n      if (err) reject({ code: 500, msg: err.message });\r\n      resolve();\r\n    });\r\n  });\r\n}\r\n\r\nexports.remove = (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Profilemodel.findOne({ '_id': id }).populate('measures').exec((err, res) => {\r\n      if (err) reject({ code: 500, msg: err.message });\r\n      let promises = res.measures.map(x => new Promise((resolve, reject) => {\r\n          db.Profilemeasure.deleteOne({ _id: x._id }).exec((err, res) => {\r\n            if (err) reject({ code: 500, msg: err.message });\r\n            else resolve();\r\n          });\r\n        }));\r\n      Promise.all(promises).then(\r\n        () => db.Profilemodel.deleteOne({ _id: id }).exec((err, res) => {\r\n          if (err) reject({ code: 500, msg: err.message });\r\n          resolve();\r\n        }), error => reject({ code: 500, msg: error.message }));\r\n    });\r\n  });\r\n}\r\n\r\nexports.addMeasure = (profile_id, measure) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Profilemeasure.create({ min: measure.min, max: measure.max, tag: measure.tag, measure: measure.measure }).then(\r\n      res => db.Profilemodel.findOne({ '_id': profile_id }).populate('measures').exec((err, profile) => {\r\n        if (err) reject({ code: 500, msg: err.message });\r\n        if (!profile.measures.some(x => x.tag === measure.tag)) {\r\n          profile.measures.push(res);\r\n          profile.save().then(\r\n            () => resolve(res._id),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        } else reject({ code: 500, msg: \"maesure already registered to profile\" });\r\n      }),\r\n      err => reject({ code: 500, msg: err.message }));\r\n  });\r\n}\r\n\r\nexports.removeMeasure = (profile_id, measure_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Profilemodel.findOne({ '_id': profile_id }).exec((err, res) => {\r\n      if (err) reject({ code: 500, msg: err.message });\r\n      res.measures = res.measures.filter(x => x !== measure_id);\r\n      res.save().then(\r\n        () => db.Profilemeasure.deleteOne({ _id: measure_id }).exec((err, res) => {\r\n          if (err) reject({ code: 500, msg: err.message });\r\n          else resolve();\r\n        }), error => reject({ code: 500, msg: error.message }));\r\n    });\r\n  });\r\n}","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.createIfNotExists = (attributes, vitabox_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        if ([\"male\", \"female\", \"undefined\"].includes(attributes.gender))\r\n            if (/[A-Z][a-zA-Z\\'áéíóõãÁÉÍÓ][^#&<>\\\"~;$^%{}?!*+_\\-»«@£§€ªº,0-9]{1,50}$/.test(attributes.name)) {\r\n                if (/[1256789]\\d{8}$/.test(attributes.nif)) {\r\n                    if (/^[0-9]{8}([ -]*[0-9][ ]*[A-Z]{2}[0-9])*$/.test(attributes.cc)) {\r\n                        let encrypted = utils.encrypt([attributes.name.replace(/\\b\\w/g, l => l.toUpperCase()), attributes.cc, attributes.nif]);\r\n                        if (!encrypted.error) {\r\n                            db.Patient.findOne({ where: { name: encrypted.value[0], birthdate: attributes.birthdate } }).then(\r\n                                patient => {\r\n                                    if (patient) resolve(patient);\r\n                                    else db.Patient.create({\r\n                                        name: encrypted.value[0],\r\n                                        birthdate: attributes.birthdate,\r\n                                        gender: attributes.gender,\r\n                                        vitabox_id: vitabox_id,\r\n                                        active: false,\r\n                                        cc: encrypted.value[1],\r\n                                        nif: encrypted.value[2]\r\n                                    }).then(\r\n                                        patient => resolve(patient),\r\n                                        error => reject({ code: 500, msg: error.message })\r\n                                    ), error => reject({ code: 500, msg: error.message })\r\n                                }, error => reject({ code: 500, msg: error.message }));\r\n                        } else reject({ code: 500, msg: encrypted.error.message });\r\n                    } else reject({ code: 500, msg: \"invalid cc\" });\r\n                } else reject({ code: 500, msg: \"invalid nif\" });\r\n            } else reject({ code: 500, msg: \"invalid name\" });\r\n        else reject({ code: 500, msg: \"invalid gender, must be 'male', 'female' or 'undefined'\" });\r\n    });\r\n}\r\n\r\nexports.find = function (patient_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Patient.findById(patient_id).then(\r\n            patient => {\r\n                if (patient) resolve(patient);\r\n                else reject({ code: 500, msg: \"Patient not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.setBiometricData = (patient_id, attributes) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Patient.findById(patient_id).then(\r\n            patient => patient.update({\r\n                profile: attributes.profile,\r\n                height: attributes.height,\r\n                weight: attributes.weight,\r\n                active: true\r\n            }).then(\r\n                result => resolve(result),\r\n                error => reject({ code: 500, msg: error.message })),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.disable = (patient_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Patient.findById(patient_id).then(\r\n            patient => patient.update({ active: false }).then(\r\n                result => resolve(result),\r\n                error => reject({ code: 500, msg: error.message })),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.enable = (patient_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Patient.findById(patient_id).then(\r\n            patient => patient.update({ active: true }).then(\r\n                () => resolve(),\r\n                error => reject({ code: 500, msg: error.message })),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.getBoards = function (patient_id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.Patient.findById(patient_id).then(\r\n            patient => {\r\n                if (patient) patient.getBoards({\r\n                    attributes: ['id', 'mac_addr'],\r\n                    include: [\r\n                        { model: db.Boardmodel, attributes: ['id', 'type', 'name'] },\r\n                        {\r\n                            model: db.Sensor, attributes: ['id', 'last_values', 'last_commit'],\r\n                            include: [{ model: db.Sensormodel, attributes: { exclude: ['created_at', 'updated_at'] } }]\r\n                        }]\r\n                }).then(\r\n                    result => resolve(result),\r\n                    error => reject({ code: 500, msg: error.message }));\r\n                else reject({ code: 500, msg: \"Patient not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.addDoctor = (patient, doctor_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        patient.addDoctor(doctor_id).then(\r\n            result => {\r\n                if (result.length > 0) resolve();\r\n                else reject({ code: 500, msg: \"doctor already associated to patient\" })\r\n            },\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.removeDoctor = (patient, doctor_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        patient.removeDoctor(doctor_id).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.verifyDoctor = (current_user, patient_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.Patient.findById(patient_id).then(\r\n            patient => {\r\n                if (patient) _isDoctor(patient, current_user).then(\r\n                    () => resolve(),\r\n                    error => reject(error));\r\n                else reject({ code: 500, msg: \"Patient not found\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\nexports.updatePhoto = (patient, filename) => {\r\n    return new Promise((resolve, reject) => {\r\n        patient.update({ photo: filename }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}\r\n\r\n// ________________________________________________________________________\r\n// Private\r\n// ________________________________________________________________________\r\n_isDoctor = (patient, user) => {\r\n    return new Promise((resolve, reject) => {\r\n        patient.getDoctors({ where: { id: user.id }, through: { accepted: true } }).then(\r\n            users => {\r\n                if (users.length > 0) resolve();\r\n                else reject({ code: 401, msg: \"Unauthorized\" });\r\n            }, error => reject({ code: 500, msg: error.message }));\r\n    });\r\n}","var db = require('../../models/index');\r\n\r\nexports.getByUser = (user_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Log.find().where({ user_id: user_id }).exec((err, res) => {\r\n      if (err) reject({ code: 500, msg: err.message });\r\n      resolve(res);\r\n    });\r\n  })\r\n}","var db = require('../../models/index'),\r\n  utils = require('./utils');\r\n\r\nexports.countUnseen = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Error.count({ seen_date: null }).exec((err, res) => {\r\n      if (err) reject({ code: 500, msg: err.message });\r\n      resolve(res);\r\n    });\r\n  })\r\n}\r\n\r\nexports.getFromPage = (page) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Error.find().sort('-datetime').skip((page - 1) * 25).limit(25).exec((err, res) => {\r\n      if (err) reject({ code: 500, msg: err.message });\r\n\r\n      let promises = res.map(to_send => {\r\n        if (to_send.seen_user !== null) return new Promise(resolve => {\r\n          db.User.findById(to_send.seen_user, { attributes: [\"name\"] }).then(\r\n            user => {\r\n              user.name = utils.decrypt(user.name);\r\n              to_send.seen_user = user.name;\r\n              resolve(to_send);\r\n            },\r\n            error => resolve(to_send));\r\n        });\r\n        else return to_send;\r\n      });\r\n      Promise.all(promises).then(\r\n        res => resolve(res),\r\n        err => reject({ code: 500, msg: err.message })\r\n      );\r\n    });\r\n  })\r\n}\r\n\r\nexports.setCheck = (error_id, user_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Error.update({ _id: error_id, seen_user: null }, { seen_user: user_id, seen_date: new Date() }, (err) => {\r\n      if (err) reject({ code: 500, msg: \"error not found or already checked\" });\r\n      else resolve();\r\n    })\r\n  })\r\n}","var db = require('../../models/index'),\r\n  utils = require('./utils'),\r\n  vitabox = require('./vitabox');\r\n\r\nexports.create = (attributes) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (attributes.mac_addr) {\r\n      let password = utils.generatePassword(10);\r\n      let encrypted = utils.encrypt([password]);\r\n      if (!encrypted.error) db.Board.create({\r\n        mac_addr: attributes.mac_addr.toLowerCase(),\r\n        boardmodel_id: attributes.model,\r\n        node_id: attributes.mac_addr.substr(attributes.mac_addr.lastIndexOf(\":\") - 2).replace(\":\", \"\").toLowerCase(),\r\n        password: encrypted.value[0]\r\n      }).then(\r\n        board => resolve({ board, password }),\r\n        error => reject({ code: 500, msg: error.message }));\r\n      else reject({ code: 500, msg: encrypted.error.message });\r\n    } else reject({ code: 500, msg: \"MAC address is required\" });\r\n  });\r\n}\r\n\r\nexports.get = (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findById(id, {\r\n      attributes: ['id', 'mac_addr', 'vitabox_id'],\r\n      include: [\r\n        { model: db.Boardmodel, attributes: ['id', 'type', 'name'] },\r\n        {\r\n          model: db.Sensor, attributes: ['id', 'last_values', 'last_commit'],\r\n          include: [{ model: db.Sensormodel, attributes: { exclude: ['created_at', 'updated_at'] } }]\r\n        }]\r\n    }).then(\r\n      board => {\r\n        if (board) resolve(board);\r\n        else reject({ code: 500, msg: \"board not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.findByMAC = (mac_addr) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findOne({ where: { mac_addr: mac_addr } }).then(\r\n      board => {\r\n        if (board) resolve(board);\r\n        else reject({ code: 500, msg: \"board not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.authenticate = (mac_addr, password) => {\r\n  return new Promise((resolve, reject) => {\r\n    let encrypted = utils.encrypt([password]);\r\n    if (!encrypted.error) db.Board.findOne({\r\n      where: { mac_addr: mac_addr, password: encrypted.value[0] },\r\n      attributes: ['id', 'description', 'mac_addr', 'active', ['created_at', 'since']],\r\n      include: [{ model: db.Boardmodel, attributes: ['id', 'type', 'name'] }, { model: db.Vitabox }]\r\n    }).then(\r\n      board => {\r\n        if (board) if (!board.Vitabox) resolve(board);\r\n        else reject({ code: 500, msg: \"board already in use\" });\r\n        else reject({ code: 500, msg: \"MAC address and password don't match\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n    else reject({ code: 500, msg: encrypted.error.message });\r\n  });\r\n}\r\n\r\nexports.setDescription = (board, description) => {\r\n  return new Promise((resolve, reject) => {\r\n    board.update({ description: description, active: true }).then(\r\n      () => resolve(),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.removeDescription = (board_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findById(board_id).then(\r\n      board => board.update({ description: null, active: false }).then(\r\n        () => resolve(),\r\n        error => reject({ code: 500, msg: error.message })),\r\n      error => reject({ code: 500, msg: error.message }))\r\n  });\r\n}\r\n\r\nexports.enable = (board_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findById(board_id).then(\r\n      board => board.update({ active: true }).then(\r\n        () => resolve(),\r\n        error => reject({ code: 500, msg: error.message })),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.disable = (board_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findById(board_id).then(\r\n      board => board.update({ active: false }).then(\r\n        () => resolve(),\r\n        error => reject({ code: 500, msg: error.message })),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.addPatient = (board, patient_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    board.hasPatient(patient_id).then(\r\n      success => {\r\n        if (!success) board.addPatient(patient_id).then(\r\n          () => resolve(),\r\n          error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"board already registered to patient\" });\r\n      });\r\n  });\r\n}\r\n\r\nexports.getPatients = (current_user, board_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findById(board_id).then(\r\n      board => {\r\n        if (board) if (current_user.admin)\r\n          board.getPatients({\r\n            attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since'], 'active'],\r\n            include: [{\r\n              model: db.Board, attributes: ['id', 'mac_addr'],\r\n              include: [\r\n                { model: db.Boardmodel, attributes: ['id', 'type', 'name'] },\r\n                {\r\n                  model: db.Sensor, attributes: ['id', 'last_values', 'last_commit'],\r\n                  include: [{ model: db.Sensormodel, attributes: { exclude: ['created_at', 'updated_at'] } }]\r\n                }]\r\n            }],\r\n          }).then(\r\n            result => resolve(result),\r\n            error => reject({ code: 500, msg: error.message }));\r\n        else vitabox.verifySponsor(current_user, board.vitabox_id).then(\r\n          () => board.getPatients({\r\n            attributes: ['id', 'birthdate', 'name', 'gender', ['created_at', 'since'], 'active'],\r\n            include: [{\r\n              model: db.Board, attributes: ['id', 'mac_addr'],\r\n              include: [\r\n                { model: db.Boardmodel, attributes: ['id', 'type', 'name'] },\r\n                {\r\n                  model: db.Sensor, attributes: ['id', 'last_values', 'last_commit'],\r\n                  include: [{ model: db.Sensormodel, attributes: { exclude: ['created_at', 'updated_at'] } }]\r\n                }]\r\n            }],\r\n          }).then(\r\n            () => resolve(),\r\n            error => reject({ code: 500, msg: error.message })),\r\n          error => reject(error));\r\n        else reject({ code: 500, msg: \"Board not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.getSensors = (board_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findById(board_id).then(\r\n      board => {\r\n        if (board) board.getSensors({\r\n          attributes: ['id', 'last_commit', 'last_values'],\r\n          include: [{ model: db.Sensormodel, attributes: { exclude: ['created_at', 'updated_at', 'tag'] } }]\r\n        }).then(\r\n          sensors => resolve(sensors),\r\n          error => reject({ code: 500, msg: error.message }));\r\n        else reject({ code: 500, msg: \"board model not found\" });\r\n      }, error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.switchMac = (board_id, mac_addr) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.Board.findById(board_id).then(\r\n      board => board.update({ mac_addr: mac_addr }).then(\r\n        () => resolve(),\r\n        error => reject({ code: 500, msg: error.message })),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}\r\n\r\nexports.updateFrequency = (board_id, patient_id, frequency) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.PatientBoard.findOne({ where: { board_id: board_id, patient_id: patient_id } }).then(\r\n      board => board.update({ frequency: frequency }).then(\r\n        () => resolve(),\r\n        error => reject({ code: 500, msg: error.message })),\r\n      error => reject({ code: 500, msg: error.message }));\r\n  });\r\n}","module.exports = require(\"i18n\");","module.exports = require(\"body-parser\");","// MIDDLEWARE FOR OUR API\r\n// =============================================================================\r\nmodule.exports = (app) => {\r\n  var bodyParser = require('body-parser'),\r\n    i18n = require(\"i18n\"),\r\n    utils = require('./business/index').v1_0_0.utils;\r\n\r\n  i18n.configure({\r\n    locales: ['pt', 'en'],\r\n    defaultLocale: 'pt',\r\n    register: global,\r\n    directory: __dirname + '/locales',\r\n    api: {\r\n      '__': 't',  //now req.__ becomes req.t\r\n      '__n': 'tn' //and req.__n can be called as req.tn\r\n    }\r\n  });\r\n\r\n  app.use(i18n.init);\r\n  app.use(bodyParser.urlencoded({ extended: true }));\r\n  app.use(bodyParser.json());\r\n\r\n  // middleware to use for all requests\r\n  app.use((req, res, next) => {\r\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization, Accept-Version\");\r\n    res.header(\"Access-Control-Allow-Methods\", \"POST, GET, PUT, DELETE, OPTIONS\");\r\n    res.header('Access-Control-Allow-Credentials', true);\r\n\r\n    if (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"test\") console.log(\"\\x1b[36m\" + req.method, req.url + \"\\x1b[0m\");\r\n\r\n    if (req.method === \"OPTIONS\") { return res.send(200); }\r\n    if (req.headers.authorization) {\r\n      utils.validateToken(req.headers.authorization).then(\r\n        client => {\r\n          if (client) req.client = client;\r\n          else req.client = null;\r\n          next();\r\n        },\r\n        error => { req.client = null; next(); });\r\n    } else { req.client = null; next(); }\r\n  });\r\n}","module.exports = require(\"express\");","//\n//\n//\n\n'use strict';\n\n/*\nThe channel (promise) and callback APIs have similar signatures, and\nin particular, both need AMQP fields prepared from the same arguments\nand options. The arguments marshalling is done here. Each of the\nprocedures below takes arguments and options (the latter in an object)\nparticular to the operation it represents, and returns an object with\nfields for handing to the encoder.\n*/\n\n// A number of AMQP methods have a table-typed field called\n// `arguments`, that is intended to carry extension-specific\n// values. RabbitMQ uses this in a number of places; e.g., to specify\n// an 'alternate exchange'.\n//\n// Many of the methods in this API have an `options` argument, from\n// which I take both values that have a default in AMQP (e.g.,\n// autoDelete in QueueDeclare) *and* values that are specific to\n// RabbitMQ (e.g., 'alternate-exchange'), which would normally be\n// supplied in `arguments`. So that extensions I don't support yet can\n// be used, I include `arguments` itself among the options.\n//\n// The upshot of this is that I often need to prepare an `arguments`\n// value that has any values passed in `options.arguments` as well as\n// any I've promoted to being options themselves. Since I don't want\n// to mutate anything passed in, the general pattern is to create a\n// fresh object with the `arguments` value given as its prototype; all\n// fields in the supplied value will be serialised, as well as any I\n// set on the fresh object. What I don't want to do, however, is set a\n// field to undefined by copying possibly missing field values,\n// because that will mask a value in the prototype.\n//\n// NB the `arguments` field already has a default value of `{}`, so\n// there's no need to explicitly default it unless I'm setting values.\nfunction setIfDefined(obj, prop, value) {\n  if (value != undefined) obj[prop] = value;\n}\n\nvar EMPTY_OPTIONS = Object.freeze({});\n\nvar Args = {};\n\nArgs.assertQueue = function(queue, options) {\n  queue = queue || '';\n  options = options || EMPTY_OPTIONS;\n\n  var argt = Object.create(options.arguments || null);\n  setIfDefined(argt, 'x-expires', options.expires);\n  setIfDefined(argt, 'x-message-ttl', options.messageTtl);\n  setIfDefined(argt, 'x-dead-letter-exchange',\n               options.deadLetterExchange);\n  setIfDefined(argt, 'x-dead-letter-routing-key',\n               options.deadLetterRoutingKey);\n  setIfDefined(argt, 'x-max-length', options.maxLength);\n  setIfDefined(argt, 'x-max-priority', options.maxPriority);\n\n  return {\n    queue: queue,\n    exclusive: !!options.exclusive,\n    durable: (options.durable === undefined) ? true : options.durable,\n    autoDelete: !!options.autoDelete,\n    arguments: argt,\n    passive: false,\n    // deprecated but we have to include it\n    ticket: 0,\n    nowait: false\n  };\n};\n\nArgs.checkQueue = function(queue) {\n  return {\n    queue: queue,\n    passive: true, // switch to \"completely different\" mode\n    nowait: false,\n    durable: true, autoDelete: false, exclusive: false, // ignored\n    ticket: 0,\n  };\n};\n\nArgs.deleteQueue = function(queue, options) {\n  options = options || EMPTY_OPTIONS;\n  return {\n    queue: queue,\n    ifUnused: !!options.ifUnused,\n    ifEmpty: !!options.ifEmpty,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.purgeQueue = function(queue) {\n  return {\n    queue: queue,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.bindQueue = function(queue, source, pattern, argt) {\n  return {\n    queue: queue,\n    exchange: source,\n    routingKey: pattern,\n    arguments: argt,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.unbindQueue = function(queue, source, pattern, argt) {\n  return {\n    queue: queue,\n    exchange: source,\n    routingKey: pattern,\n    arguments: argt,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.assertExchange = function(exchange, type, options) {\n  options = options || EMPTY_OPTIONS;\n  var argt = Object.create(options.arguments || null);\n  setIfDefined(argt, 'alternate-exchange', options.alternateExchange);\n  return {\n    exchange: exchange,\n    ticket: 0,\n    type: type,\n    passive: false,\n    durable: (options.durable === undefined) ? true : options.durable,\n    autoDelete: !!options.autoDelete,\n    internal: !!options.internal,\n    nowait: false,\n    arguments: argt\n  };\n};\n\nArgs.checkExchange = function(exchange) {\n  return {\n    exchange: exchange,\n    passive: true, // switch to 'may as well be another method' mode\n    nowait: false,\n    // ff are ignored\n    durable: true, internal: false,  type: '',  autoDelete: false,\n    ticket: 0\n  };\n};\n\nArgs.deleteExchange = function(exchange, options) {\n  options = options || EMPTY_OPTIONS;\n  return {\n    exchange: exchange,\n    ifUnused: !!options.ifUnused,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.bindExchange = function(dest, source, pattern, argt) {\n  return {\n    source: source,\n    destination: dest,\n    routingKey: pattern,\n    arguments: argt,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.unbindExchange = function(dest, source, pattern, argt) {\n  return {\n    source: source,\n    destination: dest,\n    routingKey: pattern,\n    arguments: argt,\n    ticket: 0, nowait: false\n  };\n};\n\n// It's convenient to construct the properties and the method fields\n// at the same time, since in the APIs, values for both can appear in\n// `options`. Since the property or mthod field names don't overlap, I\n// just return one big object that can be used for both purposes, and\n// the encoder will pick out what it wants.\nArgs.publish = function(exchange, routingKey, options) {\n  options = options || EMPTY_OPTIONS;\n\n  // The CC and BCC fields expect an array of \"longstr\", which would\n  // normally be buffer values in JavaScript; however, since a field\n  // array (or table) cannot have shortstr values, the codec will\n  // encode all strings as longstrs anyway.\n  function convertCC(cc) {\n    if (cc === undefined) {\n      return undefined;\n    }\n    else if (Array.isArray(cc)) {\n      return cc.map(String);\n    }\n    else return [String(cc)];\n  }\n\n  var headers = Object.create(options.headers || null);\n  setIfDefined(headers, 'CC', convertCC(options.CC));\n  setIfDefined(headers, 'BCC', convertCC(options.BCC));\n\n  var deliveryMode; // undefined will default to 1 (non-persistent)\n\n  // Previously I overloaded deliveryMode be a boolean meaning\n  // 'persistent or not'; better is to name this option for what it\n  // is, but I need to have backwards compatibility for applications\n  // that either supply a numeric or boolean value.\n  if (options.persistent !== undefined)\n    deliveryMode = (options.persistent) ? 2 : 1;\n  else if (typeof options.deliveryMode === 'number')\n    deliveryMode = options.deliveryMode;\n  else if (options.deliveryMode) // is supplied and truthy\n    deliveryMode = 2;\n\n  var expiration = options.expiration;\n  if (expiration !== undefined) expiration = expiration.toString();\n\n  return {\n    // method fields\n    exchange: exchange,\n    routingKey: routingKey,\n    mandatory: !!options.mandatory,\n    immediate: false, // RabbitMQ doesn't implement this any more\n    ticket: undefined,\n    // properties\n    contentType: options.contentType,\n    contentEncoding: options.contentEncoding,\n    headers: headers,\n    deliveryMode: deliveryMode,\n    priority: options.priority,\n    correlationId: options.correlationId,\n    replyTo: options.replyTo,\n    expiration: expiration,\n    messageId: options.messageId,\n    timestamp: options.timestamp,\n    type: options.type,\n    userId: options.userId,\n    appId: options.appId,\n    clusterId: undefined\n  };\n};\n\nArgs.consume = function(queue, options) {\n  options = options || EMPTY_OPTIONS;\n  var argt = Object.create(options.arguments || null);\n  setIfDefined(argt, 'x-priority', options.priority);\n  return {\n    ticket: 0,\n    queue: queue,\n    consumerTag: options.consumerTag || '',\n    noLocal: !!options.noLocal,\n    noAck: !!options.noAck,\n    exclusive: !!options.exclusive,\n    nowait: false,\n    arguments: argt\n  };\n};\n\nArgs.cancel = function(consumerTag) {\n  return {\n    consumerTag: consumerTag,\n    nowait: false\n  };\n};\n\nArgs.get = function(queue, options) {\n  options = options || EMPTY_OPTIONS;\n  return {\n    ticket: 0,\n    queue: queue,\n    noAck: !!options.noAck\n  };\n};\n\nArgs.ack = function(tag, allUpTo) {\n  return {\n    deliveryTag: tag,\n    multiple: !!allUpTo\n  };\n};\n\nArgs.nack = function(tag, allUpTo, requeue) {\n  return {\n    deliveryTag: tag,\n    multiple: !!allUpTo,\n    requeue: (requeue === undefined) ? true : requeue\n  };\n};\n\nArgs.reject = function(tag, requeue) {\n  return {\n    deliveryTag: tag,\n    requeue: (requeue === undefined) ? true : requeue\n  };\n};\n\nArgs.prefetch = function(count, global) {\n  return {\n    prefetchCount: count || 0,\n    prefetchSize: 0,\n    global: !!global\n  };\n};\n\nArgs.recover = function() {\n  return {requeue: true};\n};\n\nmodule.exports = Object.freeze(Args);\n","module.exports = require(\"bluebird\");","//\n//\n//\n\n'use strict';\n\nvar defs = require('./defs');\nvar Promise = require('bluebird');\nvar inherits = require('util').inherits;\nvar EventEmitter = require('events').EventEmitter;\nvar BaseChannel = require('./channel').BaseChannel;\nvar acceptMessage = require('./channel').acceptMessage;\nvar Args = require('./api_args');\n\nfunction CallbackModel(connection) {\n  if (!(this instanceof CallbackModel))\n    return new CallbackModel(connection);\n  EventEmitter.call( this );\n  this.connection = connection;\n  var self = this;\n  ['error', 'close', 'blocked', 'unblocked'].forEach(function(ev) {\n    connection.on(ev, self.emit.bind(self, ev));\n  });\n}\ninherits(CallbackModel, EventEmitter);\n\nmodule.exports.CallbackModel = CallbackModel;\n\nCallbackModel.prototype.close = function(cb) {\n  this.connection.close(cb);\n};\n\nfunction Channel(connection) {\n  BaseChannel.call(this, connection);\n  this.on('delivery', this.handleDelivery.bind(this));\n  this.on('cancel', this.handleCancel.bind(this));\n}\ninherits(Channel, BaseChannel);\n\nmodule.exports.Channel = Channel;\n\nCallbackModel.prototype.createChannel = function(cb) {\n  var ch = new Channel(this.connection);\n  ch.open(function(err, ok) {\n    if (err === null) cb && cb(null, ch);\n    else cb && cb(err);\n  });\n  return ch;\n};\n\n// Wrap an RPC callback to make sure the callback is invoked with\n// either `(null, value)` or `(error)`, i.e., never two non-null\n// values. Also substitutes a stub if the callback is `undefined` or\n// otherwise falsey, for convenience in methods for which the callback\n// is optional (that is, most of them).\nfunction callbackWrapper(ch, cb) {\n  return (cb) ? function(err, ok) {\n    if (err === null) {\n      cb(null, ok);\n    }\n    else cb(err);\n  } : function() {};\n}\n\n// This encodes straight-forward RPC: no side-effects and return the\n// fields from the server response. It wraps the callback given it, so\n// the calling method argument can be passed as-is. For anything that\n// needs to have side-effects, or needs to change the server response,\n// use `#_rpc(...)` and remember to dereference `.fields` of the\n// server response.\nChannel.prototype.rpc = function(method, fields, expect, cb0) {\n  var cb = callbackWrapper(this, cb0);\n  this._rpc(method, fields, expect, function(err, ok) {\n    cb(err, ok && ok.fields); // in case of an error, ok will be\n                              // undefined\n  });\n  return this;\n};\n\n// === Public API ===\n\nChannel.prototype.open = function(cb) {\n  try { this.allocate(); }\n  catch (e) { return cb(e); }\n\n  return this.rpc(defs.ChannelOpen, {outOfBand: \"\"},\n                  defs.ChannelOpenOk, cb);\n};\n\nChannel.prototype.close = function(cb) {\n  return this.closeBecause(\"Goodbye\", defs.constants.REPLY_SUCCESS,\n                           function() { cb && cb(null); });\n};\n\nChannel.prototype.assertQueue = function(queue, options, cb) {\n  return this.rpc(defs.QueueDeclare,\n                  Args.assertQueue(queue, options),\n                  defs.QueueDeclareOk, cb);\n};\n\nChannel.prototype.checkQueue = function(queue, cb) {\n  return this.rpc(defs.QueueDeclare,\n                  Args.checkQueue(queue),\n                  defs.QueueDeclareOk, cb);\n};\n\nChannel.prototype.deleteQueue = function(queue, options, cb) {\n  return this.rpc(defs.QueueDelete,\n                  Args.deleteQueue(queue, options),\n                  defs.QueueDeleteOk, cb);\n};\n\nChannel.prototype.purgeQueue = function(queue, cb) {\n  return this.rpc(defs.QueuePurge,\n                  Args.purgeQueue(queue),\n                  defs.QueuePurgeOk, cb);\n};\n\nChannel.prototype.bindQueue =\n  function(queue, source, pattern, argt, cb) {\n    return this.rpc(defs.QueueBind,\n                    Args.bindQueue(queue, source, pattern, argt),\n                    defs.QueueBindOk, cb);\n  };\n\nChannel.prototype.unbindQueue =\n  function(queue, source, pattern, argt, cb) {\n    return this.rpc(defs.QueueUnbind,\n                    Args.unbindQueue(queue, source, pattern, argt),\n                    defs.QueueUnbindOk, cb);\n  };\n\nChannel.prototype.assertExchange = function(ex, type, options, cb0) {\n  var cb = callbackWrapper(this, cb0);\n  this._rpc(defs.ExchangeDeclare,\n            Args.assertExchange(ex, type, options),\n            defs.ExchangeDeclareOk,\n            function(e, _) { cb(e, {exchange: ex}); });\n  return this;\n};\n\nChannel.prototype.checkExchange = function(exchange, cb) {\n  return this.rpc(defs.ExchangeDeclare,\n                  Args.checkExchange(exchange),\n                  defs.ExchangeDeclareOk, cb);\n};\n\nChannel.prototype.deleteExchange = function(exchange, options, cb) {\n  return this.rpc(defs.ExchangeDelete,\n                  Args.deleteExchange(exchange, options),\n                  defs.ExchangeDeleteOk, cb);\n};\n\nChannel.prototype.bindExchange =\n  function(dest, source, pattern, argt, cb) {\n    return this.rpc(defs.ExchangeBind,\n                    Args.bindExchange(dest, source, pattern, argt),\n                    defs.ExchangeBindOk, cb);\n  };\n\nChannel.prototype.unbindExchange =\n  function(dest, source, pattern, argt, cb) {\n    return this.rpc(defs.ExchangeUnbind,\n                    Args.unbindExchange(dest, source, pattern, argt),\n                    defs.ExchangeUnbindOk, cb);\n  };\n\nChannel.prototype.publish =\n  function(exchange, routingKey, content, options) {\n    var fieldsAndProps = Args.publish(exchange, routingKey, options);\n    return this.sendMessage(fieldsAndProps, fieldsAndProps, content);\n  };\n\nChannel.prototype.sendToQueue = function(queue, content, options) {\n  return this.publish('', queue, content, options);\n};\n\nChannel.prototype.consume = function(queue, callback, options, cb0) {\n  var cb = callbackWrapper(this, cb0);\n  var fields = Args.consume(queue, options);\n  var self = this;\n  this._rpc(\n    defs.BasicConsume, fields, defs.BasicConsumeOk,\n    function(err, ok) {\n      if (err === null) {\n        self.registerConsumer(ok.fields.consumerTag, callback);\n        cb(null, ok.fields);\n      }\n      else cb(err);\n    });\n  return this;\n};\n\nChannel.prototype.cancel = function(consumerTag, cb0) {\n  var cb = callbackWrapper(this, cb0);\n  var self = this;\n  this._rpc(\n    defs.BasicCancel, Args.cancel(consumerTag), defs.BasicCancelOk,\n    function(err, ok) {\n      if (err === null) {\n        self.unregisterConsumer(consumerTag);\n        cb(null, ok.fields);\n      }\n      else cb(err);\n    });\n  return this;\n};\n\nChannel.prototype.get = function(queue, options, cb0) {\n  var self = this;\n  var fields = Args.get(queue, options);\n  var cb = callbackWrapper(this, cb0);\n  this.sendOrEnqueue(defs.BasicGet, fields, function(err, f) {\n    if (err === null) {\n      if (f.id === defs.BasicGetEmpty) {\n        cb(null, false);\n      }\n      else if (f.id === defs.BasicGetOk) {\n        self.handleMessage = acceptMessage(function(m) {\n          m.fields = f.fields;\n          cb(null, m);\n        });\n      }\n      else {\n        cb(new Error(\"Unexpected response to BasicGet: \" +\n                     inspect(f)));\n      }\n    }\n  });\n  return this;\n};\n\nChannel.prototype.ack = function(message, allUpTo) {\n  this.sendImmediately(\n    defs.BasicAck, Args.ack(message.fields.deliveryTag, allUpTo));\n  return this;\n};\n\nChannel.prototype.ackAll = function() {\n  this.sendImmediately(defs.BasicAck, Args.ack(0, true));\n  return this;\n};\n\nChannel.prototype.nack = function(message, allUpTo, requeue) {\n  this.sendImmediately(\n    defs.BasicNack,\n    Args.nack(message.fields.deliveryTag, allUpTo, requeue));\n  return this;\n};\n\nChannel.prototype.nackAll = function(requeue) {\n  this.sendImmediately(\n    defs.BasicNack, Args.nack(0, true, requeue))\n  return this;\n};\n\nChannel.prototype.reject = function(message, requeue) {\n  this.sendImmediately(\n    defs.BasicReject,\n    Args.reject(message.fields.deliveryTag, requeue));\n  return this;\n};\n\nChannel.prototype.prefetch = function(count, global, cb) {\n  return this.rpc(defs.BasicQos,\n                  Args.prefetch(count, global),\n                  defs.BasicQosOk, cb);\n};\n\nChannel.prototype.recover = function(cb) {\n  return this.rpc(defs.BasicRecover,\n                  Args.recover(),\n                  defs.BasicRecoverOk, cb);\n};\n\nfunction ConfirmChannel(connection) {\n  Channel.call(this, connection);\n}\ninherits(ConfirmChannel, Channel);\n\nmodule.exports.ConfirmChannel = ConfirmChannel;\n\nCallbackModel.prototype.createConfirmChannel = function(cb) {\n  var ch = new ConfirmChannel(this.connection);\n  ch.open(function(err) {\n    if (err !== null) return cb && cb(err);\n    else {\n      ch.rpc(defs.ConfirmSelect, {nowait: false},\n             defs.ConfirmSelectOk, function(err, _ok) {\n               if (err !== null) return cb && cb(err);\n               else cb && cb(null, ch);\n             });\n    }\n  });\n  return ch;\n};\n\nConfirmChannel.prototype.publish = function(exchange, routingKey,\n                                            content, options, cb) {\n  this.pushConfirmCallback(cb);\n  return Channel.prototype.publish.call(\n    this, exchange, routingKey, content, options);\n};\n\nConfirmChannel.prototype.sendToQueue = function(queue, content,\n                                                options, cb) {\n  return this.publish('', queue, content, options, cb);\n};\n\nConfirmChannel.prototype.waitForConfirms = function(k) {\n  var awaiting = [];\n  var unconfirmed = this.unconfirmed;\n  unconfirmed.forEach(function(val, index) {\n    if (val === null); // already confirmed\n    else {\n      var confirmed = new Promise(function(resolve, reject) {\n        unconfirmed[index] = function(err) {\n          if (val) val(err);\n          if (err === null) resolve();\n          else reject(err);\n        };\n      });\n      awaiting.push(confirmed);\n    }\n  });\n  return Promise.all(awaiting).then(function() { k(); },\n                                 function(err) { k(err); });\n};\n","module.exports = require(\"tls\");","module.exports = require(\"net\");","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\n\nfunction TransformState(options, stream) {\n  this.afterTransform = function(er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb)\n    return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (!util.isNullOrUndefined(data))\n    stream.push(data);\n\n  if (cb)\n    cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\n\nfunction Transform(options) {\n  if (!(this instanceof Transform))\n    return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(options, this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  this.once('prefinish', function() {\n    if (util.isFunction(this._flush))\n      this._flush(function(er) {\n        done(stream, er);\n      });\n    else\n      done(stream);\n  });\n}\n\nTransform.prototype.push = function(chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function(chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function(chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform ||\n        rs.needReadable ||\n        rs.length < rs.highWaterMark)\n      this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function(n) {\n  var ts = this._transformState;\n\n  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\n\nfunction done(stream, er) {\n  if (er)\n    return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length)\n    throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming)\n    throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough))\n    return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n  cb(null, chunk);\n};\n","module.exports = require(\"./lib/_stream_passthrough.js\")\n","//\n//\n//\n\n// A bitset implementation, after that in java.util.  Yes there\n// already exist such things, but none implement next{Clear|Set}Bit or\n// equivalent, and none involved me tooling about for an evening.\n\n'use strict';\n\nfunction BitSet(size) {\n  if (size) {\n    var numWords = Math.ceil(size / 32);\n    this.words = new Array(numWords);\n  }\n  else {\n    this.words = [];\n  }\n  this.wordsInUse = 0; // = number, not index\n}\n\nvar P = BitSet.prototype;\n\nfunction wordIndex(bitIndex) {\n  return Math.floor(bitIndex / 32);\n}\n\n// Make sure we have at least numWords\nP.ensureSize = function(numWords) {\n  var wordsPresent = this.words.length;\n  if (wordsPresent < numWords) {\n    this.words = this.words.concat(new Array(numWords - wordsPresent));\n  }\n}\n\nP.set = function(bitIndex) {\n  var w = wordIndex(bitIndex);\n  if (w >= this.wordsInUse) {\n    this.ensureSize(w + 1);\n    this.wordsInUse = w + 1;\n  }\n  var bit = 1 << bitIndex;\n  this.words[w] |= bit;\n};\n\nP.clear = function(bitIndex) {\n  var w = wordIndex(bitIndex);\n  if (w >= this.wordsInUse) return;\n  var mask = ~(1 << bitIndex);\n  this.words[w] &= mask;\n};\n\nP.get = function(bitIndex) {\n  var w = wordIndex(bitIndex);\n  if (w >= this.wordsInUse) return false; // >= since index vs size\n  var bit = 1 << bitIndex;\n  return !!(this.words[w] & bit);\n}\n\nfunction trailingZeros(i) {\n  // From Hacker's Delight, via JDK. Probably far less effective here,\n  // since bit ops are not necessarily the quick way to do things in\n  // JS.\n  if (i === 0) return 32;\n  var y, n = 31;\n  y = i << 16; if (y != 0) { n = n -16; i = y; }\n  y = i << 8;  if (y != 0) { n = n - 8; i = y; }\n  y = i << 4;  if (y != 0) { n = n - 4; i = y; }\n  y = i << 2;  if (y != 0) { n = n - 2; i = y; }\n  return n - ((i << 1) >>> 31);\n}\n\n// Give the next bit that's set on or after fromIndex, or -1 if no such\n// bit\nP.nextSetBit = function(fromIndex) {\n  var w = wordIndex(fromIndex);\n  if (w >= this.wordsInUse) return -1;\n\n  // the right-hand side is shifted to only test the bits of the first\n  // word that are > fromIndex\n  var word = this.words[w] & (0xffffffff << fromIndex);\n  while (true) {\n    if (word) return (w * 32) + trailingZeros(word);\n    w++;\n    if (w === this.wordsInUse) return -1;\n    word = this.words[w];\n  }\n};\n\nP.nextClearBit = function(fromIndex) {\n  var w = wordIndex(fromIndex);\n  if (w >= this.wordsInUse) return fromIndex;\n\n  var word = ~(this.words[w]) & (0xffffffff << fromIndex);\n  while (true) {\n    if (word) return (w * 32) + trailingZeros(word);\n    w++;\n    if (w == this.wordsInUse) return w * 32;\n    word = ~(this.words[w]);\n  }\n};\n\nmodule.exports.BitSet = BitSet;\n","//\n//\n//\n\n// Heartbeats. In AMQP both clients and servers may expect a heartbeat\n// frame if there is no activity on the connection for a negotiated\n// period of time. If there's no activity for two such intervals, the\n// server or client is allowed to close the connection on the\n// presumption that the other party is dead.\n//\n// The client has two jobs here: the first is to send a heartbeat\n// frame if it's not sent any frames for a while, so that the server\n// doesn't think it's dead; the second is to check periodically that\n// it's seen activity from the server, and to advise if there doesn't\n// appear to have been any for over two intervals.\n//\n// Node.JS timers are a bit unreliable, in that they endeavour only to\n// fire at some indeterminate point *after* the given time (rather\n// gives the lie to 'realtime', dunnit). Because the scheduler is just\n// an event loop, it's quite easy to delay timers indefinitely by\n// reacting to some I/O with a lot of computation.\n//\n// To mitigate this I need a bit of creative interpretation:\n//\n//  - I'll schedule a server activity check for every `interval`, and\n//    check just how much time has passed. It will overshoot by at\n//    least a small margin; modulo missing timer deadlines, it'll\n//    notice between two and three intervals after activity actually\n//    stops (otherwise, at some point after two intervals).\n//\n//  - Every `interval / 2` I'll check that we've sent something since\n//    the last check, and if not, send a heartbeat frame. If we're\n//    really too busy to even run the check for two whole heartbeat\n//    intervals, there must be a lot of I (but not O, at least not on\n//    the connection), or computation, in which case perhaps it's best\n//    the server cuts us off anyway. Why `interval / 2`? Because the\n//    edge case is that the client sent a frame just after a\n//    heartbeat, which would mean I only send one after almost two\n//    intervals. (NB a heartbeat counts as a send, so it'll be checked\n//    at least twice before sending another)\n//\n// This design is based largely on RabbitMQ's heartbeating:\n// https://github.com/rabbitmq/rabbitmq-common/blob/master/src/rabbit_heartbeat.erl\n\n// %% Yes, I could apply the same 'actually passage of time' thing to\n// %% send as well as to recv.\n\n'use strict';\n\nvar inherits = require('util').inherits;\nvar EventEmitter = require('events').EventEmitter;\n\n// Exported so that we can mess with it in tests\nmodule.exports.UNITS_TO_MS = 1000;\n\nfunction Heart(interval, checkSend, checkRecv) {\n  EventEmitter.call(this);\n  this.interval = interval;\n\n  var intervalMs = interval * module.exports.UNITS_TO_MS;\n  // Function#bind is my new best friend\n  var beat = this.emit.bind(this, 'beat');\n  var timeout = this.emit.bind(this, 'timeout');\n\n  this.sendTimer = setInterval(\n    this.runHeartbeat.bind(this, checkSend, beat), intervalMs / 2);\n\n  // A timeout occurs if I see nothing for *two consecutive* intervals\n  var recvMissed = 0;\n  function missedTwo() {\n    if (!checkRecv()) return (++recvMissed < 2);\n    else { recvMissed = 0; return true; }\n  }\n  this.recvTimer = setInterval(\n    this.runHeartbeat.bind(this, missedTwo, timeout), intervalMs);\n}\ninherits(Heart, EventEmitter);\n\nmodule.exports.Heart = Heart;\n\nHeart.prototype.clear = function() {\n  clearInterval(this.sendTimer);\n  clearInterval(this.recvTimer);\n};\n\nHeart.prototype.runHeartbeat = function(check, fail) {\n  // Have we seen activity?\n  if (!check()) fail();\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Stream = require('stream');\n\nutil.inherits(Writable, Stream);\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n}\n\nfunction WritableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function(er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.buffer = [];\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n}\n\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex))\n    return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\n\nfunction writeAfterEnd(stream, state, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  process.nextTick(function() {\n    cb(er);\n  });\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    process.nextTick(function() {\n      cb(er);\n    });\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function(chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  else if (!encoding)\n    encoding = state.defaultEncoding;\n\n  if (!util.isFunction(cb))\n    cb = function() {};\n\n  if (state.ended)\n    writeAfterEnd(this, state, cb);\n  else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function() {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function() {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing &&\n        !state.corked &&\n        !state.finished &&\n        !state.bufferProcessing &&\n        state.buffer.length)\n      clearBuffer(this, state);\n  }\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode &&\n      state.decodeStrings !== false &&\n      util.isString(chunk)) {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret)\n    state.needDrain = true;\n\n  if (state.writing || state.corked)\n    state.buffer.push(new WriteReq(chunk, encoding, cb));\n  else\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev)\n    stream._writev(chunk, state.onwrite);\n  else\n    stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  if (sync)\n    process.nextTick(function() {\n      state.pendingcb--;\n      cb(er);\n    });\n  else {\n    state.pendingcb--;\n    cb(er);\n  }\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er)\n    onwriteError(stream, state, sync, er, cb);\n  else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(stream, state);\n\n    if (!finished &&\n        !state.corked &&\n        !state.bufferProcessing &&\n        state.buffer.length) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(function() {\n        afterWrite(stream, state, finished, cb);\n      });\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished)\n    onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n\n  if (stream._writev && state.buffer.length > 1) {\n    // Fast case, write everything using _writev()\n    var cbs = [];\n    for (var c = 0; c < state.buffer.length; c++)\n      cbs.push(state.buffer[c].callback);\n\n    // count the one we are adding, as well.\n    // TODO(isaacs) clean this up\n    state.pendingcb++;\n    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {\n      for (var i = 0; i < cbs.length; i++) {\n        state.pendingcb--;\n        cbs[i](err);\n      }\n    });\n\n    // Clear buffer\n    state.buffer = [];\n  } else {\n    // Slow case, write chunks one-by-one\n    for (var c = 0; c < state.buffer.length; c++) {\n      var entry = state.buffer[c];\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        c++;\n        break;\n      }\n    }\n\n    if (c < state.buffer.length)\n      state.buffer = state.buffer.slice(c);\n    else\n      state.buffer.length = 0;\n  }\n\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function(chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function(chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (util.isFunction(chunk)) {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (!util.isNullOrUndefined(chunk))\n    this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished)\n    endWritable(this, state, cb);\n};\n\n\nfunction needFinish(stream, state) {\n  return (state.ending &&\n          state.length === 0 &&\n          !state.finished &&\n          !state.writing);\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(stream, state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else\n      prefinish(stream, state);\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished)\n      process.nextTick(cb);\n    else\n      stream.once('finish', cb);\n  }\n  state.ended = true;\n}\n","module.exports = require(\"isarray\");","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\n\n\n/*<replacement>*/\nvar debug = require('util');\nif (debug && debug.debuglog) {\n  debug = debug.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n  var state = this._readableState;\n\n  if (util.isString(chunk) && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (util.isNullOrUndefined(chunk)) {\n    state.reading = false;\n    if (!state.ended)\n      onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding)\n        chunk = state.decoder.write(chunk);\n\n      if (!addToFront)\n        state.reading = false;\n\n      // if we want the data now, just emit it.\n      if (state.flowing && state.length === 0 && !state.sync) {\n        stream.emit('data', chunk);\n        stream.read(0);\n      } else {\n        // update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended &&\n         (state.needReadable ||\n          state.length < state.highWaterMark ||\n          state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended)\n    return 0;\n\n  if (state.objectMode)\n    return n === 0 ? 0 : 1;\n\n  if (isNaN(n) || util.isNull(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length)\n      return state.buffer[0].length;\n    else\n      return state.length;\n  }\n\n  if (n <= 0)\n    return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark)\n    state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else\n      return state.length;\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (!util.isNumber(n) || n > 0)\n    state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 &&\n      state.needReadable &&\n      (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended)\n      endReadable(this);\n    else\n      emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0)\n      endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading)\n    n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (util.isNull(ret)) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended)\n    state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0)\n    endReadable(this);\n\n  if (!util.isNull(ret))\n    this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync)\n      process.nextTick(function() {\n        emitReadable_(stream);\n      });\n    else\n      emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function() {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended &&\n         state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n    else\n      len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&\n              dest !== process.stdout &&\n              dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted)\n    process.nextTick(endFn);\n  else\n    src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain &&\n        (!dest._writableState || dest._writableState.needDrain))\n      ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      debug('false write response, pause',\n            src._readableState.awaitDrain);\n      src._readableState.awaitDrain++;\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0)\n      dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error)\n    dest.on('error', onerror);\n  else if (isArray(dest._events.error))\n    dest._events.error.unshift(onerror);\n  else\n    dest._events.error = [onerror, dest._events.error];\n\n\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain)\n      state.awaitDrain--;\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1)\n    return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        var self = this;\n        process.nextTick(function() {\n          debug('readable nexttick read 0');\n          self.read(0);\n        });\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    if (!state.reading) {\n      debug('resume read 0');\n      this.read(0);\n    }\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(function() {\n      resume_(stream, state);\n    });\n  }\n}\n\nfunction resume_(stream, state) {\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading)\n    stream.read(0);\n}\n\nReadable.prototype.pause = function() {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    debug('wrapped data');\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n    if (!chunk || !state.objectMode && !chunk.length)\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {\n      this[i] = function(method) { return function() {\n        return stream[method].apply(stream, arguments);\n      }}(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0)\n    return null;\n\n  if (length === 0)\n    ret = null;\n  else if (objectMode)\n    ret = list.shift();\n  else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode)\n      ret = list.join('');\n    else\n      ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode)\n        ret = '';\n      else\n        ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode)\n          ret += buf.slice(0, cpy);\n        else\n          buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length)\n          list[0] = buf.slice(cpy);\n        else\n          list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(function() {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf (xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n","module.exports = require(\"./lib/_stream_duplex.js\")\n","//\n//\n//\n\n'use strict';\n\n// A Mux is an object into which other readable streams may be piped;\n// it then writes 'packets' from the upstreams to the given\n// downstream.\n\nvar inherits = require('util').inherits;\nvar assert = require('assert');\n\nvar schedule = (typeof setImmediate === 'function') ?\n  setImmediate : process.nextTick;\n\nfunction Mux(downstream) {\n  this.newStreams = [];\n  this.oldStreams = [];\n  this.blocked = false;\n  this.scheduledRead = false;\n\n  this.out = downstream;\n  var self = this;\n  downstream.on('drain', function() {\n    self.blocked = false;\n    self._readIncoming();\n  });\n}\n\n// There are 2 states we can be in:\n\n// - waiting for outbound capacity, which will be signalled by a\n// - 'drain' event on the downstream; or,\n\n// - no packets to send, waiting for an inbound buffer to have\n//   packets, which will be signalled by a 'readable' event\n\n// If we write all packets available whenever there is outbound\n// capacity, we will either run out of outbound capacity (`#write`\n// returns false), or run out of packets (all calls to an\n// `inbound.read()` have returned null).\n\nMux.prototype._readIncoming = function() {\n\n  // We may be sent here speculatively, if an incoming stream has\n  // become readable\n  if (this.blocked) return;\n\n  var self = this;\n  var accepting = true;\n  var out = this.out;\n\n  // Try to read a chunk from each stream in turn, until all streams\n  // are empty, or we exhaust our ability to accept chunks.\n  function roundrobin(streams) {\n    var s;\n    // if there's just one incoming stream we don't have to\n    // go through all the dequeue/enqueueing\n    if (streams.length === 1) {\n      s = streams.shift();\n      while (accepting) {\n        var chunk = s.read();\n        if (chunk !== null) {\n          accepting = out.write(chunk);\n        }\n        else break;\n      }\n      if (!accepting) streams.push(s);\n    }\n    else {\n      while (accepting && (s = streams.shift())) {\n        var chunk = s.read();\n        if (chunk !== null) {\n          accepting = out.write(chunk);\n          streams.push(s);\n        }\n      }\n    }\n  }\n\n  roundrobin(this.newStreams);\n\n  // Either we exhausted the new queues, or we ran out of capacity. If\n  // we ran out of capacity, all the remaining new streams (i.e.,\n  // those with packets left) become old streams. This effectively\n  // prioritises streams that keep their buffers close to empty over\n  // those that are constantly near full.\n\n  if (accepting) { // all new queues are exhausted, write as many as\n                   // we can from the old streams\n    assert.equal(0, this.newStreams.length);\n    roundrobin(this.oldStreams);\n  }\n  else { // ran out of room\n    assert(this.newStreams.length > 0, \"Expect some new streams to remain\");\n    this.oldStreams = this.oldStreams.concat(this.newStreams);\n    this.newStreams = [];\n  }\n  // We may have exhausted all the old queues, or run out of room;\n  // either way, all we need to do is record whether we have capacity\n  // or not, so any speculative reads will know\n  this.blocked = !accepting;\n};\n\nMux.prototype._scheduleRead = function() {\n  var self = this;\n  \n  if (!self.scheduledRead) {\n    schedule(function() {\n      self.scheduledRead = false;\n      self._readIncoming();\n    });\n    self.scheduledRead = true;\n  }\n};\n\nMux.prototype.pipeFrom = function(readable) {\n  var self = this;\n\n  function enqueue() {\n    self.newStreams.push(readable);\n    self._scheduleRead();\n  }\n\n  function cleanup() {\n    readable.removeListener('readable', enqueue);\n    readable.removeListener('error', cleanup);\n    readable.removeListener('end', cleanup);\n    readable.removeListener('unpipeFrom', cleanupIfMe);\n  }\n  function cleanupIfMe(dest) {\n    if (dest === self) cleanup();\n  }\n\n  readable.on('unpipeFrom', cleanupIfMe);\n  readable.on('end', cleanup);\n  readable.on('error', cleanup);\n  readable.on('readable', enqueue);\n};\n\nMux.prototype.unpipeFrom = function(readable) {\n  readable.emit('unpipeFrom', this);\n};\n\nmodule.exports.Mux = Mux;\n","module.exports = require(\"bitsyntax\");","//\n//\n//\n\n/*\n\nThe AMQP 0-9-1 is a mess when it comes to the types that can be\nencoded on the wire.\n\nThere are four encoding schemes, and three overlapping sets of types:\nframes, methods, (field-)tables, and properties.\n\nEach *frame type* has a set layout in which values of given types are\nconcatenated along with sections of \"raw binary\" data.\n\nIn frames there are `shortstr`s, that is length-prefixed strings of\nUTF8 chars, 8 bit unsigned integers (called `octet`), unsigned 16 bit\nintegers (called `short` or `short-uint`), unsigned 32 bit integers\n(called `long` or `long-uint`), unsigned 64 bit integers (called\n`longlong` or `longlong-uint`), and flags (called `bit`).\n\nMethods are encoded as a frame giving a method ID and a sequence of\narguments of known types. The encoded method argument values are\nconcatenated (with some fun complications around \"packing\" consecutive\nbit values into bytes).\n\nAlong with the types given in frames, method arguments may be long\nbyte strings (`longstr`, not required to be UTF8) or 64 bit unsigned\nintegers to be interpreted as timestamps (yeah I don't know why\neither), or arbitrary sets of key-value pairs (called `field-table`).\n\nInside a field table the keys are `shortstr` and the values are\nprefixed with a byte tag giving the type. The types are any of the\nabove except for bits (which are replaced by byte-wide `bool`), along\nwith a NULL value `void`, a special fixed-precision number encoding\n(`decimal`), IEEE754 `float`s and `double`s, signed integers,\n`field-array` (a sequence of tagged values), and nested field-tables.\n\nRabbitMQ and QPid use a subset of the field-table types, and different\nvalue tags, established before the AMQP 0-9-1 specification was\npublished. So far as I know, no-one uses the types and tags as\npublished. http://www.rabbitmq.com/amqp-0-9-1-errata.html gives the\nlist of field-table types.\n\nLastly, there are (sets of) properties, only one of which is given in\nAMQP 0-9-1: `BasicProperties`. These are almost the same as methods,\nexcept that they appear in content header frames, which include a\ncontent size, and they carry a set of flags indicating which\nproperties are present. This scheme can save ones of bytes per message\n(messages which take a minimum of three frames each to send).\n\n*/\n\n'use strict';\n\nvar ints = require('buffer-more-ints');\n\n// JavaScript uses only doubles so what I'm testing for is whether\n// it's *better* to encode a number as a float or double. This really\n// just amounts to testing whether there's a fractional part to the\n// number, except that see below. NB I don't use bitwise operations to\n// do this 'efficiently' -- it would mask the number to 32 bits.\n//\n// At 2^50, doubles don't have sufficient precision to distinguish\n// between floating point and integer numbers (`Math.pow(2, 50) + 0.1\n// === Math.pow(2, 50)` (and, above 2^53, doubles cannot represent all\n// integers (`Math.pow(2, 53) + 1 === Math.pow(2, 53)`)). Hence\n// anything with a magnitude at or above 2^50 may as well be encoded\n// as a 64-bit integer. Except that only signed integers are supported\n// by RabbitMQ, so anything above 2^63 - 1 must be a double.\nfunction isFloatingPoint(n) {\n    return n >= 0x8000000000000000 ||\n        (Math.abs(n) < 0x4000000000000\n         && Math.floor(n) !== n);\n}\n\nfunction encodeTable(buffer, val, offset) {\n    var start = offset;\n    offset += 4; // leave room for the table length\n    for (var key in val) {\n        if (val[key] !== undefined) {\n          var len = Buffer.byteLength(key);\n          buffer.writeUInt8(len, offset); offset++;\n          buffer.write(key, offset, 'utf8'); offset += len;\n          offset += encodeFieldValue(buffer, val[key], offset);\n        }\n    }\n    var size = offset - start;\n    buffer.writeUInt32BE(size - 4, start);\n    return size;\n}\n\nfunction encodeArray(buffer, val, offset) {\n    var start = offset;\n    offset += 4;\n    for (var i=0, num=val.length; i < num; i++) {\n        offset += encodeFieldValue(buffer, val[i], offset);\n    }\n    var size = offset - start;\n    buffer.writeUInt32BE(size - 4, start);\n    return size;\n}\n\nfunction encodeFieldValue(buffer, value, offset) {\n    var start = offset;\n    var type = typeof value, val = value;\n    // A trapdoor for specifying a type, e.g., timestamp\n    if (value && type === 'object' && value.hasOwnProperty('!')) {\n        val = value.value;\n        type = value['!'];\n    }\n\n    // If it's a JS number, we'll have to guess what type to encode it\n    // as.\n    if (type == 'number') {\n        // Making assumptions about the kind of number (floating point\n        // v integer, signed, unsigned, size) desired is dangerous in\n        // general; however, in practice RabbitMQ uses only\n        // longstrings and unsigned integers in its arguments, and\n        // other clients generally conflate number types anyway. So\n        // the only distinction we care about is floating point vs\n        // integers, preferring integers since those can be promoted\n        // if necessary. If floating point is required, we may as well\n        // use double precision.\n        if (isFloatingPoint(val)) {\n            type = 'double';\n        }\n        else { // only signed values are used in tables by\n               // RabbitMQ. It *used* to (< v3.3.0) treat the byte 'b'\n               // type as unsigned, but most clients (and the spec)\n               // think it's signed, and now RabbitMQ does too.\n            if (val < 128 && val >= -128) {\n                type = 'byte';\n            }\n            else if (val >= -0x8000 && val < 0x8000) {\n                type = 'short'\n            }\n            else if (val >= -0x80000000 && val < 0x80000000) {\n                type = 'int';\n            }\n            else {\n                type = 'long';\n            }\n        }\n    }\n\n    function tag(t) { buffer.write(t, offset); offset++; }\n\n    switch (type) {\n    case 'string': // no shortstr in field tables\n        var len = Buffer.byteLength(val, 'utf8');\n        tag('S');\n        buffer.writeUInt32BE(len, offset); offset += 4;\n        buffer.write(val, offset, 'utf8'); offset += len;\n        break;\n    case 'object':\n        if (val === null) {\n            tag('V');\n        }\n        else if (Array.isArray(val)) {\n            tag('A');\n            offset += encodeArray(buffer, val, offset);\n        }\n        else if (Buffer.isBuffer(val)) {\n            tag('x');\n            buffer.writeUInt32BE(val.length, offset); offset += 4;\n            val.copy(buffer, offset); offset += val.length;\n        }\n        else {\n            tag('F');\n            offset += encodeTable(buffer, val, offset);\n        }\n        break;\n    case 'boolean':\n        tag('t');\n        buffer.writeUInt8((val) ? 1 : 0, offset); offset++;\n        break;\n    // These are the types that are either guessed above, or\n    // explicitly given using the {'!': type} notation.\n    case 'double':\n    case 'float64':\n        tag('d');\n        buffer.writeDoubleBE(val, offset);\n        offset += 8;\n        break;\n    case 'byte':\n    case 'int8':\n        tag('b');\n        buffer.writeInt8(val, offset); offset++;\n        break;\n    case 'short':\n    case 'int16':\n        tag('s');\n        buffer.writeInt16BE(val, offset); offset += 2;\n        break;\n    case 'int':\n    case 'int32':\n        tag('I');\n        buffer.writeInt32BE(val, offset); offset += 4;\n        break;\n    case 'long':\n    case 'int64':\n        tag('l');\n        ints.writeInt64BE(buffer, val, offset); offset += 8;\n        break;\n\n    // Now for exotic types, those can _only_ be denoted by using\n    // `{'!': type, value: val}\n    case 'timestamp':\n        tag('T');\n        ints.writeUInt64BE(buffer, val, offset); offset += 8;\n        break;\n    case 'float':\n        tag('f');\n        buffer.writeFloatBE(val, offset); offset += 4;\n        break;\n    case 'decimal':\n        tag('D');\n        if (val.hasOwnProperty('places') && val.hasOwnProperty('digits')\n            && val.places >= 0 && val.places < 256) {\n            buffer[offset] = val.places; offset++;\n            buffer.writeUInt32BE(val.digits, offset); offset += 4;\n        }\n        else throw new TypeError(\n            \"Decimal value must be {'places': 0..255, 'digits': uint32}, \" +\n                \"got \" + JSON.stringify(val));\n        break;\n    default:\n        throw new TypeError('Unknown type to encode: ' + type);\n    }\n    return offset - start;\n}\n\n// Assume we're given a slice of the buffer that contains just the\n// fields.\nfunction decodeFields(slice) {\n    var fields = {}, offset = 0, size = slice.length;\n    var len, key, val;\n\n    function decodeFieldValue() {\n        var tag = String.fromCharCode(slice[offset]); offset++;\n        switch (tag) {\n        case 'b':\n            val = slice.readInt8(offset); offset++;\n            break;\n        case 'S':\n            len = slice.readUInt32BE(offset); offset += 4;\n            val = slice.toString('utf8', offset, offset + len);\n            offset += len;\n            break;\n        case 'I':\n            val = slice.readInt32BE(offset); offset += 4;\n            break;\n        case 'D': // only positive decimals, apparently.\n            var places = slice[offset]; offset++;\n            var digits = slice.readUInt32BE(offset); offset += 4;\n            val = {'!': 'decimal', value: {places: places, digits: digits}};\n            break;\n        case 'T':\n            val = ints.readUInt64BE(slice, offset); offset += 8;\n            val = {'!': 'timestamp', value: val};\n            break;\n        case 'F':\n            len = slice.readUInt32BE(offset); offset += 4;\n            val = decodeFields(slice.slice(offset, offset + len));\n            offset += len;\n            break;\n        case 'A':\n            len = slice.readUInt32BE(offset); offset += 4;\n            decodeArray(offset + len);\n            // NB decodeArray will itself update offset and val\n            break;\n        case 'd':\n            val = slice.readDoubleBE(offset); offset += 8;\n            break;\n        case 'f':\n            val = slice.readFloatBE(offset); offset += 4;\n            break;\n        case 'l':\n            val = ints.readInt64BE(slice, offset); offset += 8;\n            break;\n        case 's':\n            val = slice.readInt16BE(offset); offset += 2;\n            break;\n        case 't':\n            val = slice[offset] != 0; offset++;\n            break;\n        case 'V':\n            val = null;\n            break;\n        case 'x':\n            len = slice.readUInt32BE(offset); offset += 4;\n            val = slice.slice(offset, offset + len);\n            offset += len;\n            break;\n        default:\n            throw new TypeError('Unexpected type tag \"' + tag +'\"');\n        }\n    }\n\n    function decodeArray(until) {\n        var vals = [];\n        while (offset < until) {\n            decodeFieldValue();\n            vals.push(val);\n        }\n        val = vals;\n    }\n\n    while (offset < size) {\n        len = slice.readUInt8(offset); offset++;\n        key = slice.toString('utf8', offset, offset + len);\n        offset += len;\n        decodeFieldValue();\n        fields[key] = val;\n    }\n    return fields;\n}\n\nmodule.exports.encodeTable = encodeTable;\nmodule.exports.decodeFields = decodeFields;\n","//\n//\n//\n\n'use strict';\n\nvar defs = require('./defs');\nvar constants = defs.constants;\nvar frame = require('./frame');\nvar HEARTBEAT = frame.HEARTBEAT;\nvar Mux = require('./mux').Mux;\nvar Buffer = require('safe-buffer').Buffer\n\nvar Duplex =\n  require('stream').Duplex ||\n  require('readable-stream/duplex');\nvar EventEmitter = require('events').EventEmitter;\nvar Heart = require('./heartbeat').Heart;\n\nvar methodName = require('./format').methodName;\nvar closeMsg = require('./format').closeMessage;\nvar inspect = require('./format').inspect;\n\nvar BitSet = require('./bitset').BitSet;\nvar inherits = require('util').inherits;\nvar fmt = require('util').format;\nvar PassThrough = require('stream').PassThrough ||\n  require('readable-stream/passthrough');\nvar IllegalOperationError = require('./error').IllegalOperationError;\nvar stackCapture = require('./error').stackCapture;\n\n// High-water mark for channel write buffers, in 'objects' (which are\n// encoded frames as buffers).\nvar DEFAULT_WRITE_HWM = 1024;\n// If all the frames of a message (method, properties, content) total\n// to less than this, copy them into a single buffer and write it all\n// at once. Note that this is less than the minimum frame size: if it\n// was greater, we might have to fragment the content.\nvar SINGLE_CHUNK_THRESHOLD = 2048;\n\nfunction Connection(underlying) {\n  EventEmitter.call( this );\n  var stream = this.stream = wrapStream(underlying);\n  this.muxer = new Mux(stream);\n\n  // frames\n  this.rest = Buffer.alloc(0);\n  this.frameMax = constants.FRAME_MIN_SIZE;\n  this.sentSinceLastCheck = false;\n  this.recvSinceLastCheck = false;\n\n  this.expectSocketClose = false;\n  this.freeChannels = new BitSet();\n  this.channels = [{channel: {accept: channel0(this)},\n                    buffer: underlying}];\n}\ninherits(Connection, EventEmitter);\n\nvar C = Connection.prototype;\n\n// Usual frame accept mode\nfunction mainAccept(frame) {\n  var rec = this.channels[frame.channel];\n  if (rec) { return rec.channel.accept(frame); }\n  // NB CHANNEL_ERROR may not be right, but I don't know what is ..\n  else\n    this.closeWithError(\n      fmt('Frame on unknown channel %d', frame.channel),\n      constants.CHANNEL_ERROR,\n      new Error(fmt(\"Frame on unknown channel: %s\",\n                    inspect(frame, false))));\n}\n\n// Handle anything that comes through on channel 0, that's the\n// connection control channel. This is only used once mainAccept is\n// installed as the frame handler, after the opening handshake.\nfunction channel0(connection) {\n  return function(f) {\n    // Once we get a 'close', we know 1. we'll get no more frames, and\n    // 2. anything we send except close, or close-ok, will be\n    // ignored. If we already sent 'close', this won't be invoked since\n    // we're already in closing mode; if we didn't well we're not going\n    // to send it now are we.\n    if (f === HEARTBEAT); // ignore; it's already counted as activity\n                          // on the socket, which is its purpose\n    else if (f.id === defs.ConnectionClose) {\n      // Oh. OK. I guess we're done here then.\n      connection.sendMethod(0, defs.ConnectionCloseOk, {});\n      var emsg = fmt('Connection closed: %s', closeMsg(f));\n      var s = stackCapture(emsg);\n      var e = new Error(emsg);\n      e.code = f.fields.replyCode;\n      if (isFatalError(e)) {\n        connection.emit('error', e);\n      }\n      connection.toClosed(s, e);\n    }\n    else if (f.id === defs.ConnectionBlocked) {\n      connection.emit('blocked', f.fields.reason);\n    }\n    else if (f.id === defs.ConnectionUnblocked) {\n      connection.emit('unblocked');\n    }\n    else {\n      connection.closeWithError(\n        fmt(\"Unexpected frame on channel 0\"),\n        constants.UNEXPECTED_FRAME,\n        new Error(fmt(\"Unexpected frame on channel 0: %s\",\n                      inspect(f, false))));\n    }\n  };\n}\n\n// This changed between versions, as did the codec, methods, etc. AMQP\n// 0-9-1 is fairly similar to 0.8, but better, and nothing implements\n// 0.8 that doesn't implement 0-9-1. In other words, it doesn't make\n// much sense to generalise here.\nC.sendProtocolHeader = function() {\n  this.sendBytes(frame.PROTOCOL_HEADER);\n};\n\n/*\n  The frighteningly complicated opening protocol (spec section 2.2.4):\n\n     Client -> Server\n\n       protocol header ->\n         <- start\n       start-ok ->\n     .. next two zero or more times ..\n         <- secure\n       secure-ok ->\n         <- tune\n       tune-ok ->\n       open ->\n         <- open-ok\n\nIf I'm only supporting SASL's PLAIN mechanism (which I am for the time\nbeing), it gets a bit easier since the server won't in general send\nback a `secure`, it'll just send `tune` after the `start-ok`.\n(SASL PLAIN: http://tools.ietf.org/html/rfc4616)\n\n*/\n\nC.open = function(allFields, openCallback0) {\n  var self = this;\n  var openCallback = openCallback0 || function() {};\n\n  // This is where we'll put our negotiated values\n  var tunedOptions = Object.create(allFields);\n\n  function wait(k) {\n    self.step(function(err, frame) {\n      if (err !== null) bail(err);\n      else if (frame.channel !== 0) {\n        bail(new Error(\n          fmt(\"Frame on channel != 0 during handshake: %s\",\n              inspect(frame, false))));\n      }\n      else k(frame);\n    });\n  }\n\n  function expect(Method, k) {\n    wait(function(frame) {\n      if (frame.id === Method) k(frame);\n      else {\n        bail(new Error(\n          fmt(\"Expected %s; got %s\",\n              methodName(Method), inspect(frame, false))));\n      }\n    });\n  }\n\n  function bail(err) {\n    openCallback(err);\n  }\n\n  function send(Method) {\n    // This can throw an exception if there's some problem with the\n    // options; e.g., something is a string instead of a number.\n    try { self.sendMethod(0, Method, tunedOptions); }\n    catch (err) { bail(err); }\n  }\n\n  function negotiate(server, desired) {\n    // We get sent values for channelMax, frameMax and heartbeat,\n    // which we may accept or lower (subject to a minimum for\n    // frameMax, but we'll leave that to the server to enforce). In\n    // all cases, `0` really means \"no limit\", or rather the highest\n    // value in the encoding, e.g., unsigned short for channelMax.\n    if (server === 0 || desired === 0) {\n      // i.e., whichever places a limit, if either\n      return Math.max(server, desired);\n    }\n    else {\n      return Math.min(server, desired);\n    }\n  }\n\n  function onStart(start) {\n    var mechanisms = start.fields.mechanisms.toString().split(' ');\n    if (mechanisms.indexOf(allFields.mechanism) < 0) {\n      bail(new Error(fmt('SASL mechanism %s is not provided by the server',\n                         allFields.mechanism)));\n      return;\n    }\n    send(defs.ConnectionStartOk);\n    wait(afterStartOk);\n  }\n\n  function afterStartOk(reply) {\n    switch (reply.id) {\n    case defs.ConnectionSecure:\n      bail(new Error(\n        \"Wasn't expecting to have to go through secure\"));\n      break;\n    case defs.ConnectionClose:\n      bail(new Error(fmt(\"Handshake terminated by server: %s\",\n                         closeMsg(reply))));\n      break;\n    case defs.ConnectionTune:\n      var fields = reply.fields;\n      tunedOptions.frameMax =\n        negotiate(fields.frameMax, allFields.frameMax);\n      tunedOptions.channelMax =\n        negotiate(fields.channelMax, allFields.channelMax);\n      tunedOptions.heartbeat =\n        negotiate(fields.heartbeat, allFields.heartbeat);\n      send(defs.ConnectionTuneOk);\n      send(defs.ConnectionOpen);\n      expect(defs.ConnectionOpenOk, onOpenOk);\n      break;\n    default:\n      bail(new Error(\n        fmt(\"Expected connection.secure, connection.close, \" +\n            \"or connection.tune during handshake; got %s\",\n            inspect(reply, false))));\n      break;\n    }\n  }\n\n  function onOpenOk(openOk) {\n    // Impose the maximum of the encoded value, if the negotiated\n    // value is zero, meaning \"no, no limits\"\n    self.channelMax = tunedOptions.channelMax || 0xffff;\n    self.frameMax = tunedOptions.frameMax || 0xffffffff;\n    // 0 means \"no heartbeat\", rather than \"maximum period of\n    // heartbeating\"\n    self.heartbeat = tunedOptions.heartbeat;\n    self.heartbeater = self.startHeartbeater();\n    self.accept = mainAccept;\n    succeed(openOk);\n  }\n\n  // If the server closes the connection, it's probably because of\n  // something we did\n  function endWhileOpening(err) {\n    bail(err || new Error('Socket closed abruptly ' +\n                          'during opening handshake'));\n  }\n\n  this.stream.on('end', endWhileOpening);\n  this.stream.on('error', endWhileOpening);\n\n  function succeed(ok) {\n    self.stream.removeListener('end', endWhileOpening);\n    self.stream.removeListener('error', endWhileOpening);\n    self.stream.on('error', self.onSocketError.bind(self));\n    self.stream.on('end', self.onSocketError.bind(\n      self, new Error('Unexpected close')));\n    self.on('frameError', self.onSocketError.bind(self));\n    self.acceptLoop();\n    openCallback(null, ok);\n  }\n\n  // Now kick off the handshake by prompting the server\n  this.sendProtocolHeader();\n  expect(defs.ConnectionStart, onStart);\n};\n\n// Closing things: AMQP has a closing handshake that applies to\n// closing both connects and channels. As the initiating party, I send\n// Close, then ignore all frames until I see either CloseOK --\n// which signifies that the other party has seen the Close and shut\n// the connection or channel down, so it's fine to free resources; or\n// Close, which means the other party also wanted to close the\n// whatever, and I should send CloseOk so it can free resources,\n// then go back to waiting for the CloseOk. If I receive a Close\n// out of the blue, I should throw away any unsent frames (they will\n// be ignored anyway) and send CloseOk, then clean up resources. In\n// general, Close out of the blue signals an error (or a forced\n// closure, which may as well be an error).\n//\n//  RUNNING [1] --- send Close ---> Closing [2] ---> recv Close --+\n//     |                               |                         [3]\n//     |                               +------ send CloseOk ------+\n//  recv Close                   recv CloseOk\n//     |                               |\n//     V                               V\n//  Ended [4] ---- send CloseOk ---> Closed [5]\n//\n// [1] All frames accepted; getting a Close frame from the server\n// moves to Ended; client may initiate a close by sending Close\n// itself.\n// [2] Client has initiated a close; only CloseOk or (simulataneously\n// sent) Close is accepted.\n// [3] Simultaneous close\n// [4] Server won't send any more frames; accept no more frames, send\n// CloseOk.\n// [5] Fully closed, client will send no more, server will send no\n// more. Signal 'close' or 'error'.\n//\n// There are two signalling mechanisms used in the API. The first is\n// that calling `close` will return a promise, that will either\n// resolve once the connection or channel is cleanly shut down, or\n// will reject if the shutdown times out.\n//\n// The second is the 'close' and 'error' events. These are\n// emitted as above. The events will fire *before* promises are\n// resolved.\n\n// Close the connection without even giving a reason. Typical.\nC.close = function(closeCallback) {\n  var k = closeCallback && function() { closeCallback(null); };\n  this.closeBecause(\"Cheers, thanks\", constants.REPLY_SUCCESS, k);\n};\n\n// Close with a reason and a 'code'. I'm pretty sure RabbitMQ totally\n// ignores these; maybe it logs them. The continuation will be invoked\n// when the CloseOk has been received, and before the 'close' event.\nC.closeBecause = function(reason, code, k) {\n  this.sendMethod(0, defs.ConnectionClose, {\n    replyText: reason,\n    replyCode: code,\n    methodId: 0, classId: 0\n  });\n  var s = stackCapture('closeBecause called: ' + reason);\n  this.toClosing(s, k);\n};\n\nC.closeWithError = function(reason, code, error) {\n  this.emit('error', error);\n  this.closeBecause(reason, code);\n};\n\nC.onSocketError = function(err) {\n  if (!this.expectSocketClose) {\n    // forestall any more calls to onSocketError, since we're signed\n    // up for `'error'` *and* `'end'`\n    this.expectSocketClose = true;\n    this.emit('error', err);\n    var s = stackCapture('Socket error');\n    this.toClosed(s, err);\n  }\n};\n\nfunction invalidOp(msg, stack) {\n  return function() {\n    throw new IllegalOperationError(msg, stack);\n  };\n}\n\nfunction invalidateSend(conn, msg, stack) {\n  conn.sendMethod = conn.sendContent = conn.sendMessage =\n    invalidOp(msg, stack);\n}\n\n// A close has been initiated. Repeat: a close has been initiated.\n// This means we should not send more frames, anyway they will be\n// ignored. We also have to shut down all the channels.\nC.toClosing = function(capturedStack, k) {\n  var send = this.sendMethod.bind(this);\n\n  this.accept = function(f) {\n    if (f.id === defs.ConnectionCloseOk) {\n      if (k) k();\n      var s = stackCapture('ConnectionCloseOk received');\n      this.toClosed(s, undefined);\n    }\n    else if (f.id === defs.ConnectionClose) {\n      send(0, defs.ConnectionCloseOk, {});\n    }\n    // else ignore frame\n  };\n  invalidateSend(this, 'Connection closing', capturedStack);\n};\n\nC._closeChannels = function(capturedStack) {\n  for (var i = 1; i < this.channels.length; i++) {\n    var ch = this.channels[i];\n    if (ch !== null) {\n      ch.channel.toClosed(capturedStack); // %%% or with an error? not clear\n    }\n  }\n};\n\n// A close has been confirmed. Cease all communication.\nC.toClosed = function(capturedStack, maybeErr) {\n  this._closeChannels(capturedStack);\n  var info = fmt('Connection closed (%s)',\n                 (maybeErr) ? maybeErr.toString() : 'by client');\n  // Tidy up, invalidate enverything, dynamite the bridges.\n  invalidateSend(this, info, capturedStack);\n  this.accept = invalidOp(info, capturedStack);\n  this.close = function(cb) {\n    cb && cb(new IllegalOperationError(info, capturedStack));\n  };\n  if (this.heartbeater) this.heartbeater.clear();\n  // This is certainly true now, if it wasn't before\n  this.expectSocketClose = true;\n  this.stream.end();\n  this.emit('close', maybeErr);\n};\n\n// ===\n\nC.startHeartbeater = function() {\n  if (this.heartbeat === 0) return null;\n  else {\n    var self = this;\n    var hb = new Heart(this.heartbeat,\n                       this.checkSend.bind(this),\n                       this.checkRecv.bind(this));\n    hb.on('timeout', function() {\n      var hberr = new Error(\"Heartbeat timeout\");\n      self.emit('error', hberr);\n      var s = stackCapture('Heartbeat timeout');\n      self.toClosed(s, hberr);\n    });\n    hb.on('beat', function() {\n      self.sendHeartbeat();\n    });\n    return hb;\n  }\n};\n\n// I use an array to keep track of the channels, rather than an\n// object. The channel identifiers are numbers, and allocated by the\n// connection. If I try to allocate low numbers when they are\n// available (which I do, by looking from the start of the bitset),\n// this ought to keep the array small, and out of 'sparse array\n// storage'. I also set entries to null, rather than deleting them, in\n// the expectation that the next channel allocation will fill the slot\n// again rather than growing the array. See\n// http://www.html5rocks.com/en/tutorials/speed/v8/\nC.freshChannel = function(channel, options) {\n  var next = this.freeChannels.nextClearBit(1);\n  if (next < 0 || next > this.channelMax)\n    throw new Error(\"No channels left to allocate\");\n  this.freeChannels.set(next);\n\n  var hwm = (options && options.highWaterMark) || DEFAULT_WRITE_HWM;\n  var writeBuffer = new PassThrough({\n    objectMode: true, highWaterMark: hwm\n  });\n  this.channels[next] = {channel: channel, buffer: writeBuffer};\n  writeBuffer.on('drain', function() {\n    channel.onBufferDrain();\n  });\n  this.muxer.pipeFrom(writeBuffer);\n  return next;\n};\n\nC.releaseChannel = function(channel) {\n  this.freeChannels.clear(channel);\n  var buffer = this.channels[channel].buffer;\n  this.muxer.unpipeFrom(buffer);\n  this.channels[channel] = null;\n};\n\nC.acceptLoop = function() {\n  var self = this;\n\n  function go() {\n    try {\n      var f; while (f = self.recvFrame()) self.accept(f);\n    }\n    catch (e) {\n      self.emit('frameError', e);\n    }\n  }\n  self.stream.on('readable', go);\n  go();\n};\n\nC.step = function(cb) {\n  var self = this;\n  function recv() {\n    var f;\n    try {\n      f = self.recvFrame();\n    }\n    catch (e) {\n      cb(e, null);\n      return;\n    }\n    if (f) cb(null, f);\n    else self.stream.once('readable', recv);\n  }\n  recv();\n};\n\nC.checkSend = function() {\n  var check = this.sentSinceLastCheck;\n  this.sentSinceLastCheck = false;\n  return check;\n}\n\nC.checkRecv = function() {\n  var check = this.recvSinceLastCheck;\n  this.recvSinceLastCheck = false;\n  return check;\n}\n\nC.sendBytes = function(bytes) {\n  this.sentSinceLastCheck = true;\n  this.stream.write(bytes);\n};\n\nC.sendHeartbeat = function() {\n  return this.sendBytes(frame.HEARTBEAT_BUF);\n};\n\nvar encodeMethod = defs.encodeMethod;\nvar encodeProperties = defs.encodeProperties;\n\nC.sendMethod = function(channel, Method, fields) {\n  var frame = encodeMethod(Method, channel, fields);\n  this.sentSinceLastCheck = true;\n  var buffer = this.channels[channel].buffer;\n  return buffer.write(frame);\n};\n\nC.sendMessage = function(channel,\n                         Method, fields,\n                         Properties, props,\n                         content) {\n  if (!Buffer.isBuffer(content))\n    throw new TypeError('content is not a buffer');\n\n  var mframe = encodeMethod(Method, channel, fields);\n  var pframe = encodeProperties(Properties, channel,\n                                content.length, props);\n  var buffer = this.channels[channel].buffer;\n  this.sentSinceLastCheck = true;\n\n  var methodHeaderLen = mframe.length + pframe.length;\n  var bodyLen = (content.length > 0) ?\n    content.length + FRAME_OVERHEAD : 0;\n  var allLen = methodHeaderLen + bodyLen;\n\n  if (allLen < SINGLE_CHUNK_THRESHOLD) {\n    var all = Buffer.alloc(allLen);\n    var offset = mframe.copy(all, 0);\n    offset += pframe.copy(all, offset);\n\n    if (bodyLen > 0)\n      makeBodyFrame(channel, content).copy(all, offset);\n    return buffer.write(all);\n  }\n  else {\n    if (methodHeaderLen < SINGLE_CHUNK_THRESHOLD) {\n      var both = Buffer.alloc(methodHeaderLen);\n      var offset = mframe.copy(both, 0);\n      pframe.copy(both, offset);\n      buffer.write(both);\n    }\n    else {\n      buffer.write(mframe);\n      buffer.write(pframe);\n    }\n    return this.sendContent(channel, content);\n  }\n};\n\nvar FRAME_OVERHEAD = defs.FRAME_OVERHEAD;\nvar makeBodyFrame = frame.makeBodyFrame;\n\nC.sendContent = function(channel, body) {\n  if (!Buffer.isBuffer(body)) {\n    throw new TypeError(fmt(\"Expected buffer; got %s\", body));\n  }\n  var writeResult = true;\n  var buffer = this.channels[channel].buffer;\n\n  var maxBody = this.frameMax - FRAME_OVERHEAD;\n\n  for (var offset = 0; offset < body.length; offset += maxBody) {\n    var end = offset + maxBody;\n    var slice = (end > body.length) ? body.slice(offset) : body.slice(offset, end);\n    var bodyFrame = makeBodyFrame(channel, slice);\n    writeResult = buffer.write(bodyFrame);\n  }\n  this.sentSinceLastCheck = true;\n  return writeResult;\n};\n\nvar parseFrame = frame.parseFrame;\nvar decodeFrame = frame.decodeFrame;\n\nC.recvFrame = function() {\n  // %%% identifying invariants might help here?\n  var frame = parseFrame(this.rest, this.frameMax);\n\n  if (!frame) {\n    var incoming = this.stream.read();\n    if (incoming === null) {\n      return false;\n    }\n    else {\n      this.recvSinceLastCheck = true;\n      this.rest = Buffer.concat([this.rest, incoming]);\n      return this.recvFrame();\n    }\n  }\n  else {\n    this.rest = frame.rest;\n    return decodeFrame(frame);\n  }\n};\n\nfunction wrapStream(s) {\n  if (s instanceof Duplex) return s;\n  else {\n    var ws = new Duplex();\n    ws.wrap(s); //wraps the readable side of things\n    ws._write = function(chunk, encoding, callback) {\n      return s.write(chunk, encoding, callback);\n    };\n    return ws;\n  }\n}\n\nfunction isFatalError(error) {\n  switch (error && error.code) {\n  case defs.constants.CONNECTION_FORCED:\n  case defs.constants.REPLY_SUCCESS:\n    return false;\n  default:\n    return true;\n  }\n}\n\nmodule.exports.Connection = Connection;\nmodule.exports.isFatalError = isFatalError;\n","module.exports = require(\"querystring\");","//\n//\n//\n\n// General-purpose API for glueing everything together.\n\n'use strict';\n\nvar URL = require('url');\nvar QS = require('querystring');\nvar Connection = require('./connection').Connection;\nvar fmt = require('util').format;\nvar credentials = require('./credentials');\n\nfunction copyInto(obj, target) {\n  var keys = Object.keys(obj);\n  var i = keys.length;\n  while (i--) {\n    var k = keys[i];\n    target[k] = obj[k];\n  }\n  return target;\n}\n\n// Adapted from util._extend, which is too fringe to use.\nfunction clone(obj) {\n  return copyInto(obj, {});\n}\n\nvar CLIENT_PROPERTIES = {\n  \"product\": \"amqplib\",\n  \"version\": require('../package.json').version,\n  \"platform\": fmt('Node.JS %s', process.version),\n  \"information\": \"http://squaremo.github.io/amqp.node\",\n  \"capabilities\": {\n    \"publisher_confirms\": true,\n    \"exchange_exchange_bindings\": true,\n    \"basic.nack\": true,\n    \"consumer_cancel_notify\": true,\n    \"connection.blocked\": true,\n    \"authentication_failure_close\": true\n  }\n};\n\n// Construct the main frames used in the opening handshake\nfunction openFrames(vhost, query, credentials, extraClientProperties) {\n  if (!vhost)\n    vhost = '/';\n  else\n    vhost = QS.unescape(vhost);\n\n  var query = query || {};\n\n  function intOrDefault(val, def) {\n    return (val === undefined) ? def : parseInt(val);\n  }\n\n  var clientProperties = Object.create(CLIENT_PROPERTIES);\n\n  return {\n    // start-ok\n    'clientProperties': copyInto(extraClientProperties, clientProperties),\n    'mechanism': credentials.mechanism,\n    'response': credentials.response(),\n    'locale': query.locale || 'en_US',\n\n    // tune-ok\n    'channelMax': intOrDefault(query.channelMax, 0),\n    'frameMax': intOrDefault(query.frameMax, 0x1000),\n    'heartbeat': intOrDefault(query.heartbeat, 0),\n\n    // open\n    'virtualHost': vhost,\n    'capabilities': '',\n    'insist': 0\n  };\n}\n\n// Decide on credentials based on what we're supplied. Note that in a\n// parsed URL, the auth part is already URL-decoded, so e.g., '%3a' in\n// the URL is already decoded to ':'. This is a bit unhelpful, as it\n// means we can't tell whether a colon is a separator, or part of the\n// username. Assume no colons in usernames.\nfunction credentialsFromUrl(parts) {\n  var user = 'guest', passwd = 'guest';\n  if (parts.auth) {\n    var colon = parts.auth.indexOf(':')\n    if (colon == -1) {\n      user = parts.auth;\n      passwd = '';\n    } else {\n      user = parts.auth.substring(0, colon);\n      passwd = parts.auth.substring(colon+1);\n    }\n  }\n  return credentials.plain(user, passwd);\n}\n\nfunction connect(url, socketOptions, openCallback) {\n  // tls.connect uses `util._extend()` on the options given it, which\n  // copies only properties mentioned in `Object.keys()`, when\n  // processing the options. So I have to make copies too, rather\n  // than using `Object.create()`.\n  var sockopts = clone(socketOptions || {});\n  url = url || 'amqp://localhost';\n\n  var noDelay = !!sockopts.noDelay;\n  var timeout = sockopts.timeout;\n  var keepAlive = !!sockopts.keepAlive;\n  // 0 is default for node\n  var keepAliveDelay = sockopts.keepAliveDelay || 0;\n\n  var extraClientProperties = sockopts.clientProperties || {};\n\n  var protocol, fields;\n  if (typeof url === 'object') {\n    protocol = (url.protocol || 'amqp') + ':';\n    sockopts.host = url.hostname;\n    sockopts.port = url.port || ((protocol === 'amqp:') ? 5672 : 5671);\n\n    var user, pass;\n    // Only default if both are missing, to have the same behaviour as\n    // the stringly URL.\n    if (url.username == undefined && url.password == undefined) {\n      user = 'guest'; pass = 'guest';\n    } else {\n      user = url.username || '';\n      pass = url.password || '';\n    }\n\n    var config = {\n      locale: url.locale,\n      channelMax: url.channelMax,\n      frameMax: url.frameMax,\n      heartbeat: url.heartbeat,\n    };\n\n    fields = openFrames(url.vhost, config, sockopts.credentials || credentials.plain(user, pass), extraClientProperties);\n  } else {\n    var parts = URL.parse(url, true); // yes, parse the query string\n    protocol = parts.protocol;\n    sockopts.host = parts.hostname;\n    sockopts.port = parseInt(parts.port) || ((protocol === 'amqp:') ? 5672 : 5671);\n    var vhost = parts.pathname ? parts.pathname.substr(1) : null;\n    fields = openFrames(vhost, parts.query, sockopts.credentials || credentialsFromUrl(parts), extraClientProperties);\n  }\n\n  var sockok = false;\n  var sock;\n\n  function onConnect() {\n    sockok = true;\n    sock.setNoDelay(noDelay);\n    if (keepAlive) sock.setKeepAlive(keepAlive, keepAliveDelay);\n\n    var c = new Connection(sock);\n    c.open(fields, function(err, ok) {\n      // disable timeout once the connection is open, we don't want\n      // it fouling things\n      if (timeout) sock.setTimeout(0);\n      if (err === null) {\n        openCallback(null, c);\n      }\n      else openCallback(err);\n    });\n  }\n\n  if (protocol === 'amqp:') {\n    sock = require('net').connect(sockopts, onConnect);\n  }\n  else if (protocol === 'amqps:') {\n    sock = require('tls').connect(sockopts, onConnect);\n  }\n  else {\n    throw new Error(\"Expected amqp: or amqps: as the protocol; got \" + protocol);\n  }\n\n  if (timeout) {\n    sock.setTimeout(timeout, function() {\n      sock.end();\n      sock.destroy();\n      openCallback(new Error('connect ETIMEDOUT'));\n    });\n  }\n\n  sock.once('error', function(err) {\n    if (!sockok) openCallback(err);\n  });\n\n}\n\nmodule.exports.connect = connect;\nmodule.exports.credentialsFromUrl = credentialsFromUrl;\n","var raw_connect = require('./lib/connect').connect;\nvar CallbackModel = require('./lib/callback_model').CallbackModel;\n\n// Supports three shapes:\n// connect(url, options, callback)\n// connect(url, callback)\n// connect(callback)\nfunction connect(url, options, cb) {\n  if (typeof url === 'function')\n    cb = url, url = false, options = false;\n  else if (typeof options === 'function')\n    cb = options, options = false;\n\n  raw_connect(url, options, function(err, c) {\n    if (err === null) cb(null, new CallbackModel(c));\n    else cb(err);\n  });\n};\n\nmodule.exports.connect = connect;\nmodule.exports.credentials = require('./lib/credentials');\nmodule.exports.IllegalOperationError = require('./lib/error').IllegalOperationError;\n","module.exports = require(\"os\");","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","module.exports = require(\"multer\");","module.exports = require(\"mime-types\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"fs\");","var mongoose = require('mongoose');\r\n\r\nvar schema = new mongoose.Schema({\r\n  count: {\r\n    type: Number,\r\n    required: true,\r\n    default: 0\r\n  },\r\n  patient_id: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  user_id: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  last_seen: {\r\n    type: Date,\r\n    default: null\r\n  }\r\n}, {\r\n    versionKey: false,\r\n    toJSON: {\r\n      transform: (doc, ret) => {\r\n        ret.id = ret._id;\r\n        delete ret._id;\r\n        return ret;\r\n      }\r\n    }\r\n  });\r\n\r\nmodule.exports = mongoose.model('WarningDoctor', schema);","var mongoose = require('mongoose');\r\n\r\nvar schema = new mongoose.Schema({\r\n  count: {\r\n    type: Number,\r\n    required: true,\r\n    default: 0\r\n  },\r\n  vitabox_id: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  user_id: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  last_seen: {\r\n    type: Date,\r\n    default: null\r\n  }\r\n}, {\r\n    versionKey: false,\r\n    toJSON: {\r\n      transform: (doc, ret) => {\r\n        ret.id = ret._id;\r\n        delete ret._id;\r\n        return ret;\r\n      }\r\n    }\r\n  });\r\n\r\nmodule.exports = mongoose.model('WarningUser', schema);","var mongoose = require('mongoose');\r\n\r\nvar schema = new mongoose.Schema({\r\n  datetime: {\r\n    type: Date,\r\n    required: true\r\n  },\r\n  message: {\r\n    type: String,\r\n    required: false\r\n  },\r\n  vitabox_id: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  patient_id: {\r\n    type: String,\r\n    required: false,\r\n  },\r\n  sensor_id: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  seen_vitabox: {\r\n    type: Date,\r\n    default: null\r\n  }\r\n}, {\r\n    versionKey: false,\r\n    toJSON: {\r\n      transform: (doc, ret) => {\r\n        ret.id = ret._id;\r\n        delete ret._id;\r\n        return ret;\r\n      }\r\n    }\r\n  });\r\n\r\nmodule.exports = mongoose.model('Warning', schema);","var mongoose = require('mongoose');\r\n\r\nvar schema = new mongoose.Schema({\r\n    value: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    datetime: {\r\n        type: Date,\r\n        required: true\r\n    },\r\n    sensor_id: {\r\n        type: String,\r\n        required: false\r\n    },\r\n    patient_id: {\r\n        type: String,\r\n        default: null\r\n    }\r\n}, {\r\n        versionKey: false,\r\n        toJSON: {\r\n            transform: (doc, ret) => {\r\n                ret.id = ret._id;\r\n                delete ret._id;\r\n                return ret;\r\n            }\r\n        }\r\n    });\r\n\r\nmodule.exports = mongoose.model('Record', schema);","var mongoose = require('mongoose');\r\n\r\nvar schema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    measures: [{\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'Profilemeasure'\r\n    }]\r\n}, {\r\n        versionKey: false, \r\n        toJSON: {\r\n            transform: (doc, ret) => {\r\n                ret.id = ret._id;\r\n                delete ret._id;\r\n                return ret;\r\n            }\r\n        }\r\n    });\r\n\r\nmodule.exports = mongoose.model('Profilemodel', schema);","var mongoose = require('mongoose');\r\n\r\nvar schema = new mongoose.Schema({\r\n  measure: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  tag: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  min: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  max: {\r\n    type: Number,\r\n    required: true\r\n  }\r\n}, {\r\n    versionKey: false,\r\n    toJSON: {\r\n      transform: (doc, ret) => {\r\n        ret.id = ret._id;\r\n        delete ret._id;\r\n        return ret;\r\n      }\r\n    }\r\n  });\r\n\r\nmodule.exports = mongoose.model('Profilemeasure', schema);","var mongoose = require('mongoose');\r\n\r\nvar schema = new mongoose.Schema({\r\n  user_id: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  datetime: {\r\n    type: Date,\r\n    required: true\r\n  },\r\n  message: {\r\n    type: String,\r\n    required: false\r\n  }\r\n}, {\r\n    versionKey: false,\r\n    toJSON: {\r\n      transform: (doc, ret) => {\r\n        ret.id = ret._id;\r\n        delete ret._id;\r\n        return ret;\r\n      }\r\n    }\r\n  });\r\n\r\nmodule.exports = mongoose.model('Log', schema);","var mongoose = require('mongoose');\r\n\r\nvar schema = new mongoose.Schema({\r\n  datetime: {\r\n    type: Date,\r\n    required: true\r\n  },\r\n  title: {\r\n    type: String,\r\n    required: false\r\n  },\r\n  message: {\r\n    type: String,\r\n    required: false\r\n  },\r\n  vitabox_id: {\r\n    type: String,\r\n    required: true,\r\n    default: false\r\n  },\r\n  board_id: {\r\n    type: String,\r\n    required: true,\r\n    default: false\r\n  },\r\n  sensor_id: {\r\n    type: String,\r\n    required: true,\r\n    default: false\r\n  },\r\n  seen_date: {\r\n    type: Date,\r\n    default: null\r\n  },\r\n  seen_user: {\r\n    type: String,\r\n    default: null\r\n  },\r\n}, {\r\n    versionKey: false,\r\n    toJSON: {\r\n      transform: (doc, ret) => {\r\n        ret.id = ret._id;\r\n        delete ret._id;\r\n        return ret;\r\n      }\r\n    }\r\n  });\r\n\r\n\r\nmodule.exports = mongoose.model('Error', schema);","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Vitabox = sequelize.define('Vitabox', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    latitude: {\r\n      type: DataTypes.DECIMAL(10, 7),\r\n      allowNull: true,\r\n      defaultValue: null,\r\n      validate: {\r\n        min: {\r\n          args: -90,\r\n          msg: \"latitude minimum acceptable value is -90\"\r\n        },\r\n        max: {\r\n          args: 90,\r\n          msg: \"latitude maximum acceptable value is 90\"\r\n        }\r\n      }\r\n    },\r\n    longitude: {\r\n      type: DataTypes.DECIMAL(10, 7),\r\n      allowNull: true,\r\n      defaultValue: null,\r\n      validate: {\r\n        min: {\r\n          args: -180,\r\n          msg: \"longitude minimum acceptable value is -180\"\r\n        },\r\n        max: {\r\n          args: 180,\r\n          msg: \"longitude maximum acceptable value is 180\"\r\n        }\r\n      }\r\n    },\r\n    settings: {\r\n      type: DataTypes.JSON,\r\n      allowNull: true,\r\n      defaultValue: null,\r\n    },\r\n    address: {\r\n      type: DataTypes.STRING,\r\n      defaultValue: null,\r\n      validate: {\r\n        notEmpty: {\r\n          args: true,\r\n          msg: \"address must be defined\"\r\n        }\r\n      }\r\n    },\r\n    registered: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    active: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    connected: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    last_commit: {\r\n      type: DataTypes.DATE,\r\n      allowNull: true,\r\n      defaultValue: null\r\n    },\r\n    district: {\r\n      type: DataTypes.STRING,\r\n      defaultValue: null,\r\n      validate: {\r\n        notEmpty: {\r\n          args: true,\r\n          msg: \"district must be defined\"\r\n        }\r\n      }\r\n    },\r\n    locality: {\r\n      type: DataTypes.STRING,\r\n      defaultValue: null,\r\n      validate: {\r\n        notEmpty: {\r\n          args: true,\r\n          msg: \"locality must be defined\"\r\n        }\r\n      }\r\n    }\r\n  }, { underscored: true });\r\n\r\n  Vitabox.associate = function (models) {\r\n    models.Vitabox.belongsToMany(models.User, { through: models.UserVitabox });\r\n    models.Vitabox.hasMany(models.Patient);\r\n    models.Vitabox.hasMany(models.Board);\r\n  };\r\n\r\n  return Vitabox;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var User = sequelize.define('User', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    email: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      unique: {\r\n        args: true,\r\n        msg: 'email already registered'\r\n      },\r\n    },\r\n    name: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    photo: { type: DataTypes.STRING },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    admin: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    doctor: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    },\r\n    resetPasswordToken: { type: DataTypes.STRING },\r\n    resetPasswordExpires: { type: DataTypes.DATE },\r\n  }, {\r\n      scopes: {\r\n        profile: { attributes: { exclude: ['password'] } }\r\n      },\r\n      underscored: true\r\n    });\r\n\r\n  User.associate = function (models) {\r\n    models.User.belongsToMany(models.Vitabox, { through: models.UserVitabox });\r\n    models.User.belongsToMany(models.Patient, { through: models.DoctorPatient });\r\n  };\r\n\r\n  return User;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var UserVitabox = sequelize.define('UserVitabox', {\r\n    sponsor: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    }\r\n  }, { underscored: true });\r\n\r\n  return UserVitabox;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Sensor = sequelize.define('Sensor', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    last_values: { type: DataTypes.JSON },\r\n    last_commit: {\r\n      type: DataTypes.DATE,\r\n      allowNull: true,\r\n      defaultValue: null\r\n    },\r\n    last_error: {\r\n      type: DataTypes.DATE,\r\n      allowNull: true,\r\n      defaultValue: null\r\n    }\r\n  }, { underscored: true });\r\n\r\n  Sensor.associate = function (models) {\r\n    models.Sensor.belongsTo(models.Board);\r\n    models.Sensor.belongsTo(models.Sensormodel);\r\n  };\r\n\r\n  return Sensor;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Sensormodel = sequelize.define('Sensormodel', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    transducer: {\r\n      type: DataTypes.STRING\r\n    },\r\n    measure: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      defaultValue: '',\r\n      validate: {\r\n        notEmpty: {\r\n          msg: \"measure init must be defined\"\r\n        }\r\n      }\r\n    },\r\n    unit: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      defaultValue: ''\r\n    },\r\n    tag: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      unique: {\r\n        args: true,\r\n        msg: 'board tag already registered'\r\n      }\r\n    },\r\n    min_acceptable: {\r\n      type: DataTypes.DECIMAL(10, 5),\r\n      allowNull: false,\r\n      validate: {\r\n        isDecimal: {\r\n          args: true,\r\n          msg: \"minimum acceptable value must be defined\"\r\n        }\r\n      }\r\n    },\r\n    max_acceptable: {\r\n      type: DataTypes.DECIMAL(10, 5),\r\n      allowNull: false,\r\n      validate: {\r\n        isDecimal: {\r\n          args: true,\r\n          msg: \"maximum acceptable value must be defined\"\r\n        }\r\n      }\r\n    },\r\n    min_possible: {\r\n      type: DataTypes.DECIMAL(10, 5),\r\n      allowNull: false,\r\n      validate: {\r\n        isDecimal: {\r\n          args: true,\r\n          msg: \"minimum possible value must be defined\"\r\n        }\r\n      }\r\n    },\r\n    max_possible: {\r\n      type: DataTypes.DECIMAL(10, 5),\r\n      validate: {\r\n        isDecimal: {\r\n          args: true,\r\n          msg: \"maximum possible value must be defined\"\r\n        }\r\n      }\r\n    },\r\n    to_read: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      defaultValue: ''\r\n    }\r\n  }, { underscored: true });\r\n\r\n  Sensormodel.associate = function (models) {\r\n    models.Sensormodel.belongsToMany(models.Boardmodel, { through: \"BoardmodelSensor\" });\r\n    models.Sensormodel.hasMany(models.Sensor);\r\n  };\r\n\r\n  return Sensormodel;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Profile = sequelize.define('Profile', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    measure: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      defaultValue: '',\r\n      validate: {\r\n        notEmpty: {\r\n          msg: \"measure init must be defined\"\r\n        }\r\n      }\r\n    },\r\n    tag: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      defaultValue: '',\r\n      validate: {\r\n        notEmpty: {\r\n          msg: \"measure tag must be defined\"\r\n        }\r\n      }\r\n    },\r\n    min: {\r\n      type: DataTypes.DECIMAL(10, 5),\r\n      allowNull: false,\r\n      validate: {\r\n        isDecimal: {\r\n          args: true,\r\n          msg: \"minimum acceptable value must be defined\"\r\n        }\r\n      }\r\n    },\r\n    max: {\r\n      type: DataTypes.DECIMAL(10, 5),\r\n      allowNull: false,\r\n      validate: {\r\n        isDecimal: {\r\n          args: true,\r\n          msg: \"maximum acceptable value must be defined\"\r\n        }\r\n      }\r\n    },\r\n  }, { underscored: true });\r\n\r\n  Profile.associate = function (models) {\r\n    models.Profile.belongsTo(models.Patient);\r\n  };\r\n\r\n  return Profile;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n    var Patient = sequelize.define('Patient', {\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        birthdate: {\r\n            type: DataTypes.DATEONLY,\r\n            allowNull: false\r\n        },\r\n        name: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"patient name must be defined\"\r\n                }\r\n            }\r\n        },\r\n        gender: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            defaultValue: '',\r\n            validate: {\r\n                notEmpty: {\r\n                    msg: \"patient gender must be defined\"\r\n                }\r\n            }\r\n        },\r\n        active: {\r\n            type: DataTypes.BOOLEAN,\r\n            defaultValue: true\r\n        },\r\n        weight: {\r\n            type: DataTypes.FLOAT(4, 2),\r\n            allowNull: true,\r\n            validate: {\r\n                min: {\r\n                    args: 10,\r\n                    msg: \"minimum weight acceptable value is 10kg\"\r\n                },\r\n                max: {\r\n                    args: 300,\r\n                    msg: \"maximum weight acceptable value is 300kg\"\r\n                }\r\n            }\r\n        },\r\n        height: {\r\n            type: DataTypes.FLOAT(4, 2),\r\n            allowNull: true,\r\n            validate: {\r\n                min: {\r\n                    args: 0.5,\r\n                    msg: \"minimum height acceptable value is 0.5m\"\r\n                },\r\n                max: {\r\n                    args: 3,\r\n                    msg: \"maximum height acceptable value is 3m\"\r\n                }\r\n            }\r\n        },\r\n        profile: {\r\n            type: DataTypes.STRING,\r\n            defaultValue: 'default'\r\n        },\r\n        nif: {\r\n            type: DataTypes.STRING\r\n        },\r\n        cc: {\r\n            type: DataTypes.STRING\r\n        },\r\n        photo: { type: DataTypes.STRING }\r\n    }, { underscored: true });\r\n\r\n    Patient.associate = function (models) {\r\n        models.Patient.hasMany(models.Profile);\r\n        models.Patient.belongsTo(models.Vitabox);\r\n        models.Patient.belongsToMany(models.Board, { through: models.PatientBoard });\r\n        models.Patient.belongsToMany(models.User, { through: models.DoctorPatient, as: 'Doctors' });\r\n    };\r\n\r\n    return Patient;\r\n};","module.exports = (sequelize, DataTypes) => {\r\n  var PatientBoard = sequelize.define('PatientBoard', {\r\n    frequency: {\r\n      type: DataTypes.INTEGER(2).UNSIGNED,\r\n      allowNull: true,\r\n      defaultValue: null\r\n    },\r\n    last_commit: {\r\n      type: DataTypes.DATE,\r\n      allowNull: true,\r\n      defaultValue: null\r\n    }\r\n  }, { underscored: true });\r\n\r\n  return PatientBoard;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var UserVitabox = sequelize.define('DoctorPatient', {\r\n    accepted: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    }\r\n  }, { underscored: true });\r\n\r\n  return UserVitabox;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Board = sequelize.define('Board', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    description: {\r\n      type: DataTypes.STRING,\r\n      allowNull: true,\r\n      defaultValue: null\r\n    },\r\n    mac_addr: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      unique: {\r\n        args: true,\r\n        msg: 'MAC address already in use'\r\n      },\r\n      validate: {\r\n        is: {\r\n          args: /^([0-9a-f]{2}[:]){7}([0-9a-f]{2})|^([0-9a-f]{2}[:]){5}([0-9a-f]{2})$/,\r\n          msg: \"MAC addres must be valid\"\r\n        }\r\n      }\r\n    },\r\n    node_id: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      validate: {\r\n        is: {\r\n          args: /^([0-9a-f]{4})$/,\r\n          msg: \"Node id invalid\"\r\n        }\r\n      }\r\n    },\r\n    active: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    }\r\n  }, { underscored: true });\r\n\r\n  Board.associate = function (models) {\r\n    models.Board.belongsTo(models.Vitabox);\r\n    models.Board.belongsTo(models.Boardmodel);\r\n    models.Board.belongsToMany(models.Patient, { through: models.PatientBoard });\r\n    models.Board.hasMany(models.Sensor);\r\n  };\r\n\r\n  return Board;\r\n};","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var Boardmodel = sequelize.define('Boardmodel', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    type: {\r\n      type: DataTypes.ENUM,\r\n      values: [\"environmental\", \"wearable\", \"non-wearable\"],\r\n      validate: {\r\n        isIn: {\r\n          args: [[\"environmental\", \"wearable\", \"non-wearable\"]],\r\n          msg: \"board type must be environmental, wearable or non-wearable\"\r\n        }\r\n      }\r\n    },\r\n    name: {\r\n      type: DataTypes.STRING,\r\n      unique: {\r\n        args: true,\r\n        msg: 'board model already registered'\r\n      },\r\n      allowNull: false,\r\n      defaultValue: '',\r\n      validate: {\r\n        notEmpty: {\r\n          msg: \"board model must be defined\"\r\n        }\r\n      }\r\n    },\r\n    tag: {\r\n      type: DataTypes.STRING,\r\n      allowNull: true,\r\n      unique: {\r\n        args: true,\r\n        msg: 'board tag already registered'\r\n      }\r\n    }\r\n  }, { underscored: true });\r\n\r\n  Boardmodel.associate = function (models) {\r\n    models.Boardmodel.hasMany(models.Board);\r\n    models.Boardmodel.belongsToMany(models.Sensormodel, { through: \"BoardmodelSensor\" });\r\n  };\r\n\r\n  return Boardmodel;\r\n};","module.exports = require(\"sequelize\");","module.exports = require(\"dotenv\");","module.exports = require(\"cluster\");","// server.js\r\n\r\n// BASE SETUP\r\n// =============================================================================\r\nvar cluster = require('cluster');\r\n// Get the env variables from .env\r\nrequire('dotenv').config();\r\n\r\nif (cluster.isMaster) {\r\n    var db = require('./src/models/index');\r\n    db.sequelize.sync(process.env.NODE_ENV === \"development\" ? { alter: true } : {}).then(\r\n        () => {\r\n            require('./src/models/seed').seed(db).then(\r\n                () => {\r\n                    console.log('\\x1b[32m%s\\x1b[0m.', '(PLAIN) Connection established with MongoDB and MySQL');\r\n\r\n                    let workers = [];\r\n                    for (var i = 0; i < require('os').cpus().length; i++) workers.push(cluster.fork());\r\n                    console.log('(PLAIN) Master cluster created ' + workers.length + ' workers...');\r\n\r\n                    cluster.on('exit', (worker, code, signal) => { console.log('(PLAIN) Worker ' + worker.process.pid + ' died -> Starting a new worker'); cluster.fork(); });\r\n                }, error => { console.log('Unable to seed Databases.', error.message); process.exit(1); });\r\n        }, error => { console.log('Unable to connect to Databases.', error); process.exit(1); });\r\n} else {\r\n    require(\"./src/workers/broker\").connect().then(() => {\r\n            console.log('\\x1b[32m%s\\x1b[0m.', '(PLAIN) Connection established with RabbitMQ');\r\n\r\n    // START THE SERVER\r\n    // =============================================================================\r\n    var express = require('express'),\r\n        path = require('path');\r\n\r\n    // define our app using express\r\n    var app = express();\r\n    // middleware for all routes\r\n    require('./src/middleware')(app);\r\n\r\n    // Present Clients SPA\r\n    app.use('/', express.static(path.resolve(__dirname, 'public')));\r\n    // Present Documentation\r\n    app.use('/docs', express.static(path.resolve(__dirname, 'docs')));\r\n\r\n    // define routes\r\n    require('./src/router')(app);\r\n    //initialize a simple http server\r\n    const server = require('http').createServer();\r\n    // start http server\r\n    server.on('request', app);\r\n    // Define the listenning port\r\n    let port = process.env.PORT || 8080;\r\n    server.listen(port, () => {\r\n        // https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\r\n        console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server http listening on port', port);\r\n    });\r\n\r\n    // var https = require('https'), fs = require(\"fs\");\r\n    // //set options to https\r\n    // const options = {\r\n    //     key: fs.readFileSync(__dirname + \"/app/keys/key.pem\"),\r\n    //     cert: fs.readFileSync(__dirname + \"/app/keys/cert.pem\"),\r\n    //     ca: fs.readFileSync(__dirname + \"/app/keys/ca.pem\"),\r\n    //     dhparam: fs.readFileSync(__dirname + \"/app/keys/dhparam.pem\")\r\n    // };\r\n    // // start https server\r\n    // https.createServer(options, app).listen(8080, () => {\r\n    //     console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server https listening on port', port);\r\n    // });\r\n\r\n    }, error => { console.log('Unable to connect RabbitMQ.', error); process.exit(1); });\r\n}\r\n"],"sourceRoot":""}